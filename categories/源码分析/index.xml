<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>源码分析 on A lifelong learner.</title>
    <link>https://egolearner.github.io/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
    <description>Recent content in 源码分析 on A lifelong learner.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 08 Dec 2022 08:29:57 +0800</lastBuildDate><atom:link href="https://egolearner.github.io/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>simple-sqlite源码笔记</title>
      <link>https://egolearner.github.io/post/simple-sqlite-source-read/</link>
      <pubDate>Thu, 08 Dec 2022 08:29:57 +0800</pubDate>
      
      <guid>https://egolearner.github.io/post/simple-sqlite-source-read/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/madushadhanushka/simple-sqlite&#34;&gt;https://github.com/madushadhanushka/simple-sqlite&lt;/a&gt; 是从sqlite 2.5.0 抽取出的核心逻辑，适合用来学习sqlite的后端实现，如&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何实现page buffer&lt;/li&gt;
&lt;li&gt;如何实现基于磁盘的B树&lt;/li&gt;
&lt;li&gt;如何通过rollback journaling来实现事务支持和crash recovery&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;page-buffer-bool&#34;&gt;page buffer bool&lt;/h2&gt;
&lt;h3 id=&#34;page和pager实现&#34;&gt;page和pager实现&lt;/h3&gt;
&lt;p&gt;先看page的实现。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><a href="https://github.com/madushadhanushka/simple-sqlite">https://github.com/madushadhanushka/simple-sqlite</a> 是从sqlite 2.5.0 抽取出的核心逻辑，适合用来学习sqlite的后端实现，如</p>
<ol>
<li>如何实现page buffer</li>
<li>如何实现基于磁盘的B树</li>
<li>如何通过rollback journaling来实现事务支持和crash recovery</li>
</ol>
<h2 id="page-buffer-bool">page buffer bool</h2>
<h3 id="page和pager实现">page和pager实现</h3>
<p>先看page的实现。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// page size 大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define SQLITE_PAGE_SIZE 1024
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 页号。0 代表 &#34;not a page&#34;, 文件中的第一个页从1开始。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">Pgno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">** Each in-memory image of a page begins with the following header.
</span></span></span><span class="line"><span class="cl"><span class="cm">** This header is only visible to this pager module.  The client
</span></span></span><span class="line"><span class="cl"><span class="cm">** code that calls pager sees only the data that follows the header.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">PgHdr</span> <span class="n">PgHdr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">PgHdr</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span><span class="p">;</span>                 <span class="cm">/* The pager to which this page belongs */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pgno</span> <span class="n">pgno</span><span class="p">;</span>                     <span class="cm">/* The page number for this page */</span>
</span></span><span class="line"><span class="cl">  <span class="n">PgHdr</span> <span class="o">*</span><span class="n">pNextHash</span><span class="p">,</span> <span class="o">*</span><span class="n">pPrevHash</span><span class="p">;</span>  <span class="cm">/* Hash collision chain for PgHdr.pgno */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">nRef</span><span class="p">;</span>                      <span class="cm">/* Number of users of this page */</span>
</span></span><span class="line"><span class="cl">  <span class="n">PgHdr</span> <span class="o">*</span><span class="n">pNextFree</span><span class="p">,</span> <span class="o">*</span><span class="n">pPrevFree</span><span class="p">;</span>  <span class="cm">/* Freelist of pages where nRef==0 */</span>
</span></span><span class="line"><span class="cl">  <span class="n">PgHdr</span> <span class="o">*</span><span class="n">pNextAll</span><span class="p">,</span> <span class="o">*</span><span class="n">pPrevAll</span><span class="p">;</span>    <span class="cm">/* A list of all pages */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">inJournal</span><span class="p">;</span>                <span class="cm">/* TRUE if has been written to journal */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">inCkpt</span><span class="p">;</span>                   <span class="cm">/* TRUE if written to the checkpoint journal */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">dirty</span><span class="p">;</span>                    <span class="cm">/* TRUE if we need to write back changes */</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* SQLITE_PAGE_SIZE bytes of page data follow this header */</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* Pager.nExtra bytes of local data follow the page data */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>每个page的大小为SQLITE_PAGE_SIZE。PgHdr是page前面的一段内存，用于簿记一些信息，如是否是脏页(dirty)，是否已写入journal或checkpoint文件(inJournal, inCkpt)，页号（pgno），引用数(nRef)等。此外还记录一些双链表的next/prev指针，pNextHash记录哈希表的冲突链，pNextFree记录空闲页，pNextAll记录所有页。</p>
<p>在内存中布局如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="o">|</span>    <span class="k">sizeof</span><span class="p">(</span><span class="n">PgHdr</span><span class="p">)</span>   <span class="o">|</span>        <span class="n">SQLITE_PAGE_SIZE</span>     <span class="o">|</span>   <span class="n">Pager</span><span class="p">.</span><span class="n">nExtra</span>      <span class="o">|</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>按照上面的布局，定义了如下的宏来做内存地址的转换</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">** Convert a pointer to a PgHdr into a pointer to its data
</span></span></span><span class="line"><span class="cl"><span class="cm">** and back again.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define PGHDR_TO_DATA(P)  ((void*)(&amp;(P)[1]))
</span></span></span><span class="line"><span class="cl"><span class="cp">#define DATA_TO_PGHDR(D)  (&amp;((PgHdr*)(D))[-1])
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PGHDR_TO_EXTRA(P) ((void*)&amp;((char*)(&amp;(P)[1]))[SQLITE_PAGE_SIZE])
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们看PGHDR_TO_DATA的实现。最简单的情况下， <code>PgHdr* P = init xxx;</code> 把P当作一个数组，P[1] 相当于 P + sizeof(PgHdr)，指向了page的内存，&amp;P[1]的类型仍然为PgHdr*， 再将其转为void* 类型。sqlite实现时大量采用了类似的技巧。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">** A open page cache is an instance of the following structure.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Pager</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">zFilename</span><span class="p">;</span>            <span class="cm">/* Name of the database file */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">zJournal</span><span class="p">;</span>             <span class="cm">/* Name of the journal file */</span>
</span></span><span class="line"><span class="cl">  <span class="n">OsFile</span> <span class="n">fd</span><span class="p">,</span> <span class="n">jfd</span><span class="p">;</span>             <span class="cm">/* File descriptors for database and journal */</span>
</span></span><span class="line"><span class="cl">  <span class="n">OsFile</span> <span class="n">cpfd</span><span class="p">;</span>                <span class="cm">/* File descriptor for the checkpoint journal */</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// page个数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">dbSize</span><span class="p">;</span>                 <span class="cm">/* Number of pages in the file */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">origDbSize</span><span class="p">;</span>             <span class="cm">/* dbSize before the current change */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">ckptSize</span><span class="p">,</span> <span class="n">ckptJSize</span><span class="p">;</span>    <span class="cm">/* Size of database and journal at ckpt_begin() */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">nExtra</span><span class="p">;</span>                 <span class="cm">/* Add this many bytes to each in-memory page */</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 用于做一些B树的清理工作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">xDestructor</span><span class="p">)(</span><span class="kt">void</span><span class="o">*</span><span class="p">);</span> <span class="cm">/* Call this routine when freeing pages */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">nPage</span><span class="p">;</span>                  <span class="cm">/* Total number of in-memory pages */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">nRef</span><span class="p">;</span>                   <span class="cm">/* Number of in-memory pages with PgHdr.nRef&gt;0 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">mxPage</span><span class="p">;</span>                 <span class="cm">/* Maximum number of pages to hold in cache */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">nHit</span><span class="p">,</span> <span class="n">nMiss</span><span class="p">,</span> <span class="n">nOvfl</span><span class="p">;</span>     <span class="cm">/* Cache hits, missing, and LRU overflows */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">journalOpen</span><span class="p">;</span>             <span class="cm">/* True if journal file descriptors is valid */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">ckptOpen</span><span class="p">;</span>                <span class="cm">/* True if the checkpoint journal is open */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">ckptInUse</span><span class="p">;</span>               <span class="cm">/* True we are in a checkpoint */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">noSync</span><span class="p">;</span>                  <span class="cm">/* Do not sync the journal if true */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">state</span><span class="p">;</span>                   <span class="cm">/* SQLITE_UNLOCK, _READLOCK or _WRITELOCK */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">errMask</span><span class="p">;</span>                 <span class="cm">/* One of several kinds of errors */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">tempFile</span><span class="p">;</span>                <span class="cm">/* zFilename is a temporary file */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">readOnly</span><span class="p">;</span>                <span class="cm">/* True for a read-only database */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">needSync</span><span class="p">;</span>                <span class="cm">/* True if an fsync() is needed on the journal */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">dirtyFile</span><span class="p">;</span>               <span class="cm">/* True if database file has changed in any way */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="o">*</span><span class="n">aInJournal</span><span class="p">;</span>             <span class="cm">/* One bit for each page in the database file */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="o">*</span><span class="n">aInCkpt</span><span class="p">;</span>                <span class="cm">/* One bit for each page in the database */</span>
</span></span><span class="line"><span class="cl">  <span class="n">PgHdr</span> <span class="o">*</span><span class="n">pFirst</span><span class="p">,</span> <span class="o">*</span><span class="n">pLast</span><span class="p">;</span>      <span class="cm">/* List of free pages */</span>
</span></span><span class="line"><span class="cl">  <span class="n">PgHdr</span> <span class="o">*</span><span class="n">pAll</span><span class="p">;</span>                <span class="cm">/* List of all pages */</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 用于根据页号快速定位到页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">PgHdr</span> <span class="o">*</span><span class="n">aHash</span><span class="p">[</span><span class="n">N_PG_HASH</span><span class="p">];</span>    <span class="cm">/* Hash table to map page number of PgHdr */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Pager表示page cache实现，成员比较多，但都有注释。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">sqlitepager_open</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pager</span> <span class="o">**</span><span class="n">ppPager</span><span class="p">,</span>         <span class="cm">/* Return the Pager structure here */</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">zFilename</span><span class="p">,</span>   <span class="cm">/* Name of the database file to open */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">mxPage</span><span class="p">,</span>              <span class="cm">/* Max number of in-memory cache pages */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">nExtra</span>               <span class="cm">/* Extra bytes append to each in-memory page */</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>sqlitepager_open用于创建一个Pager，其实现稍长，但逻辑比较简单，首先打开数据库文件，然后做成员的初始化。这里不介绍其具体实现。参数中的mxPage控制内存中的最大页数，nExtra是上面的page部局中最后额外分配的一段内存。</p>
<p>pager_lookup用于在内存中根据页号来查询页，如果没有缓存，不会从磁盘中加载。主要逻辑就是在哈希表中查找。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">** Find a page in the hash table given its page number.  Return
</span></span></span><span class="line"><span class="cl"><span class="cm">** a pointer to the page or NULL if not found.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="n">PgHdr</span> <span class="o">*</span><span class="nf">pager_lookup</span><span class="p">(</span><span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span><span class="p">,</span> <span class="n">Pgno</span> <span class="n">pgno</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">PgHdr</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aHash</span><span class="p">[</span><span class="n">pgno</span> <span class="o">%</span> <span class="n">N_PG_HASH</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span><span class="p">(</span> <span class="n">p</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">pgno</span><span class="o">!=</span><span class="n">pgno</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">pNextHash</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>pager_get和pager_lookup的不同在于，在没有命中缓存时会从磁盘中加载。在没有超过内存页数限制或者超过了但没有空闲页时，会malloc新的内存；否则从空闲页中重用page，如果所有的空闲页都是脏页，执行刷盘，这样所有的空闲页都不是脏页了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqlitepager_get</span><span class="p">(</span><span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span><span class="p">,</span> <span class="n">Pgno</span> <span class="n">pgno</span><span class="p">,</span> <span class="kt">void</span> <span class="o">**</span><span class="n">ppPage</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">PgHdr</span> <span class="o">*</span><span class="n">pPg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/* Make sure we have not hit any critical errors.
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span> 
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">==</span><span class="mi">0</span> <span class="o">||</span> <span class="n">pgno</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_ERROR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">errMask</span> <span class="o">&amp;</span> <span class="o">~</span><span class="p">(</span><span class="n">PAGER_ERR_FULL</span><span class="p">)</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pager_errcode</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/* If this is the first page accessed, then get a read lock
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** on the database file.
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">nRef</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">sqliteOsReadLock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">)</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="o">*</span><span class="n">ppPage</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">SQLITE_BUSY</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">state</span> <span class="o">=</span> <span class="n">SQLITE_READLOCK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* If a journal file exists, try to play it back.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// nRef == 0，又存在journal文件，说明是崩溃后重启，需要从journal文件恢复
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span> <span class="n">sqliteOsFileExists</span><span class="p">(</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">zJournal</span><span class="p">)</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* Search for page in cache */</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPg</span> <span class="o">=</span> <span class="n">pager_lookup</span><span class="p">(</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pgno</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 没有命中缓存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="n">pPg</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* The requested page is not in the page cache. */</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">h</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">nMiss</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 没有超过内存上限，或者没有空闲页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">nPage</span><span class="o">&lt;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">mxPage</span> <span class="o">||</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">pFirst</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="cm">/* Create a new page */</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 内存分配和我们上面的分析是一致的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">pPg</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">pPg</span><span class="p">)</span> <span class="o">+</span> <span class="n">SQLITE_PAGE_SIZE</span> <span class="o">+</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">nExtra</span>  <span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">memset</span><span class="p">(</span><span class="n">pPg</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">pPg</span><span class="p">)</span> <span class="o">+</span> <span class="n">SQLITE_PAGE_SIZE</span> <span class="o">+</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">nExtra</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pPager</span> <span class="o">=</span> <span class="n">pPager</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pNextAll</span> <span class="o">=</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">pAll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">pAll</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">pAll</span><span class="o">-&gt;</span><span class="n">pPrevAll</span> <span class="o">=</span> <span class="n">pPg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pPrevAll</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">pAll</span> <span class="o">=</span> <span class="n">pPg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">nPage</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="cm">/* Recycle an older page.  First locate the page to be recycled.
</span></span></span><span class="line"><span class="cl"><span class="cm">      ** Try to find one that is not dirty and is near the head of
</span></span></span><span class="line"><span class="cl"><span class="cm">      ** of the free list */</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPg</span> <span class="o">=</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">pFirst</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 当前没有任何引用的页为free页，但仍然可能为脏页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">while</span><span class="p">(</span> <span class="n">pPg</span> <span class="o">&amp;&amp;</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">dirty</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">pPg</span> <span class="o">=</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pNextFree</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// 如果找不到可用的空闲页，则将所有的修改同步磁盘。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// 之所以同步所有的页而非只同步一个页，是因为防止短期后续出现需要同步的情况。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span><span class="p">(</span> <span class="n">pPg</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">syncAllPages</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">          <span class="n">sqlitepager_rollback</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="o">*</span><span class="n">ppPage</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="n">SQLITE_IOERR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">pPg</span> <span class="o">=</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">pFirst</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">assert</span><span class="p">(</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">nRef</span><span class="o">==</span><span class="mi">0</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">assert</span><span class="p">(</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">dirty</span><span class="o">==</span><span class="mi">0</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="cm">/* Unlink the old page from the free list and the hash table
</span></span></span><span class="line"><span class="cl"><span class="cm">      */</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 省略free链，hash链的维护逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">nOvfl</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pgno</span> <span class="o">=</span> <span class="n">pgno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置是否在journal或checkpoint中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aInJournal</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">pgno</span><span class="o">&lt;=</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">origDbSize</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">inJournal</span> <span class="o">=</span> <span class="p">(</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aInJournal</span><span class="p">[</span><span class="n">pgno</span><span class="o">/</span><span class="mi">8</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">pgno</span><span class="o">&amp;</span><span class="mi">7</span><span class="p">)))</span><span class="o">!=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">inJournal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aInCkpt</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">pgno</span><span class="o">&lt;=</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">ckptSize</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">inCkpt</span> <span class="o">=</span> <span class="p">(</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aInCkpt</span><span class="p">[</span><span class="n">pgno</span><span class="o">/</span><span class="mi">8</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">pgno</span><span class="o">&amp;</span><span class="mi">7</span><span class="p">)))</span><span class="o">!=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">inCkpt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">dirty</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">nRef</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">REFINFO</span><span class="p">(</span><span class="n">pPg</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">nRef</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 维护hash链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">h</span> <span class="o">=</span> <span class="n">pager_hash</span><span class="p">(</span><span class="n">pgno</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pNextHash</span> <span class="o">=</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aHash</span><span class="p">[</span><span class="n">h</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aHash</span><span class="p">[</span><span class="n">h</span><span class="p">]</span> <span class="o">=</span> <span class="n">pPg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pNextHash</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">assert</span><span class="p">(</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pNextHash</span><span class="o">-&gt;</span><span class="n">pPrevHash</span><span class="o">==</span><span class="mi">0</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pNextHash</span><span class="o">-&gt;</span><span class="n">pPrevHash</span> <span class="o">=</span> <span class="n">pPg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dbSize</span><span class="o">&lt;</span><span class="mi">0</span> <span class="p">)</span> <span class="n">sqlitepager_pagecount</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对于磁盘上没有的页，置0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dbSize</span><span class="o">&lt;</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">pgno</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">memset</span><span class="p">(</span><span class="n">PGHDR_TO_DATA</span><span class="p">(</span><span class="n">pPg</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SQLITE_PAGE_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">sqliteOsSeek</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="p">(</span><span class="n">pgno</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">SQLITE_PAGE_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 从磁盘读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsRead</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="n">PGHDR_TO_DATA</span><span class="p">(</span><span class="n">pPg</span><span class="p">),</span> <span class="n">SQLITE_PAGE_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">nExtra</span><span class="o">&gt;</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">memset</span><span class="p">(</span><span class="n">PGHDR_TO_EXTRA</span><span class="p">(</span><span class="n">pPg</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">nExtra</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* The requested page is in the page cache. */</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">nHit</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">page_ref</span><span class="p">(</span><span class="n">pPg</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="n">ppPage</span> <span class="o">=</span> <span class="n">PGHDR_TO_DATA</span><span class="p">(</span><span class="n">pPg</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>sqlite对page实现了引用计数，引用计数变为0时加入空闲链，变为非0时从空闲链移除。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">page_ref</span><span class="p">(</span><span class="n">PgHdr</span> <span class="o">*</span><span class="n">pPg</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">nRef</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* The page is currently on the freelist.  Remove it. */</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pPrevFree</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pPrevFree</span><span class="o">-&gt;</span><span class="n">pNextFree</span> <span class="o">=</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pNextFree</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">pFirst</span> <span class="o">=</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pNextFree</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pNextFree</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pNextFree</span><span class="o">-&gt;</span><span class="n">pPrevFree</span> <span class="o">=</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pPrevFree</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">pLast</span> <span class="o">=</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pPrevFree</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">nRef</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">nRef</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">REFINFO</span><span class="p">(</span><span class="n">pPg</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="事务及crash-recovery实现">事务及crash recovery实现</h3>
<p>sqlite 3.7.0实现了wal journal，之前采用的是rollback journaling。所谓rollback journaling，是指在修改page前，先将page的内容备份到journal文件中，然后再修改内存中的page，在事务提交时成功刷新到磁盘后再移除journal文件。如果事务在成功提交之前出现crash，在重启时sqlite会从journal文件恢复page，使数据库恢复事务提交前的状态。</p>
<p>在事务开始时，需要调用<code>sqlitepager_begin</code> ，会创建journal文件和维护journal相关的标记位，记录当前文件的页数用于回滚。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqlitepager_begin</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">pData</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">PgHdr</span> <span class="o">*</span><span class="n">pPg</span> <span class="o">=</span> <span class="n">DATA_TO_PGHDR</span><span class="p">(</span><span class="n">pData</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span> <span class="o">=</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">state</span><span class="o">==</span><span class="n">SQLITE_READLOCK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aInJournal</span><span class="o">==</span><span class="mi">0</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsWriteLock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 用于记录哪些页已经写入journal文件了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aInJournal</span>  <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span>  <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dbSize</span><span class="o">/</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">memset</span><span class="p">(</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aInJournal</span> <span class="p">,</span> <span class="mi">0</span><span class="p">,</span>  <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dbSize</span><span class="o">/</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 打开journal文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsOpenExclusive</span><span class="p">(</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">zJournal</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">jfd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">journalOpen</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">needSync</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dirtyFile</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">state</span> <span class="o">=</span> <span class="n">SQLITE_WRITELOCK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqlitepager_pagecount</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 记录之前的page个数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">origDbSize</span> <span class="o">=</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dbSize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入magic和之前的page页数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsWrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">jfd</span><span class="p">,</span> <span class="n">aJournalMagic</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">aJournalMagic</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">==</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsWrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">jfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dbSize</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Pgno</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">rc</span> <span class="o">=</span> <span class="n">pager_unwritelock</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">==</span><span class="n">SQLITE_OK</span> <span class="p">)</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">SQLITE_FULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在修改page前，需要调用<code>sqlitepager_write</code> ，将page内容备份到journal文件中，并设置dirty标记。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqlitepager_write</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">pData</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">PgHdr</span> <span class="o">*</span><span class="n">pPg</span> <span class="o">=</span> <span class="n">DATA_TO_PGHDR</span><span class="p">(</span><span class="n">pData</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span> <span class="o">=</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/* Check for errors
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">errMask</span> <span class="p">){</span> 
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pager_errcode</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">readOnly</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_PERM</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/* Mark the page as dirty.  If the page has already been written
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** to the journal then we can return right away.
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">dirty</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">inJournal</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">inCkpt</span> <span class="o">||</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">ckptInUse</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dirtyFile</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/* If we get this far, it means that the page needs to be
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** written to the transaction journal or the ckeckpoint journal
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** or both.
</span></span></span><span class="line"><span class="cl"><span class="cm">  **
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** First check to see that the transaction journal exists and
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** create it if it does not.
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">state</span><span class="o">!=</span><span class="n">SQLITE_UNLOCK</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 调用sqlitepager_begin，如果之前已经调用过，相当于空操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_begin</span><span class="p">(</span><span class="n">pData</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dirtyFile</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">state</span><span class="o">==</span><span class="n">SQLITE_WRITELOCK</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">journalOpen</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/* The transaction journal now exists and we have a write lock on the
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** main database file.  Write the current page to the transaction 
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** journal if it is not there already.
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 如果没有备份到journal且在文件原有范围内
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">inJournal</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pgno</span> <span class="o">&lt;=</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">origDbSize</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入页号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsWrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">jfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pgno</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Pgno</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">==</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 写入page内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsWrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">jfd</span><span class="p">,</span> <span class="n">pData</span><span class="p">,</span> <span class="n">SQLITE_PAGE_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aInJournal</span><span class="o">!=</span><span class="mi">0</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置标志位
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aInJournal</span><span class="p">[</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pgno</span><span class="o">/</span><span class="mi">8</span><span class="p">]</span> <span class="o">|=</span> <span class="mi">1</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pgno</span><span class="o">&amp;</span><span class="mi">7</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">needSync</span> <span class="o">=</span> <span class="o">!</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">noSync</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">inJournal</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/* Update the database size and return.
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dbSize</span><span class="o">&lt;</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pgno</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dbSize</span> <span class="o">=</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pgno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在事务回滚时，调用<code>sqlitepager_rollback</code> ，从journal文件恢复备份的page内容。对于journal文件中所有完整的页，将其读出后写入数据库文件的相应页，并更新到存在的page缓存。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqlitepager_rollback</span><span class="p">(</span><span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">errMask</span><span class="o">!=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">errMask</span><span class="o">!=</span><span class="n">PAGER_ERR_FULL</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">state</span><span class="o">&gt;=</span><span class="n">SQLITE_WRITELOCK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">pager_playback</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pager_errcode</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">state</span><span class="o">!=</span><span class="n">SQLITE_WRITELOCK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 回放
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">pager_playback</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">SQLITE_CORRUPT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">errMask</span> <span class="o">|=</span> <span class="n">PAGER_ERR_CORRUPT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 设置页数为-1，后面有需要会自动获取实际的页数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dbSize</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">pager_playback</span><span class="p">(</span><span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">nRec</span><span class="p">;</span>                <span class="cm">/* Number of Records */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>                   <span class="cm">/* Loop counter */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pgno</span> <span class="n">mxPg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>           <span class="cm">/* Size of the original file in pages */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">aMagic</span><span class="p">[</span><span class="k">sizeof</span><span class="p">(</span><span class="n">aJournalMagic</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/* Figure out how many records are in the journal.  Abort early if
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** the journal is empty.
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">journalOpen</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">sqliteOsSeek</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">jfd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsFileSize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">jfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">nRec</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">end_playback</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 校验至少需要存储一个完整的page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">nRec</span> <span class="o">=</span> <span class="p">(</span><span class="n">nRec</span> <span class="o">-</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">aMagic</span><span class="p">)</span><span class="o">+</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Pgno</span><span class="p">)))</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">PageRecord</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">nRec</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">end_playback</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/* Read the beginning of the journal and truncate the
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** database file back to its original size.
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 校验magic
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsRead</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">jfd</span><span class="p">,</span> <span class="n">aMagic</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">aMagic</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="o">||</span> <span class="n">memcmp</span><span class="p">(</span><span class="n">aMagic</span><span class="p">,</span><span class="n">aJournalMagic</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">aMagic</span><span class="p">))</span><span class="o">!=</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">SQLITE_PROTOCOL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">end_playback</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 读取最大页数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsRead</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">jfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mxPg</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mxPg</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">end_playback</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 丢弃最后不完整的页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsTruncate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="n">mxPg</span><span class="o">*</span><span class="n">SQLITE_PAGE_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">end_playback</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 恢复页数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dbSize</span> <span class="o">=</span> <span class="n">mxPg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="cm">/* Copy original pages out of the journal and back into the database file.
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">nRec</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">pager_playback_one_page</span><span class="p">(</span><span class="n">pPager</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">jfd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">end_playback</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">pager_unwritelock</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">errMask</span> <span class="o">|=</span> <span class="n">PAGER_ERR_CORRUPT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">SQLITE_CORRUPT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">pager_unwritelock</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">pager_playback_one_page</span><span class="p">(</span><span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span><span class="p">,</span> <span class="n">OsFile</span> <span class="o">*</span><span class="n">jfd</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">PgHdr</span> <span class="o">*</span><span class="n">pPg</span><span class="p">;</span>              <span class="cm">/* An existing page in the cache */</span>
</span></span><span class="line"><span class="cl">  <span class="n">PageRecord</span> <span class="n">pgRec</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 读页号和page内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsRead</span><span class="p">(</span><span class="n">jfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pgRec</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">pgRec</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/* Sanity checking on the page */</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pgRec</span><span class="p">.</span><span class="n">pgno</span><span class="o">&gt;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dbSize</span> <span class="o">||</span> <span class="n">pgRec</span><span class="p">.</span><span class="n">pgno</span><span class="o">==</span><span class="mi">0</span> <span class="p">)</span> <span class="k">return</span> <span class="n">SQLITE_CORRUPT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/* Playback the page.  Update the in-memory copy of the page
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** at the same time, if there is one.
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 如果有缓存的话，也更新到缓存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">pPg</span> <span class="o">=</span> <span class="n">pager_lookup</span><span class="p">(</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pgRec</span><span class="p">.</span><span class="n">pgno</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPg</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">memcpy</span><span class="p">(</span><span class="n">PGHDR_TO_DATA</span><span class="p">(</span><span class="n">pPg</span><span class="p">),</span> <span class="n">pgRec</span><span class="p">.</span><span class="n">aData</span><span class="p">,</span> <span class="n">SQLITE_PAGE_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">memset</span><span class="p">(</span><span class="n">PGHDR_TO_EXTRA</span><span class="p">(</span><span class="n">pPg</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">nExtra</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 写入文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsSeek</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="p">(</span><span class="n">pgRec</span><span class="p">.</span><span class="n">pgno</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">SQLITE_PAGE_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">==</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsWrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="n">pgRec</span><span class="p">.</span><span class="n">aData</span><span class="p">,</span> <span class="n">SQLITE_PAGE_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>事务提交时需要调用<code>sqlitepager_commit</code> ，刷盘并释放写锁。看实现会先同步journal文件，然后将内存中的page写入磁盘并同步数据库文件。在释放写锁时会删除journal文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqlitepager_commit</span><span class="p">(</span><span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">PgHdr</span> <span class="o">*</span><span class="n">pPg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">errMask</span><span class="o">==</span><span class="n">PAGER_ERR_FULL</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_rollback</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">==</span><span class="n">SQLITE_OK</span> <span class="p">)</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">SQLITE_FULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">errMask</span><span class="o">!=</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">pager_errcode</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">state</span><span class="o">!=</span><span class="n">SQLITE_WRITELOCK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_ERROR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">journalOpen</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dirtyFile</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 没有修改直接返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="cm">/* Exit early (without doing the time-consuming sqliteOsSync() calls)
</span></span></span><span class="line"><span class="cl"><span class="cm">    ** if there have been no changes to the database file. */</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">pager_unwritelock</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dbSize</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 同步journal文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">needSync</span> <span class="o">&amp;&amp;</span> <span class="n">sqliteOsSync</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">jfd</span><span class="p">)</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">commit_abort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 写所有的脏页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span><span class="p">(</span><span class="n">pPg</span><span class="o">=</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">pAll</span><span class="p">;</span> <span class="n">pPg</span><span class="p">;</span> <span class="n">pPg</span><span class="o">=</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pNextAll</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">dirty</span><span class="o">==</span><span class="mi">0</span> <span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsSeek</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="p">(</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pgno</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">SQLITE_PAGE_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">)</span> <span class="k">goto</span> <span class="n">commit_abort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteOsWrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="n">PGHDR_TO_DATA</span><span class="p">(</span><span class="n">pPg</span><span class="p">),</span> <span class="n">SQLITE_PAGE_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">)</span> <span class="k">goto</span> <span class="n">commit_abort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 同步数据库文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">noSync</span> <span class="o">&amp;&amp;</span> <span class="n">sqliteOsSync</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPager</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">)</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">commit_abort</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 释放写锁时会删除journal文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">pager_unwritelock</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">dbSize</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/* Jump here if anything goes wrong during the commit process.
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl"><span class="nl">commit_abort</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_rollback</span><span class="p">(</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">==</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">SQLITE_FULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>某些情况下脏页有可能整页被丢弃，比如在B树删除时可能page被合并到相邻的页，这时可以调用<code>sqlitepager_dont_write</code> 来减少事务提交时的写盘量，通过去掉脏页标记使得事务提交时不需要刷新这个页到磁盘。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">sqlitepager_dont_write</span><span class="p">(</span><span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span><span class="p">,</span> <span class="n">Pgno</span> <span class="n">pgno</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">PgHdr</span> <span class="o">*</span><span class="n">pPg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPg</span> <span class="o">=</span> <span class="n">pager_lookup</span><span class="p">(</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pgno</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPg</span> <span class="o">&amp;&amp;</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">dirty</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">dirty</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>某些情况下，在写数据页时可能之前的数据不需要备份到journal文件中，比如重用之前释放的磁盘页时，这时可以调用<code>sqlitepager_dont_rollback</code> ，其主要逻辑为设置在journal文件中的标志位。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">sqlitepager_dont_rollback</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">pData</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">PgHdr</span> <span class="o">*</span><span class="n">pPg</span> <span class="o">=</span> <span class="n">DATA_TO_PGHDR</span><span class="p">(</span><span class="n">pData</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span> <span class="o">=</span> <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">state</span><span class="o">!=</span><span class="n">SQLITE_WRITELOCK</span> <span class="o">||</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">journalOpen</span><span class="o">==</span><span class="mi">0</span> <span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">inJournal</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pgno</span> <span class="o">&lt;=</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">origDbSize</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aInJournal</span><span class="o">!=</span><span class="mi">0</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aInJournal</span><span class="p">[</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pgno</span><span class="o">/</span><span class="mi">8</span><span class="p">]</span> <span class="o">|=</span> <span class="mi">1</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pgno</span><span class="o">&amp;</span><span class="mi">7</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 只设置标志位，但不写入journal文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">inJournal</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">ckptInUse</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPager</span><span class="o">-&gt;</span><span class="n">aInCkpt</span><span class="p">[</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pgno</span><span class="o">/</span><span class="mi">8</span><span class="p">]</span> <span class="o">|=</span> <span class="mi">1</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">pPg</span><span class="o">-&gt;</span><span class="n">pgno</span><span class="o">&amp;</span><span class="mi">7</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPg</span><span class="o">-&gt;</span><span class="n">inCkpt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="b树实现">B树实现</h2>
<p>这个版本的sqlite的表和索引都使用了B树实现，还没有实现B+树。</p>
<p>一个打开的数据库用下面的结构体表示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Btree</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span><span class="p">;</span>        <span class="cm">/* The page cache */</span>
</span></span><span class="line"><span class="cl">  <span class="n">BtCursor</span> <span class="o">*</span><span class="n">pCursor</span><span class="p">;</span>    <span class="cm">/* A list of all open cursors */</span>
</span></span><span class="line"><span class="cl">  <span class="n">PageOne</span> <span class="o">*</span><span class="n">page1</span><span class="p">;</span>       <span class="cm">/* First page of the database */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">inTrans</span><span class="p">;</span>           <span class="cm">/* True if a transaction is in progress */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">inCkpt</span><span class="p">;</span>            <span class="cm">/* True if there is a checkpoint on the transaction */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">readOnly</span><span class="p">;</span>          <span class="cm">/* True if the underlying file is readonly */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Hash</span> <span class="n">locks</span><span class="p">;</span>           <span class="cm">/* Key: root page number.  Data: lock count */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>数据库文件的第1个page，用<code>PageOne</code> 来表示，其中包含标识数据库文件的magic number，以及空闲页的信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">PageOne</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ** This file contains an SQLite 2.1 database **
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">char</span> <span class="n">zMagic</span><span class="p">[</span><span class="n">MAGIC_SIZE</span><span class="p">];</span> <span class="cm">/* String that identifies the file as a database */</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 0xdae37528
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">iMagic</span><span class="p">;</span>              <span class="cm">/* Integer to verify correct byte order */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pgno</span> <span class="n">freeList</span><span class="p">;</span>           <span class="cm">/* First free page in a list of all free pages */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">nFree</span><span class="p">;</span>               <span class="cm">/* Number of pages on the free list */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">aMeta</span><span class="p">[</span><span class="n">SQLITE_N_BTREE_META</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>  <span class="cm">/* User defined integers */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>一个数据库文件中可以包含多个B树，这些B树存储在第2个或者页号更大的page中。</p>
<h3 id="空闲页表">空闲页表</h3>
<p>PageOne.freeList指向第一个存储空闲页信息的页。空闲页信息使用<code>FreelistInfo</code> 存储</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">FreelistInfo</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">nFree</span><span class="p">;</span>  <span class="c1">// 空闲页的个数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">Pgno</span> <span class="n">aFree</span><span class="p">[(</span><span class="n">OVERFLOW_SIZE</span><span class="o">-</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Pgno</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>存储空闲页信息的页使用overflow页的格式存储，使用OverflowPage.iNext指向下一个存储空闲页信息的页，这些空闲页信息构成了一个链表。FreelistInfo存储在OverflowPage.aPayload处。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#define OVERFLOW_SIZE (SQLITE_PAGE_SIZE-sizeof(Pgno))
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">OverflowPage</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pgno</span> <span class="n">iNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">aPayload</span><span class="p">[</span><span class="n">OVERFLOW_SIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>添加一个页到空闲页表的实现如下。如果存在不满的存储空闲页信息的页，则追加到其中，否则创建一个新的存储空闲页信息的页。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">** Add a page of the database file to the freelist.  Either pgno or
</span></span></span><span class="line"><span class="cl"><span class="cm">** pPage but not both may be 0. 
</span></span></span><span class="line"><span class="cl"><span class="cm">**
</span></span></span><span class="line"><span class="cl"><span class="cm">** sqlitepager_unref() is NOT called for pPage.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">freePage</span><span class="p">(</span><span class="n">Btree</span> <span class="o">*</span><span class="n">pBt</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">pPage</span><span class="p">,</span> <span class="n">Pgno</span> <span class="n">pgno</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">PageOne</span> <span class="o">*</span><span class="n">pPage1</span> <span class="o">=</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">page1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">OverflowPage</span> <span class="o">*</span><span class="n">pOvfl</span> <span class="o">=</span> <span class="p">(</span><span class="n">OverflowPage</span><span class="o">*</span><span class="p">)</span><span class="n">pPage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">needUnref</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">MemPage</span> <span class="o">*</span><span class="n">pMemPage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pgno</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span> <span class="n">pOvfl</span><span class="o">!=</span><span class="mi">0</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pgno</span> <span class="o">=</span> <span class="n">sqlitepager_pagenumber</span><span class="p">(</span><span class="n">pOvfl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">pgno</span><span class="o">&gt;</span><span class="mi">2</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_write</span><span class="p">(</span><span class="n">pPage1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 计数加1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">pPage1</span><span class="o">-&gt;</span><span class="n">nFree</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPage1</span><span class="o">-&gt;</span><span class="n">nFree</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">pPage1</span><span class="o">-&gt;</span><span class="n">freeList</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">OverflowPage</span> <span class="o">*</span><span class="n">pFreeIdx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_get</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pPage1</span><span class="o">-&gt;</span><span class="n">freeList</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pFreeIdx</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">==</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">FreelistInfo</span> <span class="o">*</span><span class="n">pInfo</span> <span class="o">=</span> <span class="p">(</span><span class="n">FreelistInfo</span><span class="o">*</span><span class="p">)</span><span class="n">pFreeIdx</span><span class="o">-&gt;</span><span class="n">aPayload</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 如果有空闲空间，则写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span><span class="p">(</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">nFree</span><span class="o">&lt;</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">aFree</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">aFree</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_write</span><span class="p">(</span><span class="n">pFreeIdx</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">==</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">          <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">aFree</span><span class="p">[</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">nFree</span><span class="p">]</span> <span class="o">=</span> <span class="n">pgno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">nFree</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pFreeIdx</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="c1">// 取消pgno页的脏页标记
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">sqlitepager_dont_write</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pgno</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pFreeIdx</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 运行到这里意味着所有的存储空闲页信息的页都已写满，需要用当前页来存储空闲页信息。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="n">pOvfl</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span> <span class="n">pgno</span><span class="o">&gt;</span><span class="mi">0</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_get</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pgno</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pOvfl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">needUnref</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_write</span><span class="p">(</span><span class="n">pOvfl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">needUnref</span> <span class="p">)</span> <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pOvfl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 维护链表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">pOvfl</span><span class="o">-&gt;</span><span class="n">iNext</span> <span class="o">=</span> <span class="n">pPage1</span><span class="o">-&gt;</span><span class="n">freeList</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPage1</span><span class="o">-&gt;</span><span class="n">freeList</span> <span class="o">=</span> <span class="n">pgno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// memset也保证了FreelistInfo.nFree == 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">memset</span><span class="p">(</span><span class="n">pOvfl</span><span class="o">-&gt;</span><span class="n">aPayload</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">OVERFLOW_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pMemPage</span> <span class="o">=</span> <span class="p">(</span><span class="n">MemPage</span><span class="o">*</span><span class="p">)</span><span class="n">pPage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pMemPage</span><span class="o">-&gt;</span><span class="n">isInit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pMemPage</span><span class="o">-&gt;</span><span class="n">pParent</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pMemPage</span><span class="o">-&gt;</span><span class="n">pParent</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pMemPage</span><span class="o">-&gt;</span><span class="n">pParent</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">needUnref</span> <span class="p">)</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pOvfl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>从空闲页表分配一个页的实现如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">allocatePage</span><span class="p">(</span><span class="n">Btree</span> <span class="o">*</span><span class="n">pBt</span><span class="p">,</span> <span class="n">MemPage</span> <span class="o">**</span><span class="n">ppPage</span><span class="p">,</span> <span class="n">Pgno</span> <span class="o">*</span><span class="n">pPgno</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">PageOne</span> <span class="o">*</span><span class="n">pPage1</span> <span class="o">=</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">page1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 如果有空闲页，从空闲页分配；否则从磁盘加载，分配一个新页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="n">pPage1</span><span class="o">-&gt;</span><span class="n">freeList</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">OverflowPage</span> <span class="o">*</span><span class="n">pOvfl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">FreelistInfo</span> <span class="o">*</span><span class="n">pInfo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_write</span><span class="p">(</span><span class="n">pPage1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPage1</span><span class="o">-&gt;</span><span class="n">nFree</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_get</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pPage1</span><span class="o">-&gt;</span><span class="n">freeList</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pOvfl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_write</span><span class="p">(</span><span class="n">pOvfl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pOvfl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">pInfo</span> <span class="o">=</span> <span class="p">(</span><span class="n">FreelistInfo</span><span class="o">*</span><span class="p">)</span><span class="n">pOvfl</span><span class="o">-&gt;</span><span class="n">aPayload</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">nFree</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 这个空闲页信息页只的空闲页为0，把这个页本身分配出去。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="o">*</span><span class="n">pPgno</span> <span class="o">=</span> <span class="n">pPage1</span><span class="o">-&gt;</span><span class="n">freeList</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPage1</span><span class="o">-&gt;</span><span class="n">freeList</span> <span class="o">=</span> <span class="n">pOvfl</span><span class="o">-&gt;</span><span class="n">iNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="o">*</span><span class="n">ppPage</span> <span class="o">=</span> <span class="p">(</span><span class="n">MemPage</span><span class="o">*</span><span class="p">)</span><span class="n">pOvfl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 从中拿一个页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">nFree</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="o">*</span><span class="n">pPgno</span> <span class="o">=</span> <span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">aFree</span><span class="p">[</span><span class="n">pInfo</span><span class="o">-&gt;</span><span class="n">nFree</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_get</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="o">*</span><span class="n">pPgno</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="n">ppPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pOvfl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">==</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">          <span class="c1">// 设置空闲页的内容不需要回滚
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sqlitepager_dont_rollback</span><span class="p">(</span><span class="o">*</span><span class="n">ppPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_write</span><span class="p">(</span><span class="o">*</span><span class="n">ppPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">pPgno</span> <span class="o">=</span> <span class="n">sqlitepager_pagecount</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从Pager分配一个新页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_get</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="o">*</span><span class="n">pPgno</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="n">ppPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_write</span><span class="p">(</span><span class="o">*</span><span class="n">ppPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="b树节点页实现">B树节点页实现</h3>
<p>节点使用下面的结构体来表示。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">MemPage</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">union</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">aDisk</span><span class="p">[</span><span class="n">SQLITE_PAGE_SIZE</span><span class="p">];</span>  <span class="cm">/* Page data stored on disk */</span>
</span></span><span class="line"><span class="cl">    <span class="n">PageHdr</span> <span class="n">hdr</span><span class="p">;</span>                   <span class="cm">/* Overlay page header */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="n">u</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">isInit</span><span class="p">;</span>                    <span class="cm">/* True if auxiliary data is initialized */</span>
</span></span><span class="line"><span class="cl">  <span class="n">MemPage</span> <span class="o">*</span><span class="n">pParent</span><span class="p">;</span>              <span class="cm">/* The parent of this page.  NULL for root */</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 空闲字节数。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">nFree</span><span class="p">;</span>                     <span class="cm">/* Number of free bytes in u.aDisk[] */</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 存储的cell个数。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">nCell</span><span class="p">;</span>                     <span class="cm">/* Number of entries on this page */</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 是否已经overfull，即超出page size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">isOverfull</span><span class="p">;</span>                <span class="cm">/* Some apCell[] points outside u.aDisk[] */</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 排序的Cell列表。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">Cell</span> <span class="o">*</span><span class="n">apCell</span><span class="p">[</span><span class="n">MX_CELL</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>       <span class="cm">/* All data entires in sorted order */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define EXTRA_SIZE (sizeof(MemPage)-SQLITE_PAGE_SIZE)
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>MemPage.u对应磁盘上的page，之后的数据只在内存中存储。在创建Pager时，会设置Pager.nExtra = EXTRA_SIZE以便在创建内存中的页时分配足够的内存。</p>
<p>每个节点的KV和左子指针，使用Cell结构来表示。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">CellHdr</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pgno</span> <span class="n">leftChild</span><span class="p">;</span> <span class="cm">/* Child page that comes before this cell */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u16</span> <span class="n">nKey</span><span class="p">;</span>       <span class="cm">/* Number of bytes in the key */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u16</span> <span class="n">iNext</span><span class="p">;</span>      <span class="cm">/* Index in MemPage.u.aDisk[] of next cell in sorted order */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">nKeyHi</span><span class="p">;</span>      <span class="cm">/* Upper 8 bits of key size for keys larger than 64K bytes */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">nDataHi</span><span class="p">;</span>     <span class="cm">/* Upper 8 bits of data size when the size is more than 64K */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u16</span> <span class="n">nData</span><span class="p">;</span>      <span class="cm">/* Number of bytes of data */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define NKEY(h)  (h.nKey + h.nKeyHi*65536)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define NDATA(h) (h.nData + h.nDataHi*65536)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Cell的最小大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define MIN_CELL_SIZE  (sizeof(CellHdr)+4)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">// 一个页中最多可以存多少个Cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define MX_CELL ((SQLITE_PAGE_SIZE-sizeof(PageHdr))/MIN_CELL_SIZE)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define USABLE_SPACE  (SQLITE_PAGE_SIZE - sizeof(PageHdr))
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">// 不使用overflow页时Cell的最大字节数，保证一个page至少可以存4个Cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define MX_LOCAL_PAYLOAD ((USABLE_SPACE/4-(sizeof(CellHdr)+sizeof(Pgno)))&amp;~3)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Cell</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">CellHdr</span> <span class="n">h</span><span class="p">;</span>                        <span class="cm">/* The cell header */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">aPayload</span><span class="p">[</span><span class="n">MX_LOCAL_PAYLOAD</span><span class="p">];</span>  <span class="cm">/* Key and data */</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 第一个overflow页的页号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">Pgno</span> <span class="n">ovfl</span><span class="p">;</span>                        <span class="cm">/* The first overflow page */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Cell由CellHdr和payload数据以及第一个overflow页的页号构成。虽然Cell的结构体的长度是固定的，但实际Cell是变长的，通过CellHdr来确定Cell的实际长度。payload至少4个字节，最多MX_LOCAL_PAYLOAD个字节，如果payload需要的空间大于MX_LOCAL_PAYLOAD时会分配overflow页。</p>
<p>CellHdr描述了key和value的长度，都使用了24个bit表示，为了节省空间拆分为高位8bit的nKeyHi和16 bit的nKey（如果不这么拆分的话要占用32个bit），定义了NKEY和NDATA宏来得到K和V的长度。CellHdr.leftChild指向了左子树的页号，其中存储的key都小于这个Cell的key。</p>
<p>分配一个Cell的实现如下，如果空间不足，会分配overflow页来存储。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">fillInCell</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">Btree</span> <span class="o">*</span><span class="n">pBt</span><span class="p">,</span>              <span class="cm">/* The whole Btree.  Needed to allocate pages */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Cell</span> <span class="o">*</span><span class="n">pCell</span><span class="p">,</span>             <span class="cm">/* Populate this Cell structure */</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">pKey</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nKey</span><span class="p">,</span>    <span class="cm">/* The key */</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">pData</span><span class="p">,</span><span class="kt">int</span> <span class="n">nData</span>    <span class="cm">/* The data */</span>
</span></span><span class="line"><span class="cl"><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">OverflowPage</span> <span class="o">*</span><span class="n">pOvfl</span><span class="p">,</span> <span class="o">*</span><span class="n">pPrior</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pgno</span> <span class="o">*</span><span class="n">pNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">spaceLeft</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">nPayload</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pPayload</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">pSpace</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">pCell</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 设置size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">pCell</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">nKey</span> <span class="o">=</span> <span class="n">nKey</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCell</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">nKeyHi</span> <span class="o">=</span> <span class="n">nKey</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCell</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">nData</span> <span class="o">=</span> <span class="n">nData</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCell</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">nDataHi</span> <span class="o">=</span> <span class="n">nData</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCell</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">iNext</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">pNext</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pCell</span><span class="o">-&gt;</span><span class="n">ovfl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pSpace</span> <span class="o">=</span> <span class="n">pCell</span><span class="o">-&gt;</span><span class="n">aPayload</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">spaceLeft</span> <span class="o">=</span> <span class="n">MX_LOCAL_PAYLOAD</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPayload</span> <span class="o">=</span> <span class="n">pKey</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pKey</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">nPayload</span> <span class="o">=</span> <span class="n">nKey</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPrior</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span><span class="p">(</span> <span class="n">nPayload</span><span class="o">&gt;</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">spaceLeft</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 分配一个overflow页，页号设置到pCell-&gt;ovfl或者pOvfl-&gt;iNext中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">rc</span> <span class="o">=</span> <span class="n">allocatePage</span><span class="p">(</span><span class="n">pBt</span><span class="p">,</span> <span class="p">(</span><span class="n">MemPage</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pOvfl</span><span class="p">,</span> <span class="n">pNext</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="o">*</span><span class="n">pNext</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">pPrior</span> <span class="p">)</span> <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pPrior</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">clearCell</span><span class="p">(</span><span class="n">pBt</span><span class="p">,</span> <span class="n">pCell</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPrior</span> <span class="o">=</span> <span class="n">pOvfl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">spaceLeft</span> <span class="o">=</span> <span class="n">OVERFLOW_SIZE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">pSpace</span> <span class="o">=</span> <span class="n">pOvfl</span><span class="o">-&gt;</span><span class="n">aPayload</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">pNext</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pOvfl</span><span class="o">-&gt;</span><span class="n">iNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">n</span> <span class="o">=</span> <span class="n">nPayload</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">n</span><span class="o">&gt;</span><span class="n">spaceLeft</span> <span class="p">)</span> <span class="n">n</span> <span class="o">=</span> <span class="n">spaceLeft</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 挎包
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">memcpy</span><span class="p">(</span><span class="n">pSpace</span><span class="p">,</span> <span class="n">pPayload</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">nPayload</span> <span class="o">-=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">nPayload</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">pData</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// key写完后接着写value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">pPayload</span> <span class="o">=</span> <span class="n">pData</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">nPayload</span> <span class="o">=</span> <span class="n">nData</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">pData</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPayload</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">spaceLeft</span> <span class="o">-=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pSpace</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="n">pNext</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPrior</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pPrior</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>释放Cell涉及到两个函数。<code>clearCell</code> 负责释放Cell分配的overflow页。<code>dropCell</code> 负责将Cell非溢出的内存加入空闲链表中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">clearCell</span><span class="p">(</span><span class="n">Btree</span> <span class="o">*</span><span class="n">pBt</span><span class="p">,</span> <span class="n">Cell</span> <span class="o">*</span><span class="n">pCell</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span> <span class="o">=</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">OverflowPage</span> <span class="o">*</span><span class="n">pOvfl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pgno</span> <span class="n">ovfl</span><span class="p">,</span> <span class="n">nextOvfl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">NKEY</span><span class="p">(</span><span class="n">pCell</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">)</span> <span class="o">+</span> <span class="n">NDATA</span><span class="p">(</span><span class="n">pCell</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">MX_LOCAL_PAYLOAD</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">ovfl</span> <span class="o">=</span> <span class="n">pCell</span><span class="o">-&gt;</span><span class="n">ovfl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCell</span><span class="o">-&gt;</span><span class="n">ovfl</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span><span class="p">(</span> <span class="n">ovfl</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 释放overflow页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_get</span><span class="p">(</span><span class="n">pPager</span><span class="p">,</span> <span class="n">ovfl</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pOvfl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">nextOvfl</span> <span class="o">=</span> <span class="n">pOvfl</span><span class="o">-&gt;</span><span class="n">iNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">freePage</span><span class="p">(</span><span class="n">pBt</span><span class="p">,</span> <span class="n">pOvfl</span><span class="p">,</span> <span class="n">ovfl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pOvfl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ovfl</span> <span class="o">=</span> <span class="n">nextOvfl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">dropCell</span><span class="p">(</span><span class="n">MemPage</span> <span class="o">*</span><span class="n">pPage</span><span class="p">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">sz</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">idx</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">idx</span><span class="o">&lt;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">sz</span><span class="o">==</span><span class="n">cellSize</span><span class="p">(</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">sqlitepager_iswriteable</span><span class="p">(</span><span class="n">pPage</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 释放Cell本身占的空间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">freeSpace</span><span class="p">(</span><span class="n">pPage</span><span class="p">,</span> <span class="n">Addr</span><span class="p">(</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="o">-</span> <span class="n">Addr</span><span class="p">(</span><span class="n">pPage</span><span class="p">),</span> <span class="n">sz</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">idx</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">/</span>
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">Most</span> <span class="n">of</span> <span class="n">the</span> <span class="n">effort</span> <span class="n">here</span> <span class="n">is</span> <span class="n">involved</span> <span class="n">in</span> <span class="n">coalesing</span> <span class="n">adjacent</span>
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="n">free</span> <span class="n">blocks</span> <span class="n">into</span> <span class="n">a</span> <span class="n">single</span> <span class="n">big</span> <span class="n">free</span> <span class="n">block</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="err">*/</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="n">freeSpace</span><span class="p">(</span><span class="n">MemPage</span> <span class="o">*</span><span class="n">pPage</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">start</span> <span class="o">+</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">u16</span> <span class="o">*</span><span class="n">pIdx</span><span class="p">,</span> <span class="n">idx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">FreeBlk</span> <span class="o">*</span><span class="n">pFBlk</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">FreeBlk</span> <span class="o">*</span><span class="n">pNew</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">FreeBlk</span> <span class="o">*</span><span class="n">pNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">sqlitepager_iswriteable</span><span class="p">(</span><span class="n">pPage</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">size</span> <span class="o">==</span> <span class="n">ROUNDUP</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">start</span> <span class="o">==</span> <span class="n">ROUNDUP</span><span class="p">(</span><span class="n">start</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pIdx</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">firstFree</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">idx</span> <span class="o">=</span> <span class="o">*</span><span class="n">pIdx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span><span class="p">(</span> <span class="n">idx</span><span class="o">!=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">idx</span><span class="o">&lt;</span><span class="n">start</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">pFBlk</span> <span class="o">=</span> <span class="p">(</span><span class="n">FreeBlk</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">aDisk</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">idx</span> <span class="o">+</span> <span class="n">pFBlk</span><span class="o">-&gt;</span><span class="n">iSize</span> <span class="o">==</span> <span class="n">start</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">pFBlk</span><span class="o">-&gt;</span><span class="n">iSize</span> <span class="o">+=</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">idx</span> <span class="o">+</span> <span class="n">pFBlk</span><span class="o">-&gt;</span><span class="n">iSize</span> <span class="o">==</span> <span class="n">pFBlk</span><span class="o">-&gt;</span><span class="n">iNext</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果可以和下一个区间合并
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pNext</span> <span class="o">=</span> <span class="p">(</span><span class="n">FreeBlk</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">aDisk</span><span class="p">[</span><span class="n">pFBlk</span><span class="o">-&gt;</span><span class="n">iNext</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">pFBlk</span><span class="o">-&gt;</span><span class="n">iSize</span> <span class="o">+=</span> <span class="n">pNext</span><span class="o">-&gt;</span><span class="n">iSize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">pFBlk</span><span class="o">-&gt;</span><span class="n">iNext</span> <span class="o">=</span> <span class="n">pNext</span><span class="o">-&gt;</span><span class="n">iNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nFree</span> <span class="o">+=</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">pIdx</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pFBlk</span><span class="o">-&gt;</span><span class="n">iNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">idx</span> <span class="o">=</span> <span class="o">*</span><span class="n">pIdx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">pNew</span> <span class="o">=</span> <span class="p">(</span><span class="n">FreeBlk</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">aDisk</span><span class="p">[</span><span class="n">start</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 检查是否可以和后面的区间合并
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="n">idx</span> <span class="o">!=</span> <span class="n">end</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">pNew</span><span class="o">-&gt;</span><span class="n">iSize</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pNew</span><span class="o">-&gt;</span><span class="n">iNext</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">pNext</span> <span class="o">=</span> <span class="p">(</span><span class="n">FreeBlk</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">aDisk</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">pNew</span><span class="o">-&gt;</span><span class="n">iSize</span> <span class="o">=</span> <span class="n">size</span> <span class="o">+</span> <span class="n">pNext</span><span class="o">-&gt;</span><span class="n">iSize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pNew</span><span class="o">-&gt;</span><span class="n">iNext</span> <span class="o">=</span> <span class="n">pNext</span><span class="o">-&gt;</span><span class="n">iNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="n">pIdx</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nFree</span> <span class="o">+=</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>一个MemPage逻辑上来说由多个排序的Cell组成，但在物理存储时即不保证有序也不保证连续。由于插入数据时不一定有序，因此要保证物理存储有序需要移动数据而导致额外的开销，因此实现时并不会移动数据，但通过CellHdr.iNext构成了一个有序的Cell链表。由于删除数据时也不会移动数据，因此Cell之间可能有空洞，这些空洞使用FreeBlk表示，并通过FreeBlk.iNext构成了一个链表。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">FreeBlk</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">u16</span> <span class="n">iSize</span><span class="p">;</span>      <span class="cm">/* Number of bytes in this block of free space */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u16</span> <span class="n">iNext</span><span class="p">;</span>      <span class="cm">/* Index in MemPage.u.aDisk[] of the next free block */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>从磁盘加载page后，通过initPage维护内存中的辅助信息，将所有Cell加载到内存中的apCell数组，计算总的空闲字节数信息。initPage后，可以通过apCell随机访问一个Cell，而不需要通过Cell链表顺序访问。在插入时，新的Cell可能超出page size，在短暂的时间内apCell会有指向aDisk外的Cell。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">initPage</span><span class="p">(</span><span class="n">MemPage</span> <span class="o">*</span><span class="n">pPage</span><span class="p">,</span> <span class="n">Pgno</span> <span class="n">pgnoThis</span><span class="p">,</span> <span class="n">MemPage</span> <span class="o">*</span><span class="n">pParent</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">idx</span><span class="p">;</span>           <span class="cm">/* An index into pPage-&gt;u.aDisk[] */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Cell</span> <span class="o">*</span><span class="n">pCell</span><span class="p">;</span>       <span class="cm">/* A pointer to a Cell in pPage-&gt;u.aDisk[] */</span>
</span></span><span class="line"><span class="cl">  <span class="n">FreeBlk</span> <span class="o">*</span><span class="n">pFBlk</span><span class="p">;</span>    <span class="cm">/* A pointer to a free block in pPage-&gt;u.aDisk[] */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">sz</span><span class="p">;</span>            <span class="cm">/* The size of a Cell in bytes */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">freeSpace</span><span class="p">;</span>     <span class="cm">/* Amount of free space on the page */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">pParent</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">pParent</span><span class="o">==</span><span class="n">pParent</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pParent</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">pParent</span> <span class="o">=</span> <span class="n">pParent</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 增加引用计数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">sqlitepager_ref</span><span class="p">(</span><span class="n">pParent</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">isInit</span> <span class="p">)</span> <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">isInit</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">freeSpace</span> <span class="o">=</span> <span class="n">USABLE_SPACE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">idx</span> <span class="o">=</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">firstCell</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span><span class="p">(</span> <span class="n">idx</span><span class="o">!=</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 剩余空间存不下一个Cell  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span> <span class="n">idx</span><span class="o">&gt;</span><span class="n">SQLITE_PAGE_SIZE</span><span class="o">-</span><span class="n">MIN_CELL_SIZE</span> <span class="p">)</span> <span class="k">goto</span> <span class="n">page_format_error</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 起始地址在PageHdr内
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span> <span class="n">idx</span><span class="o">&lt;</span><span class="k">sizeof</span><span class="p">(</span><span class="n">PageHdr</span><span class="p">)</span> <span class="p">)</span> <span class="k">goto</span> <span class="n">page_format_error</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 没有4字节对齐
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span> <span class="n">idx</span><span class="o">!=</span><span class="n">ROUNDUP</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span> <span class="p">)</span> <span class="k">goto</span> <span class="n">page_format_error</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pCell</span> <span class="o">=</span> <span class="p">(</span><span class="n">Cell</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">aDisk</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">sz</span> <span class="o">=</span> <span class="n">cellSize</span><span class="p">(</span><span class="n">pCell</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 超过了page size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span> <span class="n">idx</span><span class="o">+</span><span class="n">sz</span> <span class="o">&gt;</span> <span class="n">SQLITE_PAGE_SIZE</span> <span class="p">)</span> <span class="k">goto</span> <span class="n">page_format_error</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">freeSpace</span> <span class="o">-=</span> <span class="n">sz</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 加载到cell数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">pCell</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">idx</span> <span class="o">=</span> <span class="n">pCell</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">iNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nFree</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">idx</span> <span class="o">=</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">firstFree</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span><span class="p">(</span> <span class="n">idx</span><span class="o">!=</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">idx</span><span class="o">&gt;</span><span class="n">SQLITE_PAGE_SIZE</span><span class="o">-</span><span class="k">sizeof</span><span class="p">(</span><span class="n">FreeBlk</span><span class="p">)</span> <span class="p">)</span> <span class="k">goto</span> <span class="n">page_format_error</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">idx</span><span class="o">&lt;</span><span class="k">sizeof</span><span class="p">(</span><span class="n">PageHdr</span><span class="p">)</span> <span class="p">)</span> <span class="k">goto</span> <span class="n">page_format_error</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pFBlk</span> <span class="o">=</span> <span class="p">(</span><span class="n">FreeBlk</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">aDisk</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 维护空闲byte数统计信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nFree</span> <span class="o">+=</span> <span class="n">pFBlk</span><span class="o">-&gt;</span><span class="n">iSize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pFBlk</span><span class="o">-&gt;</span><span class="n">iNext</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">pFBlk</span><span class="o">-&gt;</span><span class="n">iNext</span> <span class="o">&lt;=</span> <span class="n">idx</span> <span class="p">)</span> <span class="k">goto</span> <span class="n">page_format_error</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">idx</span> <span class="o">=</span> <span class="n">pFBlk</span><span class="o">-&gt;</span><span class="n">iNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nFree</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* As a special case, an uninitialized root page appears to be
</span></span></span><span class="line"><span class="cl"><span class="cm">    ** an empty database */</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nFree</span><span class="o">!=</span><span class="n">freeSpace</span> <span class="p">)</span> <span class="k">goto</span> <span class="n">page_format_error</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">page_format_error</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">SQLITE_CORRUPT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="b树操作">B树操作</h2>
<h3 id="创建b树">创建B树</h3>
<p>先看创建数据库的实现。如果已经至少有2个页，则直接返回。否则创建2个页，并初始化第1个页为PageOne，对第2个页调用zeroPage来重置为一个包含0项的B树节点页。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">newDatabase</span><span class="p">(</span><span class="n">Btree</span> <span class="o">*</span><span class="n">pBt</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">MemPage</span> <span class="o">*</span><span class="n">pRoot</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">PageOne</span> <span class="o">*</span><span class="n">pP1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">sqlitepager_pagecount</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span> <span class="p">)</span> <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pP1</span> <span class="o">=</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">page1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_write</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">page1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_get</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pRoot</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_write</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">strcpy</span><span class="p">(</span><span class="n">pP1</span><span class="o">-&gt;</span><span class="n">zMagic</span><span class="p">,</span> <span class="n">zMagicHeader</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pP1</span><span class="o">-&gt;</span><span class="n">iMagic</span> <span class="o">=</span> <span class="n">MAGIC</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">zeroPage</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>sqliteBtreeCreateTable</code> 要做的事情很简单，分配一个页作为根页，返回页号。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqliteBtreeCreateTable</span><span class="p">(</span><span class="n">Btree</span> <span class="o">*</span><span class="n">pBt</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">piTable</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">MemPage</span> <span class="o">*</span><span class="n">pRoot</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pgno</span> <span class="n">pgnoRoot</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">inTrans</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_ERROR</span><span class="p">;</span>  <span class="cm">/* Must start a transaction first */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">readOnly</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_READONLY</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 如果有空闲的，用空闲的，否则分配一个新page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">allocatePage</span><span class="p">(</span><span class="n">pBt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pRoot</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pgnoRoot</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">sqlitepager_iswriteable</span><span class="p">(</span><span class="n">pRoot</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">zeroPage</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 不在使用中就调unref
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 返回根所在的页号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">*</span><span class="n">piTable</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">pgnoRoot</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="cursor操作">Cursor操作</h3>
<p>Cursor用于B树的遍历或者定位，其定义如下。mPage指向当前的page，idx指向当前的项。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">** A cursor is a pointer to a particular entry in the BTree.
</span></span></span><span class="line"><span class="cl"><span class="cm">** The entry is identified by its MemPage and the index in
</span></span></span><span class="line"><span class="cl"><span class="cm">** MemPage.apCell[] of the entry.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">BtCursor</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Btree</span> <span class="o">*</span><span class="n">pBt</span><span class="p">;</span>               <span class="cm">/* The Btree to which this cursor belongs */</span>
</span></span><span class="line"><span class="cl">  <span class="n">BtCursor</span> <span class="o">*</span><span class="n">pNext</span><span class="p">,</span> <span class="o">*</span><span class="n">pPrev</span><span class="p">;</span>  <span class="cm">/* Forms a linked list of all cursors */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pgno</span> <span class="n">pgnoRoot</span><span class="p">;</span>            <span class="cm">/* The root page of this tree */</span>
</span></span><span class="line"><span class="cl">  <span class="n">MemPage</span> <span class="o">*</span><span class="n">pPage</span><span class="p">;</span>           <span class="cm">/* Page that contains the entry */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">idx</span><span class="p">;</span>                  <span class="cm">/* Index of the entry in pPage-&gt;apCell[] */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">wrFlag</span><span class="p">;</span>                <span class="cm">/* True if writable */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">bSkipNext</span><span class="p">;</span>             <span class="cm">/* sqliteBtreeNext() is no-op if true */</span>
</span></span><span class="line"><span class="cl">  <span class="n">u8</span> <span class="n">iMatch</span><span class="p">;</span>                <span class="cm">/* compare result from last sqliteBtreeMoveto() */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>调用<code>sqliteBtreeCursor</code> 创建一个Cursor</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqliteBtreeCursor</span><span class="p">(</span><span class="n">Btree</span> <span class="o">*</span><span class="n">pBt</span><span class="p">,</span> <span class="kt">int</span> <span class="n">iTable</span><span class="p">,</span> <span class="kt">int</span> <span class="n">wrFlag</span><span class="p">,</span> <span class="n">BtCursor</span> <span class="o">**</span><span class="n">ppCur</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">BtCursor</span> <span class="o">*</span><span class="n">pCur</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">ptr</span> <span class="n">nLock</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">page1</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 打开PageOne，并获取一个数据库读锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rc</span> <span class="o">=</span> <span class="n">lockBtree</span><span class="p">(</span><span class="n">pBt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="o">*</span><span class="n">ppCur</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">wrFlag</span> <span class="o">&amp;&amp;</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">readOnly</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">ppCur</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_READONLY</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCur</span> <span class="o">=</span> <span class="n">sqliteMalloc</span><span class="p">(</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">pCur</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">SQLITE_NOMEM</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">create_cursor_exception</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 设置root页号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pgnoRoot</span> <span class="o">=</span> <span class="p">(</span><span class="n">Pgno</span><span class="p">)</span><span class="n">iTable</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 获取当前页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_get</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pgnoRoot</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">create_cursor_exception</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 初始化page在内存中的额外辅助信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">initPage</span><span class="p">(</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="p">,</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pgnoRoot</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">create_cursor_exception</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">nLock</span> <span class="o">=</span> <span class="p">(</span><span class="n">ptr</span><span class="p">)</span><span class="n">sqliteHashFind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">locks</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">iTable</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// nLock &lt; 0说明已被别人上了写锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// nLock &gt; 0 说明已被别人上了读锁，如果wrFlag为true，则获取写锁失败
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="n">nLock</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="p">(</span><span class="n">nLock</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">wrFlag</span><span class="p">)</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">SQLITE_LOCKED</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">create_cursor_exception</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 写锁为负，读锁为正，0即NULL表示没有锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">nLock</span> <span class="o">=</span> <span class="n">wrFlag</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="n">nLock</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">sqliteHashInsert</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">locks</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">iTable</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">nLock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pBt</span> <span class="o">=</span> <span class="n">pBt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">wrFlag</span> <span class="o">=</span> <span class="n">wrFlag</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 维护cursor链表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pNext</span> <span class="o">=</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pCursor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pNext</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pNext</span><span class="o">-&gt;</span><span class="n">pPrev</span> <span class="o">=</span> <span class="n">pCur</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPrev</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pCursor</span> <span class="o">=</span> <span class="n">pCur</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="n">ppCur</span> <span class="o">=</span> <span class="n">pCur</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">create_cursor_exception</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="n">ppCur</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span> <span class="p">)</span> <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqliteFree</span><span class="p">(</span><span class="n">pCur</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">unlockBtreeIfUnused</span><span class="p">(</span><span class="n">pBt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个版本的Cursor支持的操作为First, Last, Next, Moveto，分别指向第一个、最后一个、下一个、指定的key。</p>
<p><code>sqliteBtreeFirst</code> 先将Cursor指向root，然后沿着左子指针不断移动。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqliteBtreeFirst</span><span class="p">(</span><span class="n">BtCursor</span> <span class="o">*</span><span class="n">pCur</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">pRes</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">==</span><span class="mi">0</span> <span class="p">)</span> <span class="k">return</span> <span class="n">SQLITE_ABORT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">moveToRoot</span><span class="p">(</span><span class="n">pCur</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">pRes</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="n">pRes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">moveToLeftmost</span><span class="p">(</span><span class="n">pCur</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">bSkipNext</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">moveToRoot</span><span class="p">(</span><span class="n">BtCursor</span> <span class="o">*</span><span class="n">pCur</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">MemPage</span> <span class="o">*</span><span class="n">pNew</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 载入page，并修改cursor指向的page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_get</span><span class="p">(</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pgnoRoot</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pNew</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">initPage</span><span class="p">(</span><span class="n">pNew</span><span class="p">,</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pgnoRoot</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span> <span class="o">=</span> <span class="n">pNew</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 重置idx为0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">moveToLeftmost</span><span class="p">(</span><span class="n">BtCursor</span> <span class="o">*</span><span class="n">pCur</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pgno</span> <span class="n">pgno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 沿着最左的child指针不断移动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">while</span><span class="p">(</span> <span class="p">(</span><span class="n">pgno</span> <span class="o">=</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span><span class="p">)</span><span class="o">!=</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">moveToChild</span><span class="p">(</span><span class="n">pCur</span><span class="p">,</span> <span class="n">pgno</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">moveToChild</span><span class="p">(</span><span class="n">BtCursor</span> <span class="o">*</span><span class="n">pCur</span><span class="p">,</span> <span class="kt">int</span> <span class="n">newPgno</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">MemPage</span> <span class="o">*</span><span class="n">pNewPage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 载入page，并修改cursor指向的page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_get</span><span class="p">(</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="n">newPgno</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pNewPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">initPage</span><span class="p">(</span><span class="n">pNewPage</span><span class="p">,</span> <span class="n">newPgno</span><span class="p">,</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span> <span class="o">=</span> <span class="n">pNewPage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>sqliteBtreeNext</code> 移动到下一个KV。如果这一层还没遍历完，先将idx指向下一个Cell，然后移动到该Cell下层的最左节点。否则向上层回溯，由于采用的是B树实现，回溯到上层的有效节点就可以返回了，因为中间节点也存储着数据。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqliteBtreeNext</span><span class="p">(</span><span class="n">BtCursor</span> <span class="o">*</span><span class="n">pCur</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">pRes</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pRes</span> <span class="p">)</span> <span class="o">*</span><span class="n">pRes</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_ABORT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 之前的操作已经指向了下一个元素，直接返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">bSkipNext</span> <span class="o">&amp;&amp;</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="o">&lt;</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">bSkipNext</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pRes</span> <span class="p">)</span> <span class="o">*</span><span class="n">pRes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// idx + 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 已经遍历完这个page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="o">&gt;=</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果存在右子树
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 移动到右子树
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">rc</span> <span class="o">=</span> <span class="n">moveToChild</span><span class="p">(</span><span class="n">pCur</span><span class="p">,</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 移动到右子树下的最左节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">rc</span> <span class="o">=</span> <span class="n">moveToLeftmost</span><span class="p">(</span><span class="n">pCur</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">pRes</span> <span class="p">)</span> <span class="o">*</span><span class="n">pRes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">do</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// pParent == 0 说明整个树已遍历完
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">pParent</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span> <span class="n">pRes</span> <span class="p">)</span> <span class="o">*</span><span class="n">pRes</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 移动到parent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">rc</span> <span class="o">=</span> <span class="n">moveToParent</span><span class="p">(</span><span class="n">pCur</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">while</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="o">&gt;=</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// B树的中间节点也存储数据，因此这里返回了。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span> <span class="n">pRes</span> <span class="p">)</span> <span class="o">*</span><span class="n">pRes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 移动到该节点下的最左节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">moveToLeftmost</span><span class="p">(</span><span class="n">pCur</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pRes</span> <span class="p">)</span> <span class="o">*</span><span class="n">pRes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">moveToParent</span><span class="p">(</span><span class="n">BtCursor</span> <span class="o">*</span><span class="n">pCur</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pgno</span> <span class="n">oldPgno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">MemPage</span> <span class="o">*</span><span class="n">pParent</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pParent</span> <span class="o">=</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">pParent</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pParent</span><span class="o">==</span><span class="mi">0</span> <span class="p">)</span> <span class="k">return</span> <span class="n">SQLITE_INTERNAL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">oldPgno</span> <span class="o">=</span> <span class="n">sqlitepager_pagenumber</span><span class="p">(</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">sqlitepager_ref</span><span class="p">(</span><span class="n">pParent</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span> <span class="o">=</span> <span class="n">pParent</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span> <span class="o">=</span> <span class="n">pParent</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">pParent</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pParent</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span><span class="o">==</span><span class="n">oldPgno</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 设置idx为包含原child的Cell的下标
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>sqliteBtreeMoveto</code> 将Cursor移动到指定key附近的KV。在key不存在时，有可能指向在该key之前或之后的key，使用*pRes的值来表示不同的结果（&lt;0 之前的key，=0 恰好指向，&gt;0 之后的key）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqliteBtreeMoveto</span><span class="p">(</span><span class="n">BtCursor</span> <span class="o">*</span><span class="n">pCur</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">pKey</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nKey</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">pRes</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">==</span><span class="mi">0</span> <span class="p">)</span> <span class="k">return</span> <span class="n">SQLITE_ABORT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">bSkipNext</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 先移动到root页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">moveToRoot</span><span class="p">(</span><span class="n">pCur</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(;;){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">lwr</span><span class="p">,</span> <span class="n">upr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Pgno</span> <span class="n">chldPg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">MemPage</span> <span class="o">*</span><span class="n">pPage</span> <span class="o">=</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">lwr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">upr</span> <span class="o">=</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 二分查找
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span><span class="p">(</span> <span class="n">lwr</span><span class="o">&lt;=</span><span class="n">upr</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">lwr</span><span class="o">+</span><span class="n">upr</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 比较当前idx指向的Cell和key的大小关系，必要时会加载overflow页的数据。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteBtreeKeyCompare</span><span class="p">(</span><span class="n">pCur</span><span class="p">,</span> <span class="n">pKey</span><span class="p">,</span> <span class="n">nKey</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">c</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">iMatch</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span> <span class="n">pRes</span> <span class="p">)</span> <span class="o">*</span><span class="n">pRes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">c</span><span class="o">&lt;</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">lwr</span> <span class="o">=</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">upr</span> <span class="o">=</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span> <span class="n">lwr</span><span class="o">==</span><span class="n">upr</span><span class="o">+</span><span class="mi">1</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">lwr</span><span class="o">&gt;=</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">chldPg</span> <span class="o">=</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">chldPg</span> <span class="o">=</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">lwr</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 没有child页了则返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span> <span class="n">chldPg</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">iMatch</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">pRes</span> <span class="p">)</span> <span class="o">*</span><span class="n">pRes</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从该child处继续找
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rc</span> <span class="o">=</span> <span class="n">moveToChild</span><span class="p">(</span><span class="n">pCur</span><span class="p">,</span> <span class="n">chldPg</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* NOT REACHED */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="插入删除">插入删除</h3>
<p>在插入KV时，先将Cursor移动到key附近，然后根据是否存在key做一些不同<code>apCell</code> 数组的维护工作，最后调用rebalance来做树平衡。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">** Insert a new record into the BTree.  The key is given by (pKey,nKey)
</span></span></span><span class="line"><span class="cl"><span class="cm">** and the data is given by (pData,nData).  The cursor is used only to
</span></span></span><span class="line"><span class="cl"><span class="cm">** define what database the record should be inserted into.  The cursor
</span></span></span><span class="line"><span class="cl"><span class="cm">** is left pointing at the new record.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqliteBtreeInsert</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">BtCursor</span> <span class="o">*</span><span class="n">pCur</span><span class="p">,</span>                <span class="cm">/* Insert data into the table of this cursor */</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">pKey</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nKey</span><span class="p">,</span>    <span class="cm">/* The key of the new record */</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">pData</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nData</span>   <span class="cm">/* The data of the new record */</span>
</span></span><span class="line"><span class="cl"><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">Cell</span> <span class="n">newCell</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">loc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">szNew</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">MemPage</span> <span class="o">*</span><span class="n">pPage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Btree</span> <span class="o">*</span><span class="n">pBt</span> <span class="o">=</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pBt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_ABORT</span><span class="p">;</span>  <span class="cm">/* A rollback destroyed this cursor */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">inTrans</span> <span class="o">||</span> <span class="n">nKey</span><span class="o">+</span><span class="n">nData</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_ERROR</span><span class="p">;</span>  <span class="cm">/* Must start a transaction first */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">wrFlag</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_PERM</span><span class="p">;</span>   <span class="cm">/* Cursor not open for writing */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 移动到key附近
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteBtreeMoveto</span><span class="p">(</span><span class="n">pCur</span><span class="p">,</span> <span class="n">pKey</span><span class="p">,</span> <span class="n">nKey</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">loc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPage</span> <span class="o">=</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_write</span><span class="p">(</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 分配一个cell来存放key/value，可能有overflow 页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">fillInCell</span><span class="p">(</span><span class="n">pBt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">newCell</span><span class="p">,</span> <span class="n">pKey</span><span class="p">,</span> <span class="n">nKey</span><span class="p">,</span> <span class="n">pData</span><span class="p">,</span> <span class="n">nData</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">szNew</span> <span class="o">=</span> <span class="n">cellSize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">newCell</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">loc</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 恰好匹配，需要删除之前的Cell。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 调用clearCell释放涉及的overflow页，调用dropCell来从apCell数组中删除。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">newCell</span><span class="p">.</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">clearCell</span><span class="p">(</span><span class="n">pBt</span><span class="p">,</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">dropCell</span><span class="p">(</span><span class="n">pPage</span><span class="p">,</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="p">,</span> <span class="n">cellSize</span><span class="p">(</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="n">loc</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="o">&gt;</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span><span class="o">==</span><span class="mi">0</span> <span class="p">);</span>  <span class="cm">/* Must be a leaf page */</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// idx+1指向下一个位置，和下面的else得到相同的结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// rightChild说明是leaf页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">assert</span><span class="p">(</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span><span class="o">==</span><span class="mi">0</span> <span class="p">);</span>  <span class="cm">/* Must be a leaf page */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 将新的Cell插入，执行完成后有可能超出page size，后面的balance会处理。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">insertCell</span><span class="p">(</span><span class="n">pPage</span><span class="p">,</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">newCell</span><span class="p">,</span> <span class="n">szNew</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">balance</span><span class="p">(</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pBt</span><span class="p">,</span> <span class="n">pPage</span><span class="p">,</span> <span class="n">pCur</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* sqliteBtreePageDump(pCur-&gt;pBt, pCur-&gt;pgnoRoot, 1); */</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* fflush(stdout); */</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">insertCell</span><span class="p">(</span><span class="n">MemPage</span> <span class="o">*</span><span class="n">pPage</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">Cell</span> <span class="o">*</span><span class="n">pCell</span><span class="p">,</span> <span class="kt">int</span> <span class="n">sz</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">idx</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">sz</span><span class="o">==</span><span class="n">cellSize</span><span class="p">(</span><span class="n">pCell</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">sqlitepager_iswriteable</span><span class="p">(</span><span class="n">pPage</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 分配空间不足，idx==0说明没有足够的空间。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">idx</span> <span class="o">=</span> <span class="n">allocateSpace</span><span class="p">(</span><span class="n">pPage</span><span class="p">,</span> <span class="n">sz</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="p">;</span> <span class="n">j</span><span class="o">&gt;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">idx</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 空间不足，标记已overfull
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">isOverfull</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pCell</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">aDisk</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">pCell</span><span class="p">,</span> <span class="n">sz</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">Cell</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">aDisk</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">allocateSpace</span><span class="p">(</span><span class="n">MemPage</span> <span class="o">*</span><span class="n">pPage</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nByte</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">FreeBlk</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">u16</span> <span class="o">*</span><span class="n">pIdx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">sqlitepager_iswriteable</span><span class="p">(</span><span class="n">pPage</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">nByte</span><span class="o">==</span><span class="n">ROUNDUP</span><span class="p">(</span><span class="n">nByte</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 空间不足或者之前已经不足过
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nFree</span><span class="o">&lt;</span><span class="n">nByte</span> <span class="o">||</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">isOverfull</span> <span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pIdx</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">firstFree</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">FreeBlk</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">aDisk</span><span class="p">[</span><span class="o">*</span><span class="n">pIdx</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">iSize</span><span class="o">&lt;</span><span class="n">nByte</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span> <span class="n">cnt</span><span class="o">++</span> <span class="o">&lt;</span> <span class="n">SQLITE_PAGE_SIZE</span><span class="o">/</span><span class="mi">4</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">iNext</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 没有一个足够大的空闲块，需要整理页。将所有的Cell移动到页的开始，最后有一个大的空闲块。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">defragmentPage</span><span class="p">(</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">pIdx</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">firstFree</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">pIdx</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">iNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">FreeBlk</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">aDisk</span><span class="p">[</span><span class="o">*</span><span class="n">pIdx</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 正好匹配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">iSize</span><span class="o">==</span><span class="n">nByte</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">start</span> <span class="o">=</span> <span class="o">*</span><span class="n">pIdx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">pIdx</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">iNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 分裂出一个新块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">FreeBlk</span> <span class="o">*</span><span class="n">pNew</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">start</span> <span class="o">=</span> <span class="o">*</span><span class="n">pIdx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pNew</span> <span class="o">=</span> <span class="p">(</span><span class="n">FreeBlk</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">aDisk</span><span class="p">[</span><span class="n">start</span> <span class="o">+</span> <span class="n">nByte</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">pNew</span><span class="o">-&gt;</span><span class="n">iNext</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">iNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pNew</span><span class="o">-&gt;</span><span class="n">iSize</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">iSize</span> <span class="o">-</span> <span class="n">nByte</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">pIdx</span> <span class="o">=</span> <span class="n">start</span> <span class="o">+</span> <span class="n">nByte</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nFree</span> <span class="o">-=</span> <span class="n">nByte</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>sqliteBtreeDelete</code> 用于删除Cursor当前指向的KV。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqliteBtreeDelete</span><span class="p">(</span><span class="n">BtCursor</span> <span class="o">*</span><span class="n">pCur</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">MemPage</span> <span class="o">*</span><span class="n">pPage</span> <span class="o">=</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Cell</span> <span class="o">*</span><span class="n">pCell</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Pgno</span> <span class="n">pgnoChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_ABORT</span><span class="p">;</span>  <span class="cm">/* A rollback destroyed this cursor */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">inTrans</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_ERROR</span><span class="p">;</span>  <span class="cm">/* Must start a transaction first */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span> <span class="o">&gt;=</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_ERROR</span><span class="p">;</span>  <span class="cm">/* The cursor is not pointing to anything */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">wrFlag</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SQLITE_PERM</span><span class="p">;</span>   <span class="cm">/* Did not open this cursor for writing */</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_write</span><span class="p">(</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pCell</span> <span class="o">=</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">pgnoChild</span> <span class="o">=</span> <span class="n">pCell</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">clearCell</span><span class="p">(</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pBt</span><span class="p">,</span> <span class="n">pCell</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pgnoChild</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    ** The entry we are about to delete is not a leaf so if we do not
</span></span></span><span class="line"><span class="cl"><span class="cm">    ** do something we will leave a hole on an internal page.
</span></span></span><span class="line"><span class="cl"><span class="cm">    ** We have to fill the hole by moving in a cell from a leaf.  The
</span></span></span><span class="line"><span class="cl"><span class="cm">    ** next Cell after the one to be deleted is guaranteed to exist and
</span></span></span><span class="line"><span class="cl"><span class="cm">    ** to be a leaf so we can use it.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果不是叶节点，将该节点的下一个节点移动过来，以满足B树的要求。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">BtCursor</span> <span class="n">leafCur</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Cell</span> <span class="o">*</span><span class="n">pNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">szNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">getTempCursor</span><span class="p">(</span><span class="n">pCur</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">leafCur</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 找到next节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqliteBtreeNext</span><span class="p">(</span><span class="o">&amp;</span><span class="n">leafCur</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">SQLITE_CORRUPT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_write</span><span class="p">(</span><span class="n">leafCur</span><span class="p">.</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从当前page drop当前cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">dropCell</span><span class="p">(</span><span class="n">pPage</span><span class="p">,</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="p">,</span> <span class="n">cellSize</span><span class="p">(</span><span class="n">pCell</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">pNext</span> <span class="o">=</span> <span class="n">leafCur</span><span class="p">.</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">leafCur</span><span class="p">.</span><span class="n">idx</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">szNext</span> <span class="o">=</span> <span class="n">cellSize</span><span class="p">(</span><span class="n">pNext</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 修改next节点的leftChild值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">pNext</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">pgnoChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将next节点插入到当前的page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">insertCell</span><span class="p">(</span><span class="n">pPage</span><span class="p">,</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="p">,</span> <span class="n">pNext</span><span class="p">,</span> <span class="n">szNext</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 平衡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rc</span> <span class="o">=</span> <span class="n">balance</span><span class="p">(</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pBt</span><span class="p">,</span> <span class="n">pPage</span><span class="p">,</span> <span class="n">pCur</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">bSkipNext</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将next节点drop掉
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">dropCell</span><span class="p">(</span><span class="n">leafCur</span><span class="p">.</span><span class="n">pPage</span><span class="p">,</span> <span class="n">leafCur</span><span class="p">.</span><span class="n">idx</span><span class="p">,</span> <span class="n">szNext</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 平衡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rc</span> <span class="o">=</span> <span class="n">balance</span><span class="p">(</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pBt</span><span class="p">,</span> <span class="n">leafCur</span><span class="p">.</span><span class="n">pPage</span><span class="p">,</span> <span class="n">pCur</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">releaseTempCursor</span><span class="p">(</span><span class="o">&amp;</span><span class="n">leafCur</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// drop cell  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">dropCell</span><span class="p">(</span><span class="n">pPage</span><span class="p">,</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="p">,</span> <span class="n">cellSize</span><span class="p">(</span><span class="n">pCell</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="o">&gt;=</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span> <span class="o">=</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span><span class="o">&lt;</span><span class="mi">0</span> <span class="p">){</span> 
</span></span><span class="line"><span class="cl">        <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">bSkipNext</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">bSkipNext</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">bSkipNext</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">balance</span><span class="p">(</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pBt</span><span class="p">,</span> <span class="n">pPage</span><span class="p">,</span> <span class="n">pCur</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="平衡操作">平衡操作</h3>
<p>在看balance实现之前，先看几个辅助函数</p>
<p><code>relinkCellList</code> 用于在插入或删除Cell后，更新<code>MemPage.u.aDisk</code> 中的next指针，这是因为在insertCell和dropCell中只处理了MemPage.apCell，没有处理aDisk中的iNext。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">relinkCellList</span><span class="p">(</span><span class="n">MemPage</span> <span class="o">*</span><span class="n">pPage</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">u16</span> <span class="o">*</span><span class="n">pIdx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">sqlitepager_iswriteable</span><span class="p">(</span><span class="n">pPage</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pIdx</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">firstCell</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">Addr</span><span class="p">(</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="n">Addr</span><span class="p">(</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span> <span class="n">idx</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">idx</span><span class="o">&lt;</span><span class="n">SQLITE_PAGE_SIZE</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">pIdx</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pIdx</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">iNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="n">pIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>copyPage</code> 用于拷贝存在overfull时的page，对于不在page的Cell，拷贝后的page仍然指向原内存。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">copyPage</span><span class="p">(</span><span class="n">MemPage</span> <span class="o">*</span><span class="n">pTo</span><span class="p">,</span> <span class="n">MemPage</span> <span class="o">*</span><span class="n">pFrom</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">uptr</span> <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">memcpy</span><span class="p">(</span><span class="n">pTo</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">aDisk</span><span class="p">,</span> <span class="n">pFrom</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">aDisk</span><span class="p">,</span> <span class="n">SQLITE_PAGE_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pTo</span><span class="o">-&gt;</span><span class="n">pParent</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pTo</span><span class="o">-&gt;</span><span class="n">isInit</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pTo</span><span class="o">-&gt;</span><span class="n">nCell</span> <span class="o">=</span> <span class="n">pFrom</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pTo</span><span class="o">-&gt;</span><span class="n">nFree</span> <span class="o">=</span> <span class="n">pFrom</span><span class="o">-&gt;</span><span class="n">nFree</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pTo</span><span class="o">-&gt;</span><span class="n">isOverfull</span> <span class="o">=</span> <span class="n">pFrom</span><span class="o">-&gt;</span><span class="n">isOverfull</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">to</span> <span class="o">=</span> <span class="n">Addr</span><span class="p">(</span><span class="n">pTo</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">from</span> <span class="o">=</span> <span class="n">Addr</span><span class="p">(</span><span class="n">pFrom</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">pTo</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">uptr</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Addr</span><span class="p">(</span><span class="n">pFrom</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果在page范围内，更新，否则用from的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span> <span class="n">x</span><span class="o">&gt;</span><span class="n">from</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">from</span><span class="o">+</span><span class="n">SQLITE_PAGE_SIZE</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="o">*</span><span class="p">((</span><span class="n">uptr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pTo</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">to</span> <span class="o">-</span> <span class="n">from</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">pTo</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pFrom</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>reparentChildPages</code> 用于在移动page后修改内存中的child页的<code>pParent</code> 指针，因为<code>pParent</code> 指针仅在内存中存储，所以在实现时不需要从磁盘加载没有缓存的page。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">reparentChildPages</span><span class="p">(</span><span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span><span class="p">,</span> <span class="n">MemPage</span> <span class="o">*</span><span class="n">pPage</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">reparentPage</span><span class="p">(</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span><span class="p">,</span> <span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">reparentPage</span><span class="p">(</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span><span class="p">,</span> <span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">reparentPage</span><span class="p">(</span><span class="n">Pager</span> <span class="o">*</span><span class="n">pPager</span><span class="p">,</span> <span class="n">Pgno</span> <span class="n">pgno</span><span class="p">,</span> <span class="n">MemPage</span> <span class="o">*</span><span class="n">pNewParent</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">MemPage</span> <span class="o">*</span><span class="n">pThis</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pgno</span><span class="o">==</span><span class="mi">0</span> <span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">pPager</span><span class="o">!=</span><span class="mi">0</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 只需要修改内存中缓存的页的parent，因此调lookup而不是get
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">pThis</span> <span class="o">=</span> <span class="n">sqlitepager_lookup</span><span class="p">(</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pgno</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pThis</span> <span class="o">&amp;&amp;</span> <span class="n">pThis</span><span class="o">-&gt;</span><span class="n">isInit</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pThis</span><span class="o">-&gt;</span><span class="n">pParent</span><span class="o">!=</span><span class="n">pNewParent</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">pThis</span><span class="o">-&gt;</span><span class="n">pParent</span> <span class="p">)</span> <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pThis</span><span class="o">-&gt;</span><span class="n">pParent</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">pThis</span><span class="o">-&gt;</span><span class="n">pParent</span> <span class="o">=</span> <span class="n">pNewParent</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">pNewParent</span> <span class="p">)</span> <span class="n">sqlitepager_ref</span><span class="p">(</span><span class="n">pNewParent</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pThis</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>铺垫完成，下面来看B树的平衡实现。</p>
<p><code>balance</code> 用于实现B树的平衡，它的基本思想很简单，找到页面相邻的两个兄弟页面，然后根据这三个页面的总空间需求，分配新的页面来存储，新的页面的free空间尽可能均匀。最终兄弟页面的个数可能会加1或减1，目标是页面的空间使用在66%到100%之间。</p>
<p>1 先看root page的处理。</p>
<ul>
<li>如果Cell个数为0，且有rightChild，将rightChild的页拷贝过来作为新的root page。拷贝之后需要修改内存中child页的parent指针。</li>
<li>如果root页overfull，创建一个新的child页拷贝过去，然后将root页设置为空，并且rightChild指向新页，后面的逻辑会执行新页的split。通过这样的处理可以复用非root页的balance逻辑。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="nf">balance</span><span class="p">(</span><span class="n">Btree</span> <span class="o">*</span><span class="n">pBt</span><span class="p">,</span> <span class="n">MemPage</span> <span class="o">*</span><span class="n">pPage</span><span class="p">,</span> <span class="n">BtCursor</span> <span class="o">*</span><span class="n">pCur</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 省略一些变量定义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="n">pParent</span> <span class="o">=</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">pParent</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 1 root页处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="n">pParent</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">Pgno</span> <span class="n">pgnoChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">MemPage</span> <span class="o">*</span><span class="n">pChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 如果root page没有cell但rightChild不为空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span><span class="p">(</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">        ** The root page is empty.  Copy the one child page
</span></span></span><span class="line"><span class="cl"><span class="cm">        ** into the root page and return.  This reduces the depth
</span></span></span><span class="line"><span class="cl"><span class="cm">        ** of the BTree by one.
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="n">pgnoChild</span> <span class="o">=</span> <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_get</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pgnoChild</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pChild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 拷贝过来后重新初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">memcpy</span><span class="p">(</span><span class="n">pPage</span><span class="p">,</span> <span class="n">pChild</span><span class="p">,</span> <span class="n">SQLITE_PAGE_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">isInit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">rc</span> <span class="o">=</span> <span class="n">initPage</span><span class="p">(</span><span class="n">pPage</span><span class="p">,</span> <span class="n">sqlitepager_pagenumber</span><span class="p">(</span><span class="n">pPage</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">assert</span><span class="p">(</span> <span class="n">rc</span><span class="o">==</span><span class="n">SQLITE_OK</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 拷贝之后，修改内存中的child页的parent指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">reparentChildPages</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span> <span class="o">&amp;&amp;</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">==</span><span class="n">pChild</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">          <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pChild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span> <span class="o">=</span> <span class="n">pPage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">sqlitepager_ref</span><span class="p">(</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">freePage</span><span class="p">(</span><span class="n">pBt</span><span class="p">,</span> <span class="n">pChild</span><span class="p">,</span> <span class="n">pgnoChild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pChild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">relinkCellList</span><span class="p">(</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">isOverfull</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="cm">/* It is OK for the root page to be less than half full.
</span></span></span><span class="line"><span class="cl"><span class="cm">      */</span>
</span></span><span class="line"><span class="cl">      <span class="n">relinkCellList</span><span class="p">(</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    ** If we get to here, it means the root page is overfull.
</span></span></span><span class="line"><span class="cl"><span class="cm">    ** When this happens, Create a new child page and copy the
</span></span></span><span class="line"><span class="cl"><span class="cm">    ** contents of the root into the child.  Then make the root
</span></span></span><span class="line"><span class="cl"><span class="cm">    ** page an empty page with rightChild pointing to the new
</span></span></span><span class="line"><span class="cl"><span class="cm">    ** child.  Then fall thru to the code below which will cause
</span></span></span><span class="line"><span class="cl"><span class="cm">    ** the overfull child page to be split.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// root页overfull，创建一个新的child页拷贝过去，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 然后将root页设置为空，并且rightChild指向新页，后面的逻辑会执行新页的split
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_write</span><span class="p">(</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">allocatePage</span><span class="p">(</span><span class="n">pBt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pChild</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pgnoChild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span> <span class="n">sqlitepager_iswriteable</span><span class="p">(</span><span class="n">pChild</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 和上面memcpy然后initPage的区别在于，copyPage会考虑overfull，这些cell仍然指向pFrom的原始内存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">copyPage</span><span class="p">(</span><span class="n">pChild</span><span class="p">,</span> <span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pChild</span><span class="o">-&gt;</span><span class="n">pParent</span> <span class="o">=</span> <span class="n">pPage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqlitepager_ref</span><span class="p">(</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pChild</span><span class="o">-&gt;</span><span class="n">isOverfull</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span> <span class="o">&amp;&amp;</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="o">==</span><span class="n">pPage</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span> <span class="o">=</span> <span class="n">pChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">extraUnref</span> <span class="o">=</span> <span class="n">pChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">zeroPage</span><span class="p">(</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">pgnoChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pParent</span> <span class="o">=</span> <span class="n">pPage</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pPage</span> <span class="o">=</span> <span class="n">pChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 需要修改parent页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_write</span><span class="p">(</span><span class="n">pParent</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>2 在页的左右各取一个兄弟。如果页是最左或最右时，会取同一边的两个兄弟。如果兄弟个数少于等于3，会用上所有的兄弟页。这些页的Cell加上parent中分割的Cell会一起计算总的空间需求，用于分配新页。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="c1">// 省略一些逻辑，设置idx为parent页指向本页的Cell的下标
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 2 在页左右各取一个兄弟。如果页是最左或最右时，会取同一边的两个兄弟。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 如果兄弟个数少于等于3，会用上所有的兄弟页。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span> <span class="n">idx</span><span class="o">==</span><span class="n">pParent</span><span class="o">-&gt;</span><span class="n">nCell</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">nxDiv</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">nxDiv</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">nxDiv</span><span class="o">&lt;</span><span class="mi">0</span> <span class="p">)</span> <span class="n">nxDiv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">nDiv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="n">nxDiv</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">pParent</span><span class="o">-&gt;</span><span class="n">nCell</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// parent只分割Cell的index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">idxDiv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 获取parent中的分割Cell，会和兄弟page的Cell一起用于分配新页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">apDiv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pParent</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">nDiv</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">pgnoOld</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">apDiv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span> <span class="nf">if</span><span class="p">(</span> <span class="n">k</span><span class="o">==</span><span class="n">pParent</span><span class="o">-&gt;</span><span class="n">nCell</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">pgnoOld</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pParent</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 加载兄弟页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_get</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pgnoOld</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">apOld</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">goto</span> <span class="n">balance_cleanup</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">initPage</span><span class="p">(</span><span class="n">apOld</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">pgnoOld</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">pParent</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">goto</span> <span class="n">balance_cleanup</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">nOld</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>3 将找到的兄弟页拷贝到内存中的临时页，因为这些兄弟页后续可能会修改。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 3 将这些页拷贝到内存中新页，因为原始页有可能修改。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nOld</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">copyPage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aOld</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">apOld</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">freePage</span><span class="p">(</span><span class="n">pBt</span><span class="p">,</span> <span class="n">apOld</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">pgnoOld</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">goto</span> <span class="n">balance_cleanup</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">apOld</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">apOld</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">aOld</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>4  计算兄弟页和parent中的分割Cell需要使用的空间，把这些Cell都拷贝到apCell数组，然后计算需要分配多少新页，每个新页的剩余空间保证相对均匀。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="c1">// 4 计算兄弟页和parent中的分割Cell需要使用的空间，把这些Cell都拷贝到apCell数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">Cell</span> <span class="o">*</span><span class="n">apCell</span><span class="p">[</span><span class="n">MX_CELL</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">5</span><span class="p">];</span>   <span class="cm">/* All cells from pages being balanceed */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">szCell</span><span class="p">[</span><span class="n">MX_CELL</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">5</span><span class="p">];</span>     <span class="cm">/* Local size of all cells */</span>
</span></span><span class="line"><span class="cl">  <span class="n">nCell</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nOld</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">MemPage</span> <span class="o">*</span><span class="n">pOld</span> <span class="o">=</span> <span class="n">apOld</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">pOld</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">apCell</span><span class="p">[</span><span class="n">nCell</span><span class="p">]</span> <span class="o">=</span> <span class="n">pOld</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">szCell</span><span class="p">[</span><span class="n">nCell</span><span class="p">]</span> <span class="o">=</span> <span class="n">cellSize</span><span class="p">(</span><span class="n">apCell</span><span class="p">[</span><span class="n">nCell</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="n">nCell</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 拷贝parent中的分割Cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nOld</span><span class="o">-</span><span class="mi">1</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">szCell</span><span class="p">[</span><span class="n">nCell</span><span class="p">]</span> <span class="o">=</span> <span class="n">cellSize</span><span class="p">(</span><span class="n">apDiv</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aTemp</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">apDiv</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">szCell</span><span class="p">[</span><span class="n">nCell</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="n">apCell</span><span class="p">[</span><span class="n">nCell</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">aTemp</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 临时从parent中删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">dropCell</span><span class="p">(</span><span class="n">pParent</span><span class="p">,</span> <span class="n">nxDiv</span><span class="p">,</span> <span class="n">szCell</span><span class="p">[</span><span class="n">nCell</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="n">assert</span><span class="p">(</span> <span class="n">apCell</span><span class="p">[</span><span class="n">nCell</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span><span class="o">==</span><span class="n">pgnoOld</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">apCell</span><span class="p">[</span><span class="n">nCell</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">pOld</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">nCell</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 计算总的size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">totalSize</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nCell</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">totalSize</span> <span class="o">+=</span> <span class="n">szCell</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">cntNew</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>               <span class="cm">/* Index in apCell[] of cell after i-th page */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">szNew</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>                <span class="cm">/* Combined size of cells place on i-th page */</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">subtotal</span><span class="o">=</span><span class="n">k</span><span class="o">=</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nCell</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">subtotal</span> <span class="o">+=</span> <span class="n">szCell</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// #define USABLE_SPACE  (SQLITE_PAGE_SIZE - sizeof(PageHdr))
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 分配一个新页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span> <span class="n">subtotal</span> <span class="o">&gt;</span> <span class="n">USABLE_SPACE</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">szNew</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">subtotal</span> <span class="o">-</span> <span class="n">szCell</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">cntNew</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">subtotal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">szNew</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">subtotal</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">cntNew</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">nCell</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 经过上一个循环，前面的页会接近满，而后面的页有可能接近空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 下面的循环再进行调整，至少占满USABLE_SPACE/2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span> <span class="n">szNew</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;</span><span class="n">USABLE_SPACE</span><span class="o">/</span><span class="mi">2</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 从前面挪Cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">cntNew</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">assert</span><span class="p">(</span> <span class="n">cntNew</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">0</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">szNew</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">szCell</span><span class="p">[</span><span class="n">cntNew</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]];</span>
</span></span><span class="line"><span class="cl">      <span class="n">szNew</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-=</span> <span class="n">szCell</span><span class="p">[</span><span class="n">cntNew</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">cntNew</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">0</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="c1">// 分配k个新页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">allocatePage</span><span class="p">(</span><span class="n">pBt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">apNew</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">pgnoNew</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span> <span class="p">)</span> <span class="k">goto</span> <span class="n">balance_cleanup</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">nNew</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">zeroPage</span><span class="p">(</span><span class="n">apNew</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">apNew</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">isInit</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>5 将新页按照页号排序，然后写入Cell到新页，并把分割的Cell插入到parent中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="c1">// 5 将新页按照页号排序，排序后磁盘文件是有序的，scan操作是线性的。注释中说排序可以让大的插入和删除快25%。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">minV</span> <span class="o">=</span> <span class="n">pgnoNew</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">minI</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">k</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">pgnoNew</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;</span><span class="n">minV</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">minI</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">minV</span> <span class="o">=</span> <span class="n">pgnoNew</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">minI</span><span class="o">&gt;</span><span class="n">i</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">MemPage</span> <span class="o">*</span><span class="n">pT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">t</span> <span class="o">=</span> <span class="n">pgnoNew</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">pT</span> <span class="o">=</span> <span class="n">apNew</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">pgnoNew</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pgnoNew</span><span class="p">[</span><span class="n">minI</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">apNew</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">apNew</span><span class="p">[</span><span class="n">minI</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">pgnoNew</span><span class="p">[</span><span class="n">minI</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">apNew</span><span class="p">[</span><span class="n">minI</span><span class="p">]</span> <span class="o">=</span> <span class="n">pT</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** Evenly distribute the data in apCell[] across the new pages.
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** Insert divider cells into pParent as necessary.
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nNew</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">MemPage</span> <span class="o">*</span><span class="n">pNew</span> <span class="o">=</span> <span class="n">apNew</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">cntNew</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">assert</span><span class="p">(</span> <span class="n">pNew</span><span class="o">-&gt;</span><span class="n">nFree</span><span class="o">&gt;=</span><span class="n">szCell</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 插入到页中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">insertCell</span><span class="p">(</span><span class="n">pNew</span><span class="p">,</span> <span class="n">pNew</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="p">,</span> <span class="n">apCell</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">szCell</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span> <span class="n">pNew</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="o">&gt;</span><span class="mi">0</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span> <span class="o">!</span><span class="n">pNew</span><span class="o">-&gt;</span><span class="n">isOverfull</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 维护Cell的next指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">relinkCellList</span><span class="p">(</span><span class="n">pNew</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nNew</span><span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">nCell</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 按照B树的性质，右兄弟节点的子结点也大于自己，所以这里是设置rightChild
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">pNew</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">apCell</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 设置parent的分割Cell的leftChild为pgnoNew[i]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">apCell</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">pgnoNew</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 分割的Cell插入parent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">insertCell</span><span class="p">(</span><span class="n">pParent</span><span class="p">,</span> <span class="n">nxDiv</span><span class="p">,</span> <span class="n">apCell</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">szCell</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">nxDiv</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">j</span><span class="o">==</span><span class="n">nCell</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">apNew</span><span class="p">[</span><span class="n">nNew</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">apOld</span><span class="p">[</span><span class="n">nOld</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">nxDiv</span><span class="o">==</span><span class="n">pParent</span><span class="o">-&gt;</span><span class="n">nCell</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">pParent</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">pgnoNew</span><span class="p">[</span><span class="n">nNew</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">pParent</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">nxDiv</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">pgnoNew</span><span class="p">[</span><span class="n">nNew</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>6 最后做一些维护工作。由于balance可能修改parent，所以对parent调用balance。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** Reparent children of all cells.
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nNew</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">reparentChildPages</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="n">apNew</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">reparentChildPages</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">,</span> <span class="n">pParent</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  ** balance the parent page.
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">balance</span><span class="p">(</span><span class="n">pBt</span><span class="p">,</span> <span class="n">pParent</span><span class="p">,</span> <span class="n">pCur</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="事务操作">事务操作</h3>
<p>多个读事务可以同时执行。</p>
<p>写事务执行时，其他读写事务都不能执行。</p>
<p>事务实现基本就是调用下Pager的事务操作。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqliteBtreeBeginTrans</span><span class="p">(</span><span class="n">Btree</span> <span class="o">*</span><span class="n">pBt</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">inTrans</span> <span class="p">)</span> <span class="k">return</span> <span class="n">SQLITE_ERROR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">page1</span><span class="o">==</span><span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 加载页面，如果数据库不为空，校验magic number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">rc</span> <span class="o">=</span> <span class="n">lockBtree</span><span class="p">(</span><span class="n">pBt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">!=</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">readOnly</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">rc</span> <span class="o">=</span> <span class="n">sqlitepager_begin</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">page1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">==</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">rc</span> <span class="o">=</span> <span class="n">newDatabase</span><span class="p">(</span><span class="n">pBt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">rc</span><span class="o">==</span><span class="n">SQLITE_OK</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">inTrans</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">inCkpt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">unlockBtreeIfUnused</span><span class="p">(</span><span class="n">pBt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqliteBtreeRollback</span><span class="p">(</span><span class="n">Btree</span> <span class="o">*</span><span class="n">pBt</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">BtCursor</span> <span class="o">*</span><span class="n">pCur</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">inTrans</span><span class="o">==</span><span class="mi">0</span> <span class="p">)</span> <span class="k">return</span> <span class="n">SQLITE_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">inTrans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">inCkpt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">pCur</span><span class="o">=</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pCursor</span><span class="p">;</span> <span class="n">pCur</span><span class="p">;</span> <span class="n">pCur</span><span class="o">=</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pNext</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">sqlitepager_unref</span><span class="p">(</span><span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">pCur</span><span class="o">-&gt;</span><span class="n">pPage</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">readOnly</span> <span class="o">?</span> <span class="nl">SQLITE_OK</span> <span class="p">:</span> <span class="n">sqlitepager_rollback</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">unlockBtreeIfUnused</span><span class="p">(</span><span class="n">pBt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sqliteBtreeCommit</span><span class="p">(</span><span class="n">Btree</span> <span class="o">*</span><span class="n">pBt</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">inTrans</span><span class="o">==</span><span class="mi">0</span> <span class="p">)</span> <span class="k">return</span> <span class="n">SQLITE_ERROR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc</span> <span class="o">=</span> <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">readOnly</span> <span class="o">?</span> <span class="nl">SQLITE_OK</span> <span class="p">:</span> <span class="n">sqlitepager_commit</span><span class="p">(</span><span class="n">pBt</span><span class="o">-&gt;</span><span class="n">pPager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">inTrans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pBt</span><span class="o">-&gt;</span><span class="n">inCkpt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">unlockBtreeIfUnused</span><span class="p">(</span><span class="n">pBt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="对比boltdb">对比BoltDB</h2>
<ol>
<li>sqlite自己做page buffer管理，需要处理page淘汰、脏页写盘，而BoltDB使用系统mmap来管理内存，很多管理逻辑都委托给OS，实现相对简单。</li>
<li>这个版本的sqlite只有B树实现，而BoltDB使用B+树实现。</li>
<li>sqlite的rebalance实现更加复杂，BoltDB相对简单。</li>
</ol>
<h2 id="代码技巧">代码技巧</h2>
<p>sqlite实现中的一些代码技巧值得学习</p>
<ol>
<li>
<p>将地址当作数组访问，然后方便的定位到该结构体前后的内存。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#define PGHDR_TO_DATA(P)  ((void*)(&amp;(P)[1]))
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>通过指针来简化一些处理，类似于<a href="https://coolshell.cn/articles/8990.html">Linus：利用二级指针删除单向链表 | 酷 壳 - CoolShell</a>的技巧。</p>
<p>比如下面的代码中，如果不用指针，firstCell和iNext需要分别去设置，但通过指针把它们的设置逻辑统一了起来。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">relinkCellList</span><span class="p">(</span><span class="n">MemPage</span> <span class="o">*</span><span class="n">pPage</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">u16</span> <span class="o">*</span><span class="n">pIdx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span> <span class="n">sqlitepager_iswriteable</span><span class="p">(</span><span class="n">pPage</span><span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pIdx</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">firstCell</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">nCell</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">Addr</span><span class="p">(</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="n">Addr</span><span class="p">(</span><span class="n">pPage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span> <span class="n">idx</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">idx</span><span class="o">&lt;</span><span class="n">SQLITE_PAGE_SIZE</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">pIdx</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pIdx</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pPage</span><span class="o">-&gt;</span><span class="n">apCell</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">.</span><span class="n">iNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="n">pIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>BoltDB源码笔记</title>
      <link>https://egolearner.github.io/post/boltdb-source-read/</link>
      <pubDate>Thu, 01 Dec 2022 19:43:42 +0800</pubDate>
      
      <guid>https://egolearner.github.io/post/boltdb-source-read/</guid>
      <description>&lt;p&gt;BoltDB 受LMDB启发，是基于append only B+ tree实现的KV存储。&lt;/p&gt;
&lt;h2 id=&#34;page实现&#34;&gt;page实现&lt;/h2&gt;
&lt;p&gt;boltdb没有实现自己的page buffer管理器，而是直接用mmap来从磁盘读取page。page的大小和OS的内存页大小相同。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>BoltDB 受LMDB启发，是基于append only B+ tree实现的KV存储。</p>
<h2 id="page实现">page实现</h2>
<p>boltdb没有实现自己的page buffer管理器，而是直接用mmap来从磁盘读取page。page的大小和OS的内存页大小相同。</p>
<p>page header结构如下，从ptr开始为page页的存储内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">pgid</span> <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">page</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">id</span>       <span class="nx">pgid</span>    <span class="c1">// page id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">flags</span>    <span class="kt">uint16</span>  <span class="c1">// page 类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">count</span>    <span class="kt">uint16</span>  <span class="c1">// 元素的个数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">overflow</span> <span class="kt">uint32</span>  <span class="c1">// 是否有overflow页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ptr</span>      <span class="kt">uintptr</span> <span class="c1">// ptr开始为数据存储。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>page.flags</code> 取值如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">branchPageFlag</span>   <span class="p">=</span> <span class="mh">0x01</span>  <span class="c1">// 内部页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">leafPageFlag</span>     <span class="p">=</span> <span class="mh">0x02</span>  <span class="c1">// leaf 页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">metaPageFlag</span>     <span class="p">=</span> <span class="mh">0x04</span>  <span class="c1">// meta 页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">freelistPageFlag</span> <span class="p">=</span> <span class="mh">0x10</span>  <span class="c1">// 空闲page列表页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过boltdb学到了如何用go写底层代码，如将一个 <code>byte[]</code> 作为page访问是这样的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// pageInBuffer retrieves a page reference from a given byte array based on the current page size.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">DB</span><span class="p">)</span> <span class="nf">pageInBuffer</span><span class="p">(</span><span class="nx">b</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">id</span> <span class="nx">pgid</span><span class="p">)</span> <span class="o">*</span><span class="nx">page</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="nx">page</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">[</span><span class="nx">id</span><span class="o">*</span><span class="nf">pgid</span><span class="p">(</span><span class="nx">db</span><span class="p">.</span><span class="nx">pageSize</span><span class="p">)]))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="meta页">meta页</h3>
<p>boltdb数据库的前两个页为meta页，存储元数据。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">meta</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">magic</span>    <span class="kt">uint32</span>  <span class="c1">// 0xED0CDAED, 用于文件校验
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">version</span>  <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pageSize</span> <span class="kt">uint32</span>  <span class="c1">// 页大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">flags</span>    <span class="kt">uint32</span>  <span class="c1">// 貌似未使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">root</span>     <span class="nx">bucket</span>  <span class="c1">// root bucket
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">freelist</span> <span class="nx">pgid</span>    <span class="c1">// 空闲page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pgid</span>     <span class="nx">pgid</span>    <span class="c1">// 数据库文件的最大page id，超过需要重新mmap或者说明有错误。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">txid</span>     <span class="nx">txid</span>    <span class="c1">// 用来分配写事务的id。id更大的meta页是最新的。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">checksum</span> <span class="kt">uint64</span>  <span class="c1">// 文件损坏校验
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>meta</code> 存储在 <code>page</code> 结构的 <code>page.ptr</code> 位置，所以从page访问meta是这样的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// meta returns a pointer to the metadata section of the page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">page</span><span class="p">)</span> <span class="nf">meta</span><span class="p">()</span> <span class="o">*</span><span class="nx">meta</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="nx">meta</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">ptr</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>boltdb的两个meta页随着写入的进行会来回切换，最新的meta页包含当前的最新状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// meta retrieves the current meta page reference.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">DB</span><span class="p">)</span> <span class="nf">meta</span><span class="p">()</span> <span class="o">*</span><span class="nx">meta</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// We have to return the meta with the highest txid which doesn&#39;t fail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// validation. Otherwise, we can cause errors when in fact the database is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// in a consistent state. metaA is the one with the higher txid.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">metaA</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">meta0</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metaB</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">meta1</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">db</span><span class="p">.</span><span class="nx">meta1</span><span class="p">.</span><span class="nx">txid</span> <span class="p">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">meta0</span><span class="p">.</span><span class="nx">txid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metaA</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">meta1</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metaB</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">meta0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Use higher meta page if valid. Otherwise fallback to previous, if valid.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">metaA</span><span class="p">.</span><span class="nf">validate</span><span class="p">();</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">metaA</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">metaB</span><span class="p">.</span><span class="nf">validate</span><span class="p">();</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">metaB</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// This should never be reached, because both meta1 and meta0 were validated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// on mmap() and we do fsync() on every write.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nb">panic</span><span class="p">(</span><span class="s">&#34;bolt.DB.meta(): invalid meta pages&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="branch页">branch页</h3>
<p>branch页存储B+树的内部节点数据，由<code>branchPageElement</code> 数组和key数据构成。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// branchPageElement represents a node on a branch page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">branchPageElement</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pos</span>   <span class="kt">uint32</span>  <span class="c1">// key 存储位置相对branchPageElement存储位置的偏移量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ksize</span> <span class="kt">uint32</span>  <span class="c1">// key size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pgid</span>  <span class="nx">pgid</span>    <span class="c1">// page id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>branchPageElement数组同样存储在<code>page</code> 结构的 <code>page.ptr</code> 位置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// branchPageElement retrieves the branch node by index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">page</span><span class="p">)</span> <span class="nf">branchPageElement</span><span class="p">(</span><span class="nx">index</span> <span class="kt">uint16</span><span class="p">)</span> <span class="o">*</span><span class="nx">branchPageElement</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="p">((</span><span class="o">*</span><span class="p">[</span><span class="mh">0x7FFFFFF</span><span class="p">]</span><span class="nx">branchPageElement</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">ptr</span><span class="p">)))[</span><span class="nx">index</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// branchPageElements retrieves a list of branch nodes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">page</span><span class="p">)</span> <span class="nf">branchPageElements</span><span class="p">()</span> <span class="p">[]</span><span class="nx">branchPageElement</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">p</span><span class="p">.</span><span class="nx">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">((</span><span class="o">*</span><span class="p">[</span><span class="mh">0x7FFFFFF</span><span class="p">]</span><span class="nx">branchPageElement</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">ptr</span><span class="p">)))[:]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>branchPageElement.pos</code> 存储的是key存储位置相对branchPageElement存储位置的偏移量，所以得到key的实现如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// key returns a byte slice of the node key.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">branchPageElement</span><span class="p">)</span> <span class="nf">key</span><span class="p">()</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">buf</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nx">maxAllocSize</span><span class="p">]</span><span class="kt">byte</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// n的地址加上n.pos得到key的起始地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nx">maxAllocSize</span><span class="p">]</span><span class="kt">byte</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">buf</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">pos</span><span class="p">]))[:</span><span class="nx">n</span><span class="p">.</span><span class="nx">ksize</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="leaf页">leaf页</h3>
<p>leaf页存储B+树的页节点数据，布局和branch页类似，只不过多了value。leaf页由<code>leafPageElement</code> 数组和key, value数据构成。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// leafPageElement represents a node on a leaf page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">leafPageElement</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">flags</span> <span class="kt">uint32</span>  <span class="c1">// 为1表示子bucket
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pos</span>   <span class="kt">uint32</span>  <span class="c1">// key, value存储位置的相对偏移量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ksize</span> <span class="kt">uint32</span>  <span class="c1">// key size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">vsize</span> <span class="kt">uint32</span>  <span class="c1">// value size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>从page根据下标访问</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// leafPageElement retrieves the leaf node by index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">page</span><span class="p">)</span> <span class="nf">leafPageElement</span><span class="p">(</span><span class="nx">index</span> <span class="kt">uint16</span><span class="p">)</span> <span class="o">*</span><span class="nx">leafPageElement</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">n</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="p">((</span><span class="o">*</span><span class="p">[</span><span class="mh">0x7FFFFFF</span><span class="p">]</span><span class="nx">leafPageElement</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">ptr</span><span class="p">)))[</span><span class="nx">index</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>访问key, value实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// key returns a byte slice of the node key.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">leafPageElement</span><span class="p">)</span> <span class="nf">key</span><span class="p">()</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">buf</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nx">maxAllocSize</span><span class="p">]</span><span class="kt">byte</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 最后的:n.ksize用来限制slice的compacity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nx">maxAllocSize</span><span class="p">]</span><span class="kt">byte</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">buf</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">pos</span><span class="p">]))[:</span><span class="nx">n</span><span class="p">.</span><span class="nx">ksize</span><span class="p">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">ksize</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// value returns a byte slice of the node value.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">leafPageElement</span><span class="p">)</span> <span class="nf">value</span><span class="p">()</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">buf</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nx">maxAllocSize</span><span class="p">]</span><span class="kt">byte</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nx">maxAllocSize</span><span class="p">]</span><span class="kt">byte</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">buf</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">pos</span><span class="o">+</span><span class="nx">n</span><span class="p">.</span><span class="nx">ksize</span><span class="p">]))[:</span><span class="nx">n</span><span class="p">.</span><span class="nx">vsize</span><span class="p">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">vsize</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="freelist页">freelist页</h3>
<p>freelist页存储空闲的页表，用于重用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// freelist represents a list of all pages that are available for allocation.
</span></span></span><span class="line"><span class="cl"><span class="c1">// It also tracks pages that have been freed but are still in use by open transactions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">freelist</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ids</span>     <span class="p">[]</span><span class="nx">pgid</span>          <span class="c1">// all free and available free page ids.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 记录执行中的事务用到的页表，用于安全的重用页表。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pending</span> <span class="kd">map</span><span class="p">[</span><span class="nx">txid</span><span class="p">][]</span><span class="nx">pgid</span> <span class="c1">// mapping of soon-to-be free page ids by tx.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 记录页是否空闲
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cache</span>   <span class="kd">map</span><span class="p">[</span><span class="nx">pgid</span><span class="p">]</span><span class="kt">bool</span>   <span class="c1">// fast lookup of all free and pending page ids.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>磁盘上只需要存储 <code>freelist.ids</code> ，而pending和cache只在内存中维护。下面的加载函数，从磁盘上加载空闲页的id数组，然后通过reindex来重建cache字段。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// read initializes the freelist from a freelist page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">freelist</span><span class="p">)</span> <span class="nf">read</span><span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">page</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// If the page.count is at the max uint16 value (64k) then it&#39;s considered
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// an overflow and the size of the freelist is stored as the first element.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">idx</span><span class="p">,</span> <span class="nx">count</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">count</span> <span class="o">==</span> <span class="mh">0xFFFF</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">idx</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="nx">count</span> <span class="p">=</span> <span class="nb">int</span><span class="p">(((</span><span class="o">*</span><span class="p">[</span><span class="nx">maxAllocSize</span><span class="p">]</span><span class="nx">pgid</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">ptr</span><span class="p">)))[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Copy the list of page ids from the freelist.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">f</span><span class="p">.</span><span class="nx">ids</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ids</span> <span class="o">:=</span> <span class="p">((</span><span class="o">*</span><span class="p">[</span><span class="nx">maxAllocSize</span><span class="p">]</span><span class="nx">pgid</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">ptr</span><span class="p">)))[</span><span class="nx">idx</span><span class="p">:</span><span class="nx">count</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="nx">f</span><span class="p">.</span><span class="nx">ids</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">pgid</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">ids</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nb">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">ids</span><span class="p">,</span> <span class="nx">ids</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Make sure they&#39;re sorted.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">sort</span><span class="p">.</span><span class="nf">Sort</span><span class="p">(</span><span class="nf">pgids</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">ids</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Rebuild the page cache.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">f</span><span class="p">.</span><span class="nf">reindex</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在allocate函数中，会检查是否存在n个连续的页，如果存在的返回起始页的page id，否则返回0.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// allocate returns the starting page id of a contiguous list of pages of a given size.
</span></span></span><span class="line"><span class="cl"><span class="c1">// If a contiguous block cannot be found then 0 is returned.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">freelist</span><span class="p">)</span> <span class="nf">allocate</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="nx">pgid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">ids</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">initial</span><span class="p">,</span> <span class="nx">previd</span> <span class="nx">pgid</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">id</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">f</span><span class="p">.</span><span class="nx">ids</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">id</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;invalid page allocation: %d&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Reset initial page if this is not contiguous.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">previd</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">id</span><span class="o">-</span><span class="nx">previd</span> <span class="o">!=</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">initial</span> <span class="p">=</span> <span class="nx">id</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// If we found a contiguous block then remove it and return it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">(</span><span class="nx">id</span><span class="o">-</span><span class="nx">initial</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="o">==</span> <span class="nf">pgid</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// If we&#39;re allocating off the beginning then take the fast path
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// and just adjust the existing slice. This will use extra memory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// temporarily but the append() in free() will realloc the slice
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// as is necessary.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="nx">n</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">f</span><span class="p">.</span><span class="nx">ids</span> <span class="p">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">ids</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nb">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">ids</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">:],</span> <span class="nx">f</span><span class="p">.</span><span class="nx">ids</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>
</span></span><span class="line"><span class="cl">				<span class="nx">f</span><span class="p">.</span><span class="nx">ids</span> <span class="p">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">ids</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">ids</span><span class="p">)</span><span class="o">-</span><span class="nx">n</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="c1">// Remove from the free cache.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="nf">pgid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nf">pgid</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nb">delete</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">cache</span><span class="p">,</span> <span class="nx">initial</span><span class="o">+</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">initial</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">previd</span> <span class="p">=</span> <span class="nx">id</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="node结构">node结构</h3>
<p>page结构体和磁盘上存储的结构直接对应，使用时并不方便，比如上面介绍的 <code>page.meta()</code> 函数就是为了方便访问元数据字段的。boltdb中最多的还是branch页和leaf页，因此专门定义了node来表示加载到内存中的page，便于访问branch页和leaf页的数据。写事务执行的插入和删除也是先更新到内存中的node中，在事务提交时才刷新到磁盘。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// inode represents an internal node inside of a node.
</span></span></span><span class="line"><span class="cl"><span class="c1">// It can be used to point to elements in a page or point
</span></span></span><span class="line"><span class="cl"><span class="c1">// to an element which hasn&#39;t been added to a page yet.
</span></span></span><span class="line"><span class="cl"><span class="c1">// inode 统一表示中间节点和叶节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">inode</span> <span class="kd">struct</span> 
</span></span><span class="line"><span class="cl">	<span class="nx">flags</span> <span class="kt">uint32</span>  <span class="c1">// 对应leafPageElement.flags
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pgid</span>  <span class="nx">pgid</span>
</span></span><span class="line"><span class="cl">	<span class="nx">key</span>   <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">	<span class="nx">value</span> <span class="p">[]</span><span class="kt">byte</span>  <span class="c1">// 中间节点的value为nil
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">inodes</span> <span class="p">[]</span><span class="nx">inode</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// node represents an in-memory, deserialized page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">node</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bucket</span>     <span class="o">*</span><span class="nx">Bucket</span>
</span></span><span class="line"><span class="cl">	<span class="nx">isLeaf</span>     <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="nx">unbalanced</span> <span class="kt">bool</span>  <span class="c1">// 有删除时会设置为true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">spilled</span>    <span class="kt">bool</span>  <span class="c1">// 是否已经分裂和分配脏页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">key</span>        <span class="p">[]</span><span class="kt">byte</span>  <span class="c1">// 第0个key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pgid</span>       <span class="nx">pgid</span>
</span></span><span class="line"><span class="cl">	<span class="nx">parent</span>     <span class="o">*</span><span class="nx">node</span>
</span></span><span class="line"><span class="cl">	<span class="nx">children</span>   <span class="nx">nodes</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 叶子节点的key/value数组，中间节点的key数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">inodes</span> <span class="nx">inodes</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">nodes</span> <span class="p">[]</span><span class="o">*</span><span class="nx">node</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>node和page的相互转换逻辑如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// read initializes the node from a page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">node</span><span class="p">)</span> <span class="nf">read</span><span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">page</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">n</span><span class="p">.</span><span class="nx">pgid</span> <span class="p">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">id</span>
</span></span><span class="line"><span class="cl">	<span class="nx">n</span><span class="p">.</span><span class="nx">isLeaf</span> <span class="p">=</span> <span class="p">((</span><span class="nx">p</span><span class="p">.</span><span class="nx">flags</span> <span class="o">&amp;</span> <span class="nx">leafPageFlag</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">inodes</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">count</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">int</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">inode</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">n</span><span class="p">.</span><span class="nx">isLeaf</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">elem</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nf">leafPageElement</span><span class="p">(</span><span class="nb">uint16</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">inode</span><span class="p">.</span><span class="nx">flags</span> <span class="p">=</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">flags</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 从page读到key/value，写入inode结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">inode</span><span class="p">.</span><span class="nx">key</span> <span class="p">=</span> <span class="nx">elem</span><span class="p">.</span><span class="nf">key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nx">inode</span><span class="p">.</span><span class="nx">value</span> <span class="p">=</span> <span class="nx">elem</span><span class="p">.</span><span class="nf">value</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">elem</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nf">branchPageElement</span><span class="p">(</span><span class="nb">uint16</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">inode</span><span class="p">.</span><span class="nx">pgid</span> <span class="p">=</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">pgid</span>
</span></span><span class="line"><span class="cl">			<span class="nx">inode</span><span class="p">.</span><span class="nx">key</span> <span class="p">=</span> <span class="nx">elem</span><span class="p">.</span><span class="nf">key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nf">_assert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">inode</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#34;read: zero-length inode key&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Save first key so we can find the node in the parent when we spill.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span><span class="p">.</span><span class="nx">key</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">key</span>
</span></span><span class="line"><span class="cl">		<span class="nf">_assert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#34;read: zero-length node key&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span><span class="p">.</span><span class="nx">key</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// write writes the items onto one or more pages.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">node</span><span class="p">)</span> <span class="nf">write</span><span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">page</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Initialize page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">n</span><span class="p">.</span><span class="nx">isLeaf</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">p</span><span class="p">.</span><span class="nx">flags</span> <span class="o">|=</span> <span class="nx">leafPageFlag</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">p</span><span class="p">.</span><span class="nx">flags</span> <span class="o">|=</span> <span class="nx">branchPageFlag</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mh">0xFFFF</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;inode overflow: %d (pgid=%d)&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">),</span> <span class="nx">p</span><span class="p">.</span><span class="nx">id</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">count</span> <span class="p">=</span> <span class="nb">uint16</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Stop here if there are no items to write.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">p</span><span class="p">.</span><span class="nx">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Loop over each item and write it to the page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// b指向key/value或key的起始位置。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">b</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nx">maxAllocSize</span><span class="p">]</span><span class="kt">byte</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">ptr</span><span class="p">))[</span><span class="nx">n</span><span class="p">.</span><span class="nf">pageElementSize</span><span class="p">()</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">):]</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">item</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">_assert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#34;write: zero-length inode key&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Write the page element.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">n</span><span class="p">.</span><span class="nx">isLeaf</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">elem</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nf">leafPageElement</span><span class="p">(</span><span class="nb">uint16</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// pos为b与elem的地址差
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">elem</span><span class="p">.</span><span class="nx">pos</span> <span class="p">=</span> <span class="nb">uint32</span><span class="p">(</span><span class="nb">uintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">-</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">elem</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">elem</span><span class="p">.</span><span class="nx">flags</span> <span class="p">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">flags</span>
</span></span><span class="line"><span class="cl">			<span class="nx">elem</span><span class="p">.</span><span class="nx">ksize</span> <span class="p">=</span> <span class="nb">uint32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">key</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">elem</span><span class="p">.</span><span class="nx">vsize</span> <span class="p">=</span> <span class="nb">uint32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">value</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">elem</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nf">branchPageElement</span><span class="p">(</span><span class="nb">uint16</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">elem</span><span class="p">.</span><span class="nx">pos</span> <span class="p">=</span> <span class="nb">uint32</span><span class="p">(</span><span class="nb">uintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">-</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">elem</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">elem</span><span class="p">.</span><span class="nx">ksize</span> <span class="p">=</span> <span class="nb">uint32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">key</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">elem</span><span class="p">.</span><span class="nx">pgid</span> <span class="p">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">pgid</span>
</span></span><span class="line"><span class="cl">			<span class="nf">_assert</span><span class="p">(</span><span class="nx">elem</span><span class="p">.</span><span class="nx">pgid</span> <span class="o">!=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="s">&#34;write: circular dependency occurred&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// If the length of key+value is larger than the max allocation size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// then we need to reallocate the byte array pointer.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// See: https://github.com/boltdb/bolt/pull/335
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">klen</span><span class="p">,</span> <span class="nx">vlen</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">key</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="p">&lt;</span> <span class="nx">klen</span><span class="o">+</span><span class="nx">vlen</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">b</span> <span class="p">=</span> <span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nx">maxAllocSize</span><span class="p">]</span><span class="kt">byte</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]))[:]</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Write data for the element to the end of the page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// 复制key和value，然后更新b到下一个key/value或key的位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nb">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">:],</span> <span class="nx">item</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">b</span> <span class="p">=</span> <span class="nx">b</span><span class="p">[</span><span class="nx">klen</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">		<span class="nb">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">:],</span> <span class="nx">item</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">b</span> <span class="p">=</span> <span class="nx">b</span><span class="p">[</span><span class="nx">vlen</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// DEBUG ONLY: n.dump()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在插入删除KV时会先修改在内存中node结构，此时B+树可能是不平衡的，在事务提交时会进行rebalance和写盘。在删除key时，将二分找到的下标位置的元素删除，只会修改内存，在事务提交时才会实际刷新到磁盘。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// del removes a key from the node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">node</span><span class="p">)</span> <span class="nf">del</span><span class="p">(</span><span class="nx">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Find index of key.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">index</span> <span class="o">:=</span> <span class="nx">sort</span><span class="p">.</span><span class="nf">Search</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">),</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">bytes</span><span class="p">.</span><span class="nf">Compare</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">key</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Exit if the key isn&#39;t found.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">index</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">)</span> <span class="o">||</span> <span class="p">!</span><span class="nx">bytes</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">key</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Delete inode from the node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 从inodes中删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">[:</span><span class="nx">index</span><span class="p">],</span> <span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">[</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Mark the node as needing rebalancing.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">n</span><span class="p">.</span><span class="nx">unbalanced</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>插入key的实现类似，同样只会修改内存。</p>
<h2 id="bucket实现">Bucket实现</h2>
<p>boltdb中的Bucket相当于mysql的表，可以存储KV对。Bucket也支持嵌套。boltdb中有一个唯一的根Bucket，其他的Bucket都是它的子孙Bucket。在 <code>meta.root</code> 中存储根Bucket的root页id。在事务初始化时会用来设置事务的root.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// init initializes the transaction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">Tx</span><span class="p">)</span> <span class="nf">init</span><span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">DB</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tx</span><span class="p">.</span><span class="nx">db</span> <span class="p">=</span> <span class="nx">db</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tx</span><span class="p">.</span><span class="nx">pages</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Copy the meta page since it can be changed by the writer.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">meta</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">db</span><span class="p">.</span><span class="nf">meta</span><span class="p">().</span><span class="nb">copy</span><span class="p">(</span><span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Copy over the root bucket.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tx</span><span class="p">.</span><span class="nx">root</span> <span class="p">=</span> <span class="nf">newBucket</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tx</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">bucket</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">bucket</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置root
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="o">*</span><span class="nx">tx</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">bucket</span> <span class="p">=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">root</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Increment the transaction id and add a page cache for writable transactions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">writable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tx</span><span class="p">.</span><span class="nx">pages</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">pgid</span><span class="p">]</span><span class="o">*</span><span class="nx">page</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">txid</span> <span class="o">+=</span> <span class="nf">txid</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>每个子Bucket都存储在父Bucket的leaf页中，此时<code>leafPageElement.flags</code> 会设置为<code>bucketLeafFlag</code> 。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bucketLeafFlag</span> <span class="p">=</span> <span class="mh">0x01</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>磁盘上的bucket结构如下，主要字段为root页的page id。Bucket没有嵌套的Bucket且空间比较小时，不会分配一个完整的page来存储，而是直接存储到父Bucket的leaf页中，此时 <code>bucket.root</code> 为0.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// bucket represents the on-file representation of a bucket.
</span></span></span><span class="line"><span class="cl"><span class="c1">// This is stored as the &#34;value&#34; of a bucket key. If the bucket is small enough,
</span></span></span><span class="line"><span class="cl"><span class="c1">// then its root page can be stored inline in the &#34;value&#34;, after the bucket
</span></span></span><span class="line"><span class="cl"><span class="c1">// header. In the case of inline buckets, the &#34;root&#34; will be 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">bucket</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">root</span>     <span class="nx">pgid</span>   <span class="c1">// page id of the bucket&#39;s root-level page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sequence</span> <span class="kt">uint64</span> <span class="c1">// monotonically incrementing, used by NextSequence()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>内存中的Bucket结构如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Bucket represents a collection of key/value pairs inside the database.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Bucket</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">bucket</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tx</span>       <span class="o">*</span><span class="nx">Tx</span>                <span class="c1">// the associated transaction
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">buckets</span>  <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">Bucket</span> <span class="c1">// subbucket cache
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">page</span>     <span class="o">*</span><span class="nx">page</span>              <span class="c1">// inline page reference
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">rootNode</span> <span class="o">*</span><span class="nx">node</span>              <span class="c1">// materialized node for the root page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">nodes</span>    <span class="kd">map</span><span class="p">[</span><span class="nx">pgid</span><span class="p">]</span><span class="o">*</span><span class="nx">node</span>     <span class="c1">// node cache
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Sets the threshold for filling nodes when they split. By default,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// the bucket will fill to 50% but it can be useful to increase this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// amount if you know that your write workloads are mostly append-only.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// This is non-persisted across transactions so it must be set in every Tx.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">FillPercent</span> <span class="kt">float64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>创建Bucket</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// CreateBucket creates a new bucket at the given key and returns the new bucket.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Returns an error if the key already exists, if the bucket name is blank, or if the bucket name is too long.
</span></span></span><span class="line"><span class="cl"><span class="c1">// The bucket instance is only valid for the lifetime of the transaction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Bucket</span><span class="p">)</span> <span class="nf">CreateBucket</span><span class="p">(</span><span class="nx">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">Bucket</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">tx</span><span class="p">.</span><span class="nx">db</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">ErrTxClosed</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">tx</span><span class="p">.</span><span class="nx">writable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">ErrTxNotWritable</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">ErrBucketNameRequired</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Move cursor to correct position.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nf">Cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">k</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">flags</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">seek</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Return an error if there is an existing key.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">bytes</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">k</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// key已存在时报错，根据是否是bucket返回不同的错误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">(</span><span class="nx">flags</span> <span class="o">&amp;</span> <span class="nx">bucketLeafFlag</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">ErrBucketExists</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">ErrIncompatibleValue</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create empty, inline bucket.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">bucket</span> <span class="p">=</span> <span class="nx">Bucket</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">bucket</span><span class="p">:</span>      <span class="o">&amp;</span><span class="nx">bucket</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rootNode</span><span class="p">:</span>    <span class="o">&amp;</span><span class="nx">node</span><span class="p">{</span><span class="nx">isLeaf</span><span class="p">:</span> <span class="kc">true</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">FillPercent</span><span class="p">:</span> <span class="nx">DefaultFillPercent</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">value</span> <span class="p">=</span> <span class="nx">bucket</span><span class="p">.</span><span class="nf">write</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Insert into node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">key</span> <span class="p">=</span> <span class="nf">cloneBytes</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 写入到node中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nf">node</span><span class="p">().</span><span class="nf">put</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">bucketLeafFlag</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Since subbuckets are not allowed on inline buckets, we need to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// dereference the inline page, if it exists. This will cause the bucket
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// to be treated as a regular, non-inline bucket for the rest of the tx.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">b</span><span class="p">.</span><span class="nx">page</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 打开Bucket以返回Bucket对象。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nf">Bucket</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>创建Bucket的key和普通的KV在同一namespace中，不允许和普通的key重复。在实现中，将创建的Bucket转为byte[]然后写入到所在node中，然后再调用 <code>b.Bucket(key)</code>  返回Bucket对象。</p>
<p>打开Bucket的逻辑如下</p>
<ol>
<li>检查是否存在key，以及是否为Bucket</li>
<li>调用openBucket，反序列化为Bucket结构体。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Bucket retrieves a nested bucket by name.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Returns nil if the bucket does not exist.
</span></span></span><span class="line"><span class="cl"><span class="c1">// The bucket instance is only valid for the lifetime of the transaction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Bucket</span><span class="p">)</span> <span class="nf">Bucket</span><span class="p">(</span><span class="nx">name</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="o">*</span><span class="nx">Bucket</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buckets</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 如果在缓存中，直接返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">child</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buckets</span><span class="p">[</span><span class="nb">string</span><span class="p">(</span><span class="nx">name</span><span class="p">)];</span> <span class="nx">child</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">child</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Move cursor to key.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nf">Cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">k</span><span class="p">,</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">flags</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">seek</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Return nil if the key doesn&#39;t exist or it is not a bucket.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">bytes</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">k</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">flags</span><span class="o">&amp;</span><span class="nx">bucketLeafFlag</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Otherwise create a bucket and cache it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">child</span> <span class="p">=</span> <span class="nx">b</span><span class="p">.</span><span class="nf">openBucket</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buckets</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 设置到缓存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">b</span><span class="p">.</span><span class="nx">buckets</span><span class="p">[</span><span class="nb">string</span><span class="p">(</span><span class="nx">name</span><span class="p">)]</span> <span class="p">=</span> <span class="nx">child</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">child</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Helper method that re-interprets a sub-bucket value
</span></span></span><span class="line"><span class="cl"><span class="c1">// from a parent into a Bucket
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Bucket</span><span class="p">)</span> <span class="nf">openBucket</span><span class="p">(</span><span class="nx">value</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="o">*</span><span class="nx">Bucket</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">child</span> <span class="p">=</span> <span class="nf">newBucket</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">tx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If unaligned load/stores are broken on this arch and value is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// unaligned simply clone to an aligned byte array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">unaligned</span> <span class="o">:=</span> <span class="nx">brokenUnaligned</span> <span class="o">&amp;&amp;</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">value</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span><span class="o">&amp;</span><span class="mi">3</span> <span class="o">!=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">unaligned</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">value</span> <span class="p">=</span> <span class="nf">cloneBytes</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If this is a writable transaction then we need to copy the bucket entry.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Read-only transactions can point directly at the mmap entry.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">tx</span><span class="p">.</span><span class="nx">writable</span> <span class="o">&amp;&amp;</span> <span class="p">!</span><span class="nx">unaligned</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 写事务或者未对齐时，会分配新的内存并拷贝，否则直接指向mmap的内存。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">child</span><span class="p">.</span><span class="nx">bucket</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">bucket</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">		<span class="o">*</span><span class="nx">child</span><span class="p">.</span><span class="nx">bucket</span> <span class="p">=</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="nx">bucket</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">value</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">child</span><span class="p">.</span><span class="nx">bucket</span> <span class="p">=</span> <span class="p">(</span><span class="o">*</span><span class="nx">bucket</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">value</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Save a reference to the inline page if the bucket is inline.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 处理inline page。刚创建的Bucket必然为inline page。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">child</span><span class="p">.</span><span class="nx">root</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">child</span><span class="p">.</span><span class="nx">page</span> <span class="p">=</span> <span class="p">(</span><span class="o">*</span><span class="nx">page</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">value</span><span class="p">[</span><span class="nx">bucketHeaderSize</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">child</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="b树操作及维护">B+树操作及维护</h2>
<h3 id="cursor实现">Cursor实现</h3>
<p>在boltdb访问数据时，使用Cursor来查找数据或者实现遍历功能。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// elemRef represents a reference to an element on a given page/node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">elemRef</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">page</span>  <span class="o">*</span><span class="nx">page</span>  <span class="c1">// 页面
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">node</span>  <span class="o">*</span><span class="nx">node</span>  <span class="c1">// 打开的页面
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">index</span> <span class="kt">int</span>    <span class="c1">// 当前访问到的成员下标
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Cursor represents an iterator that can traverse over all key/value pairs in a bucket in sorted order.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Cursors see nested buckets with value == nil.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Cursor</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bucket</span> <span class="o">*</span><span class="nx">Bucket</span>    <span class="c1">// 指向的Bucket
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">stack</span>  <span class="p">[]</span><span class="nx">elemRef</span>  <span class="c1">// 访问栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Put 实现如下，基本逻辑为利用B+树的性质不断二分查找，直到到达leaf页，然后插入。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Put sets the value for a key in the bucket.
</span></span></span><span class="line"><span class="cl"><span class="c1">// If the key exist then its previous value will be overwritten.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Supplied value must remain valid for the life of the transaction.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Returns an error if the bucket was created from a read-only transaction, if the key is blank, if the key is too large, or if the value is too large.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Bucket</span><span class="p">)</span> <span class="nf">Put</span><span class="p">(</span><span class="nx">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">value</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">tx</span><span class="p">.</span><span class="nx">db</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ErrTxClosed</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">!</span><span class="nx">b</span><span class="p">.</span><span class="nf">Writable</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ErrTxNotWritable</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ErrKeyRequired</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">&gt;</span> <span class="nx">MaxKeySize</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ErrKeyTooLarge</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nb">int64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span> <span class="p">&gt;</span> <span class="nx">MaxValueSize</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ErrValueTooLarge</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Move cursor to correct position.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nf">Cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 定位到指定的key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">k</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">flags</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">seek</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Return an error if there is an existing key with a bucket value.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 如果key位置存在Bucket，则报错
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">bytes</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">k</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">flags</span><span class="o">&amp;</span><span class="nx">bucketLeafFlag</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ErrIncompatibleValue</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Insert into node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 之所以拷贝key不拷贝value，是因为value要求在事务结束前保持有效，而key没有这样的要求。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">key</span> <span class="p">=</span> <span class="nf">cloneBytes</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 更新或者插入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nf">node</span><span class="p">().</span><span class="nf">put</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>将Cursor定位到指定的key的实现如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// seek moves the cursor to a given key and returns it.
</span></span></span><span class="line"><span class="cl"><span class="c1">// If the key does not exist then the next key is used.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Cursor</span><span class="p">)</span> <span class="nf">seek</span><span class="p">(</span><span class="nx">seek</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">value</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">flags</span> <span class="kt">uint32</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">_assert</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nx">tx</span><span class="p">.</span><span class="nx">db</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;tx closed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Start from root page/node and traverse to correct page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 清空栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nx">stack</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">[:</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="nx">seek</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nx">root</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ref</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If the cursor is pointing to the end of page/node then return nil.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">index</span> <span class="o">&gt;=</span> <span class="nx">ref</span><span class="p">.</span><span class="nf">count</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If this is a bucket then return a nil value.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nf">keyValue</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// search recursively performs a binary search against a given page/node until it finds a given key.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Cursor</span><span class="p">)</span> <span class="nf">search</span><span class="p">(</span><span class="nx">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">pgid</span> <span class="nx">pgid</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 打开page，可能返回page或者node结构，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 因此后面分别有从page或者从node检索的逻辑。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 这里有个疑问是为什么没有统一为node，看node.read(p *page) 开销也不大。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 我理解是Bucket.node()实现会将其记录到Bucket.nodes中，用于B+树的平衡操作。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 对于读的场景，不需要做这些操作，因此没有统一逻辑。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">p</span><span class="p">,</span> <span class="nx">n</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nf">pageNode</span><span class="p">(</span><span class="nx">pgid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">p</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">flags</span><span class="o">&amp;</span><span class="p">(</span><span class="nx">branchPageFlag</span><span class="p">|</span><span class="nx">leafPageFlag</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;invalid page type: %d: %x&#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">flags</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span> <span class="o">:=</span> <span class="nx">elemRef</span><span class="p">{</span><span class="nx">page</span><span class="p">:</span> <span class="nx">p</span><span class="p">,</span> <span class="nx">node</span><span class="p">:</span> <span class="nx">n</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 加入到栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nx">stack</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If we&#39;re on a leaf page/node then find the specific node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">e</span><span class="p">.</span><span class="nf">isLeaf</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">nsearch</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">n</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">searchNode</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nf">searchPage</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// nsearch searches the leaf node on the top of the stack for a key.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Cursor</span><span class="p">)</span> <span class="nf">nsearch</span><span class="p">(</span><span class="nx">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">,</span> <span class="nx">n</span> <span class="o">:=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">page</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">node</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If we have a node then search its inodes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">n</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 二分查找
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">index</span> <span class="o">:=</span> <span class="nx">sort</span><span class="p">.</span><span class="nf">Search</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">),</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">bytes</span><span class="p">.</span><span class="nf">Compare</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">key</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="p">})</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 设置index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">e</span><span class="p">.</span><span class="nx">index</span> <span class="p">=</span> <span class="nx">index</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If we have a page then search its leaf elements.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">inodes</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nf">leafPageElements</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 使用page来二分查找
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">index</span> <span class="o">:=</span> <span class="nx">sort</span><span class="p">.</span><span class="nf">Search</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">count</span><span class="p">),</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">bytes</span><span class="p">.</span><span class="nf">Compare</span><span class="p">(</span><span class="nx">inodes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nf">key</span><span class="p">(),</span> <span class="nx">key</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">e</span><span class="p">.</span><span class="nx">index</span> <span class="p">=</span> <span class="nx">index</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Next实现如下，将Cursor移动到下一个key。boltdb的B+树中没有指针来指向相邻的叶子page，因此是通过栈回溯来找到相邻的叶子page的，主要还是为了避免无谓的page修改。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Next moves the cursor to the next item in the bucket and returns its key and value.
</span></span></span><span class="line"><span class="cl"><span class="c1">// If the cursor is at the end of the bucket then a nil key and value are returned.
</span></span></span><span class="line"><span class="cl"><span class="c1">// The returned key and value are only valid for the life of the transaction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Cursor</span><span class="p">)</span> <span class="nf">Next</span><span class="p">()</span> <span class="p">(</span><span class="nx">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">value</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">_assert</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nx">tx</span><span class="p">.</span><span class="nx">db</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;tx closed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">k</span><span class="p">,</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">flags</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="nx">flags</span> <span class="o">&amp;</span> <span class="nb">uint32</span><span class="p">(</span><span class="nx">bucketLeafFlag</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">k</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// next moves to the next leaf element and returns the key and value.
</span></span></span><span class="line"><span class="cl"><span class="c1">// If the cursor is at the last leaf element then it stays there and returns nil.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Cursor</span><span class="p">)</span> <span class="nf">next</span><span class="p">()</span> <span class="p">(</span><span class="nx">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">value</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">flags</span> <span class="kt">uint32</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Attempt to move over one element until we&#39;re successful.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// Move up the stack as we hit the end of each page in our stack.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="kd">var</span> <span class="nx">i</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">i</span> <span class="p">=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">elem</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">index</span> <span class="p">&lt;</span> <span class="nx">elem</span><span class="p">.</span><span class="nf">count</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// 如果任何一层还没完全访问，则将其index+1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">elem</span><span class="p">.</span><span class="nx">index</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">				<span class="k">break</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// If we&#39;ve hit the root page then stop and return. This will leave the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// cursor on the last element of the last page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 所有层都访问过了，即cursor在最后一个节点上
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Otherwise start from where we left off in the stack and find the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// first element of the first leaf page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">c</span><span class="p">.</span><span class="nx">stack</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">[:</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 移动到下面的第一个leaf节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">c</span><span class="p">.</span><span class="nf">first</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// If this is an empty page then restart and move back up the stack.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// https://github.com/boltdb/bolt/issues/450
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">count</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nf">keyValue</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// first moves the cursor to the first leaf element under the last page in the stack.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Cursor</span><span class="p">)</span> <span class="nf">first</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Exit when we hit a leaf page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="kd">var</span> <span class="nx">ref</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// leaf则break
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">ref</span><span class="p">.</span><span class="nf">isLeaf</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Keep adding pages pointing to the first element to the stack.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="kd">var</span> <span class="nx">pgid</span> <span class="nx">pgid</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">node</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">pgid</span> <span class="p">=</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">inodes</span><span class="p">[</span><span class="nx">ref</span><span class="p">.</span><span class="nx">index</span><span class="p">].</span><span class="nx">pgid</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">pgid</span> <span class="p">=</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">page</span><span class="p">.</span><span class="nf">branchPageElement</span><span class="p">(</span><span class="nb">uint16</span><span class="p">(</span><span class="nx">ref</span><span class="p">.</span><span class="nx">index</span><span class="p">)).</span><span class="nx">pgid</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">p</span><span class="p">,</span> <span class="nx">n</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nf">pageNode</span><span class="p">(</span><span class="nx">pgid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 访问下一层节点，设置下一层节点的index为0，从第一个开始访问。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">c</span><span class="p">.</span><span class="nx">stack</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">,</span> <span class="nx">elemRef</span><span class="p">{</span><span class="nx">page</span><span class="p">:</span> <span class="nx">p</span><span class="p">,</span> <span class="nx">node</span><span class="p">:</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">index</span><span class="p">:</span> <span class="mi">0</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Cursor的其他函数不再赘述，基本都是B+树的标准操作。</p>
<h3 id="b树-rebalance">B+树 rebalance</h3>
<p>在插入或删除key时，都是通过cursor.node()操作的.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">c</span><span class="p">.</span><span class="nf">node</span><span class="p">().</span><span class="nf">del</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 插入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">c</span><span class="p">.</span><span class="nf">node</span><span class="p">().</span><span class="nf">put</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>根据B+树的性质，访问路径上的page都有可能被修改，因此cursor.node()会将这些page都解析为node，并缓存到Bucket.nodes中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Cursor</span><span class="p">)</span> <span class="nf">node</span><span class="p">()</span> <span class="o">*</span><span class="nx">node</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">_assert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#34;accessing a node with a zero-length cursor stack&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If the top of the stack is a leaf node then just return it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">ref</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">node</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">ref</span><span class="p">.</span><span class="nf">isLeaf</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">node</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Start from root and traverse down the hierarchy.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">n</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">node</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">n</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nf">node</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">page</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ref</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">stack</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">_assert</span><span class="p">(!</span><span class="nx">n</span><span class="p">.</span><span class="nx">isLeaf</span><span class="p">,</span> <span class="s">&#34;expected branch node&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nf">childAt</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nx">ref</span><span class="p">.</span><span class="nx">index</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">_assert</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">isLeaf</span><span class="p">,</span> <span class="s">&#34;expected leaf node&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// node creates a node from a page and associates it with a given parent.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Bucket</span><span class="p">)</span> <span class="nf">node</span><span class="p">(</span><span class="nx">pgid</span> <span class="nx">pgid</span><span class="p">,</span> <span class="nx">parent</span> <span class="o">*</span><span class="nx">node</span><span class="p">)</span> <span class="o">*</span><span class="nx">node</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">_assert</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">nodes</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;nodes map expected&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Retrieve node if it&#39;s already been created.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">n</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">pgid</span><span class="p">];</span> <span class="nx">n</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Otherwise create a node and cache it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">n</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">node</span><span class="p">{</span><span class="nx">bucket</span><span class="p">:</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">parent</span><span class="p">:</span> <span class="nx">parent</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">parent</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">b</span><span class="p">.</span><span class="nx">rootNode</span> <span class="p">=</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">parent</span><span class="p">.</span><span class="nx">children</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">parent</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Use the inline page if this is an inline bucket.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">p</span> <span class="p">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">page</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">p</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">p</span> <span class="p">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">tx</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="nx">pgid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Read the page into the node and cache it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">n</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 纪录到缓存中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">b</span><span class="p">.</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">pgid</span><span class="p">]</span> <span class="p">=</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Update statistics.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">b</span><span class="p">.</span><span class="nx">tx</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">NodeCount</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>由上面的分析可见，在rebalance时只需要检查Bucket.nodes缓存中的node是否需要分裂或合并即可。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// rebalance attempts to balance all nodes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Bucket</span><span class="p">)</span> <span class="nf">rebalance</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">n</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">b</span><span class="p">.</span><span class="nx">nodes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 依次调用node.rebalance()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">n</span><span class="p">.</span><span class="nf">rebalance</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">child</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buckets</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 处理每个子Bucket
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">child</span><span class="p">.</span><span class="nf">rebalance</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>node rebalance实现</p>
<p>rebalance中会将过小的page和兄弟page合并，并不是通常意义上说的B+树的再平衡。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// rebalance attempts to combine the node with sibling nodes if the node fill
</span></span></span><span class="line"><span class="cl"><span class="c1">// size is below a threshold or if there are not enough keys.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">node</span><span class="p">)</span> <span class="nf">rebalance</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 在delete key时会设置unbalanced为true，而insert并不会设置。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 因此经过node.rebalance()后，node有可能会超过page大小，是在另外的地方处理的。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">n</span><span class="p">.</span><span class="nx">unbalanced</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">n</span><span class="p">.</span><span class="nx">unbalanced</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Update statistics.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">n</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nx">tx</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">Rebalance</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Ignore if node is above threshold (25%) and has enough keys.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">threshold</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">pageSize</span> <span class="o">/</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// node大小超过25%且有足够的key(leaf至少为1个，否则至少为2个）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">n</span><span class="p">.</span><span class="nf">size</span><span class="p">()</span> <span class="p">&gt;</span> <span class="nx">threshold</span> <span class="o">&amp;&amp;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">)</span> <span class="p">&gt;</span> <span class="nx">n</span><span class="p">.</span><span class="nf">minKeys</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Root node has special handling.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">n</span><span class="p">.</span><span class="nx">parent</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// If root node is a branch and only has one node then collapse it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">n</span><span class="p">.</span><span class="nx">isLeaf</span> <span class="o">&amp;&amp;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Move root&#39;s child up.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// 将child移动到root节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">child</span> <span class="o">:=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nf">node</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">pgid</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">n</span><span class="p">.</span><span class="nx">isLeaf</span> <span class="p">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">isLeaf</span>
</span></span><span class="line"><span class="cl">			<span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span> <span class="p">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">inodes</span><span class="p">[:]</span>
</span></span><span class="line"><span class="cl">			<span class="nx">n</span><span class="p">.</span><span class="nx">children</span> <span class="p">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">children</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="c1">// Reparent all child nodes being moved.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">inode</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">child</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">inode</span><span class="p">.</span><span class="nx">pgid</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">child</span><span class="p">.</span><span class="nx">parent</span> <span class="p">=</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="c1">// Remove old child.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">child</span><span class="p">.</span><span class="nx">parent</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">			<span class="nb">delete</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nx">nodes</span><span class="p">,</span> <span class="nx">child</span><span class="p">.</span><span class="nx">pgid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">child</span><span class="p">.</span><span class="nf">free</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If node has no keys then just remove it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">n</span><span class="p">.</span><span class="nf">numChildren</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">del</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">removeChild</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nb">delete</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nx">nodes</span><span class="p">,</span> <span class="nx">n</span><span class="p">.</span><span class="nx">pgid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span><span class="p">.</span><span class="nf">free</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">rebalance</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">_assert</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">numChildren</span><span class="p">()</span> <span class="p">&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#34;parent must have at least 2 children&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Destination node is right sibling if idx == 0, otherwise left sibling.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">target</span> <span class="o">*</span><span class="nx">node</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">useNextSibling</span> <span class="p">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">childIndex</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">useNextSibling</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">target</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nf">nextSibling</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">target</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nf">prevSibling</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If both this node and the target node are too small then merge them.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 直接合并，后面再做split
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">useNextSibling</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Reparent all child nodes being moved.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">inode</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">target</span><span class="p">.</span><span class="nx">inodes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">child</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">inode</span><span class="p">.</span><span class="nx">pgid</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">child</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">removeChild</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">child</span><span class="p">.</span><span class="nx">parent</span> <span class="p">=</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl">				<span class="nx">child</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">children</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span> <span class="nx">child</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Copy over inodes from target and remove target.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="p">,</span> <span class="nx">target</span><span class="p">.</span><span class="nx">inodes</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">del</span><span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">removeChild</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nb">delete</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nx">nodes</span><span class="p">,</span> <span class="nx">target</span><span class="p">.</span><span class="nx">pgid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">target</span><span class="p">.</span><span class="nf">free</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Reparent all child nodes being moved.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">inode</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">child</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">inode</span><span class="p">.</span><span class="nx">pgid</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">child</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">removeChild</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">child</span><span class="p">.</span><span class="nx">parent</span> <span class="p">=</span> <span class="nx">target</span>
</span></span><span class="line"><span class="cl">				<span class="nx">child</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">children</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span> <span class="nx">child</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Copy over inodes to target and remove node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">target</span><span class="p">.</span><span class="nx">inodes</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">inodes</span><span class="p">,</span> <span class="nx">n</span><span class="p">.</span><span class="nx">inodes</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">del</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">removeChild</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nb">delete</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nx">nodes</span><span class="p">,</span> <span class="nx">n</span><span class="p">.</span><span class="nx">pgid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span><span class="p">.</span><span class="nf">free</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Either this node or the target node was deleted from the parent so rebalance it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 经过删除后，parent也需要rebalance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">rebalance</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的node.rebalance完成后，有可能有node的大小超过page size，一方面rebalance并不会处理插入元素，另一方面，rebalance时可能会合并兄弟节点。这个问题是在准备分配脏页时处理的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// spill writes the nodes to dirty pages and splits nodes as it goes.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Returns an error if dirty pages cannot be allocated.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">node</span><span class="p">)</span> <span class="nf">spill</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">tx</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">bucket</span><span class="p">.</span><span class="nx">tx</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 已经分配过，直接返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">n</span><span class="p">.</span><span class="nx">spilled</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Spill child nodes first. Child nodes can materialize sibling nodes in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// the case of split-merge so we cannot use a range loop. We have to check
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// the children size on every loop iteration.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sort</span><span class="p">.</span><span class="nf">Sort</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">children</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nf">spill</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// We no longer need the child list because it&#39;s only used for spill tracking.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">n</span><span class="p">.</span><span class="nx">children</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Split nodes into appropriate sizes. The first node will always be n.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 根据page size有可能分裂成多个页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">nodes</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">pageSize</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">node</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Add node&#39;s page to the freelist if it&#39;s not new.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">node</span><span class="p">.</span><span class="nx">pgid</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">freelist</span><span class="p">.</span><span class="nf">free</span><span class="p">(</span><span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">txid</span><span class="p">,</span> <span class="nx">tx</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">pgid</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">node</span><span class="p">.</span><span class="nx">pgid</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Allocate contiguous space for the node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// 为每个page分配新页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">p</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nf">allocate</span><span class="p">((</span><span class="nx">node</span><span class="p">.</span><span class="nf">size</span><span class="p">()</span> <span class="o">/</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">pageSize</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Write the node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">p</span><span class="p">.</span><span class="nx">id</span> <span class="o">&gt;=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">pgid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;pgid (%d) above high water mark (%d)&#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">pgid</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">node</span><span class="p">.</span><span class="nx">pgid</span> <span class="p">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">id</span>
</span></span><span class="line"><span class="cl">		<span class="nx">node</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">node</span><span class="p">.</span><span class="nx">spilled</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Insert into parent inodes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">node</span><span class="p">.</span><span class="nx">parent</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">key</span> <span class="p">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">key</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">key</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">key</span> <span class="p">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">inodes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">key</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 更新到parent中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">node</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">node</span><span class="p">.</span><span class="nx">inodes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">key</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">node</span><span class="p">.</span><span class="nx">pgid</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">node</span><span class="p">.</span><span class="nx">key</span> <span class="p">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">inodes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">key</span>
</span></span><span class="line"><span class="cl">			<span class="nf">_assert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#34;spill: zero-length node key&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Update the statistics.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">tx</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">Spill</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If the root node split and created a new root then we need to spill that
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// as well. We&#39;ll clear out the children to make sure it doesn&#39;t try to respill.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">n</span><span class="p">.</span><span class="nx">parent</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">pgid</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span><span class="p">.</span><span class="nx">children</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">spill</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>分配脏页时，会将超过page size的页拆分为多个页，这是基于磁盘page的B+树与内存B+树的不同点之一，而内存中的B+树一般是有固定的key数的，超过key数时才需要拆分。</p>
<h2 id="事务处理">事务处理</h2>
<p>boltdb任一时刻只允许一个写事务，但允许多个读事务同时运行。由于采用了append only B+ tree实现，写事务不会更新已有的数据页，因此写事务运行时多个读事务也可以正常进行。</p>
<h3 id="读事务">读事务</h3>
<p>boltdb提供了View函数来方便执行读事务，不管成功还是失败最后都会调用Rollback来关闭事务。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// View executes a function within the context of a managed read-only transaction.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Any error that is returned from the function is returned from the View() method.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// Attempting to manually rollback within the function will cause a panic.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">DB</span><span class="p">)</span> <span class="nf">View</span><span class="p">(</span><span class="nx">fn</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">t</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Begin</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Make sure the transaction rolls back in the event of a panic.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">t</span><span class="p">.</span><span class="nx">db</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">t</span><span class="p">.</span><span class="nf">rollback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Mark as a managed tx so that the inner function cannot manually rollback.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">t</span><span class="p">.</span><span class="nx">managed</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If an error is returned from the function then pass it through.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">err</span> <span class="p">=</span> <span class="nf">fn</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">t</span><span class="p">.</span><span class="nx">managed</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">t</span><span class="p">.</span><span class="nf">Rollback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 用来释放page页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">.</span><span class="nf">Rollback</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">DB</span><span class="p">)</span> <span class="nf">beginTx</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">Tx</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Lock the meta pages while we initialize the transaction. We obtain
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// the meta lock before the mmap lock because that&#39;s the order that the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// write transaction will obtain them.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">.</span><span class="nx">metalock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Obtain a read-only lock on the mmap. When the mmap is remapped it will
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// obtain a write lock so all transactions must finish before it can be
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// remapped.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 读事务运行时会一直持有mmaplock的读锁，一般不会block写事务。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 长时间执行的读事务为了防止block写事务，需要设置InitialMmapSize为比较大的值，以便让写事务不需要重新mmap。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">.</span><span class="nx">mmaplock</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Exit if the database is not open yet.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">db</span><span class="p">.</span><span class="nx">opened</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">db</span><span class="p">.</span><span class="nx">mmaplock</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">db</span><span class="p">.</span><span class="nx">metalock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">ErrDatabaseNotOpen</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create a transaction associated with the database.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">t</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Tx</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">t</span><span class="p">.</span><span class="nf">init</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Keep track of transaction until it closes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 记录运行中的读事务，用于安全的释放page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">.</span><span class="nx">txs</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">db</span><span class="p">.</span><span class="nx">txs</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">n</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">db</span><span class="p">.</span><span class="nx">txs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Unlock the meta pages.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">.</span><span class="nx">metalock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Update the transaction stats.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">.</span><span class="nx">statlock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">db</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">TxN</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">	<span class="nx">db</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">OpenTxN</span> <span class="p">=</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl">	<span class="nx">db</span><span class="p">.</span><span class="nx">statlock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">t</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>读事务执行完成后，需要关闭事务，以便释放资源。读事务是通过调用Rollback来关闭。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">Tx</span><span class="p">)</span> <span class="nb">close</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">db</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">writable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nf">removeTx</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Clear all references.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tx</span><span class="p">.</span><span class="nx">db</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tx</span><span class="p">.</span><span class="nx">root</span> <span class="p">=</span> <span class="nx">Bucket</span><span class="p">{</span><span class="nx">tx</span><span class="p">:</span> <span class="nx">tx</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tx</span><span class="p">.</span><span class="nx">pages</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// removeTx removes a transaction from the database.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">DB</span><span class="p">)</span> <span class="nf">removeTx</span><span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">Tx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Release the read lock on the mmap.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 释放mmap读锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">.</span><span class="nx">mmaplock</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Use the meta lock to restrict access to the DB object.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">.</span><span class="nx">metalock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Remove the transaction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 移除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">t</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">db</span><span class="p">.</span><span class="nx">txs</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">t</span> <span class="o">==</span> <span class="nx">tx</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">last</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">db</span><span class="p">.</span><span class="nx">txs</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">			<span class="nx">db</span><span class="p">.</span><span class="nx">txs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">txs</span><span class="p">[</span><span class="nx">last</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="nx">db</span><span class="p">.</span><span class="nx">txs</span><span class="p">[</span><span class="nx">last</span><span class="p">]</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">			<span class="nx">db</span><span class="p">.</span><span class="nx">txs</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">txs</span><span class="p">[:</span><span class="nx">last</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">n</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">db</span><span class="p">.</span><span class="nx">txs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Unlock the meta pages.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">.</span><span class="nx">metalock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Merge statistics.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">.</span><span class="nx">statlock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">db</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">OpenTxN</span> <span class="p">=</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl">	<span class="nx">db</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">TxStats</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">tx</span><span class="p">.</span><span class="nx">stats</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">db</span><span class="p">.</span><span class="nx">statlock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="写事务">写事务</h3>
<p>boltdb提供了Update函数来方便执行写事务，在成功时自动Commit，在失败时自动回滚。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Update executes a function within the context of a read-write managed transaction.
</span></span></span><span class="line"><span class="cl"><span class="c1">// If no error is returned from the function then the transaction is committed.
</span></span></span><span class="line"><span class="cl"><span class="c1">// If an error is returned then the entire transaction is rolled back.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Any error that is returned from the function or returned from the commit is
</span></span></span><span class="line"><span class="cl"><span class="c1">// returned from the Update() method.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// Attempting to manually commit or rollback within the function will cause a panic.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">DB</span><span class="p">)</span> <span class="nf">Update</span><span class="p">(</span><span class="nx">fn</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">t</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Begin</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Make sure the transaction rolls back in the event of a panic.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">t</span><span class="p">.</span><span class="nx">db</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">t</span><span class="p">.</span><span class="nf">rollback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Mark as a managed tx so that the inner function cannot manually commit.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">t</span><span class="p">.</span><span class="nx">managed</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If an error is returned from the function then rollback and return error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">err</span> <span class="p">=</span> <span class="nf">fn</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">t</span><span class="p">.</span><span class="nx">managed</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span> <span class="p">=</span> <span class="nx">t</span><span class="p">.</span><span class="nf">Rollback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nf">Commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 开始写事务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">DB</span><span class="p">)</span> <span class="nf">beginRWTx</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">Tx</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// If the database was opened with Options.ReadOnly, return an error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">db</span><span class="p">.</span><span class="nx">readOnly</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">ErrDatabaseReadOnly</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Obtain writer lock. This is released by the transaction when it closes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// This enforces only one writer transaction at a time.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 限制只能有一个写事务在同时运行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">.</span><span class="nx">rwlock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Once we have the writer lock then we can lock the meta pages so that
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// we can set up the transaction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">db</span><span class="p">.</span><span class="nx">metalock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">db</span><span class="p">.</span><span class="nx">metalock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Exit if the database is not open yet.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">db</span><span class="p">.</span><span class="nx">opened</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">db</span><span class="p">.</span><span class="nx">rwlock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">ErrDatabaseNotOpen</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create a transaction associated with the database.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">t</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Tx</span><span class="p">{</span><span class="nx">writable</span><span class="p">:</span> <span class="kc">true</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 写事务在init中初始化pages map，用来记录需要写的page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 在tx.allocate中会执行 tx.pages[p.id] = p
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">t</span><span class="p">.</span><span class="nf">init</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">db</span><span class="p">.</span><span class="nx">rwtx</span> <span class="p">=</span> <span class="nx">t</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Free any pages associated with closed read-only transactions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">minid</span> <span class="nx">txid</span> <span class="p">=</span> <span class="mh">0xFFFFFFFFFFFFFFFF</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">t</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">db</span><span class="p">.</span><span class="nx">txs</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">t</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">txid</span> <span class="p">&lt;</span> <span class="nx">minid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">minid</span> <span class="p">=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">txid</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">minid</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 释放已经执行完的事务用到的page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">db</span><span class="p">.</span><span class="nx">freelist</span><span class="p">.</span><span class="nf">release</span><span class="p">(</span><span class="nx">minid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">t</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>回滚事务的逻辑相对简单</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">Tx</span><span class="p">)</span> <span class="nf">rollback</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">db</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">writable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 回滚写事务即将释放的页，这些页本来要释放成空闲页，改为不释放了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">freelist</span><span class="p">.</span><span class="nf">rollback</span><span class="p">(</span><span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">txid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 重新加载空闲页列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">freelist</span><span class="p">.</span><span class="nf">reload</span><span class="p">(</span><span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nf">meta</span><span class="p">().</span><span class="nx">freelist</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tx</span><span class="p">.</span><span class="nb">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">Tx</span><span class="p">)</span> <span class="nb">close</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">db</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">writable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Remove transaction ref &amp; writer lock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">rwtx</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 释放锁，以便让其他写事务执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">rwlock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Merge statistics.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">statlock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 更新一些统计信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">statlock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nf">removeTx</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Clear all references.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tx</span><span class="p">.</span><span class="nx">db</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tx</span><span class="p">.</span><span class="nx">root</span> <span class="p">=</span> <span class="nx">Bucket</span><span class="p">{</span><span class="nx">tx</span><span class="p">:</span> <span class="nx">tx</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tx</span><span class="p">.</span><span class="nx">pages</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>提交事务的实现如下</p>
<ol>
<li>调用rebalance来合并过小的页</li>
<li>调用splil来分配脏页，并split过大的页</li>
<li>分配新的freelist页，写盘</li>
<li>脏页写盘</li>
<li>写入新的meta页</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Commit writes all changes to disk and updates the meta page.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Returns an error if a disk write error occurs, or if Commit is
</span></span></span><span class="line"><span class="cl"><span class="c1">// called on a read-only transaction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">Tx</span><span class="p">)</span> <span class="nf">Commit</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">_assert</span><span class="p">(!</span><span class="nx">tx</span><span class="p">.</span><span class="nx">managed</span><span class="p">,</span> <span class="s">&#34;managed tx commit not allowed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">db</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ErrTxClosed</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">!</span><span class="nx">tx</span><span class="p">.</span><span class="nx">writable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ErrTxNotWritable</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// TODO(benbjohnson): Use vectorized I/O to write out dirty pages.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Rebalance nodes which have had deletions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">startTime</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 调用rebalance来合并过小的page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tx</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nf">rebalance</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">Rebalance</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tx</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">RebalanceTime</span> <span class="o">+=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Since</span><span class="p">(</span><span class="nx">startTime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// spill data onto dirty pages.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">startTime</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 调用Bucket.spill来分配脏页，并split过大的页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nf">spill</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tx</span><span class="p">.</span><span class="nf">rollback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tx</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">SpillTime</span> <span class="o">+=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Since</span><span class="p">(</span><span class="nx">startTime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Free the old root bucket.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">root</span> <span class="p">=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">root</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">opgid</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">pgid</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Free the freelist and allocate new pages for it. This will overestimate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// the size of the freelist but not underestimate the size (which would be bad).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">freelist</span><span class="p">.</span><span class="nf">free</span><span class="p">(</span><span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">txid</span><span class="p">,</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">freelist</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 分配新的freelist页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">p</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nf">allocate</span><span class="p">((</span><span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">freelist</span><span class="p">.</span><span class="nf">size</span><span class="p">()</span> <span class="o">/</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">pageSize</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tx</span><span class="p">.</span><span class="nf">rollback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 写入freelist页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">freelist</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tx</span><span class="p">.</span><span class="nf">rollback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">freelist</span> <span class="p">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">id</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If the high water mark has moved up then attempt to grow the database.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 如果文件变大了，则调用truncate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">pgid</span> <span class="p">&gt;</span> <span class="nx">opgid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nf">grow</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">pgid</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">pageSize</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">tx</span><span class="p">.</span><span class="nf">rollback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Write dirty pages to disk.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">startTime</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 将涉及的脏页调用write写盘，并将没有overflow的内存page加入page pool中以便后续重用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nf">write</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tx</span><span class="p">.</span><span class="nf">rollback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If strict mode is enabled then perform a consistency check.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Only the first consistency error is reported in the panic.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">StrictMode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ch</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nf">Check</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">errs</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">err</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">break</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">errs</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">errs</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">errs</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">panic</span><span class="p">(</span><span class="s">&#34;check fail: &#34;</span> <span class="o">+</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">errs</span><span class="p">,</span> <span class="s">&#34;\n&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Write meta to disk.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 写入meta页
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nf">writeMeta</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tx</span><span class="p">.</span><span class="nf">rollback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tx</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">WriteTime</span> <span class="o">+=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Since</span><span class="p">(</span><span class="nx">startTime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Finalize the transaction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tx</span><span class="p">.</span><span class="nb">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Execute commit handlers now that the locks have been removed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">fn</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">commitHandlers</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">fn</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Bucket的spill实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// spill writes all the nodes for this bucket to dirty pages.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">Bucket</span><span class="p">)</span> <span class="nf">spill</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Spill all child buckets first.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">child</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buckets</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// If the child bucket is small enough and it has no child buckets then
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// write it inline into the parent bucket&#39;s page. Otherwise spill it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// like a normal bucket and make the parent value a pointer to the page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="kd">var</span> <span class="nx">value</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">child</span><span class="p">.</span><span class="nf">inlineable</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">child</span><span class="p">.</span><span class="nf">free</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 内嵌页处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">value</span> <span class="p">=</span> <span class="nx">child</span><span class="p">.</span><span class="nf">write</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 对child bucket调用spill
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">child</span><span class="p">.</span><span class="nf">spill</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="c1">// Update the child bucket header in this bucket.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">value</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nf">Sizeof</span><span class="p">(</span><span class="nx">bucket</span><span class="p">{}))</span>
</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">bucket</span> <span class="p">=</span> <span class="p">(</span><span class="o">*</span><span class="nx">bucket</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">value</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">			<span class="o">*</span><span class="nx">bucket</span> <span class="p">=</span> <span class="o">*</span><span class="nx">child</span><span class="p">.</span><span class="nx">bucket</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Skip writing the bucket if there are no materialized nodes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">child</span><span class="p">.</span><span class="nx">rootNode</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Update parent node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="kd">var</span> <span class="nx">c</span> <span class="p">=</span> <span class="nx">b</span><span class="p">.</span><span class="nf">Cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">k</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">flags</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">seek</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">bytes</span><span class="p">.</span><span class="nf">Equal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">name</span><span class="p">),</span> <span class="nx">k</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;misplaced bucket header: %x -&gt; %x&#34;</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">name</span><span class="p">),</span> <span class="nx">k</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">flags</span><span class="o">&amp;</span><span class="nx">bucketLeafFlag</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;unexpected bucket header flag: %x&#34;</span><span class="p">,</span> <span class="nx">flags</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 写入node中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">c</span><span class="p">.</span><span class="nf">node</span><span class="p">().</span><span class="nf">put</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">name</span><span class="p">),</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">name</span><span class="p">),</span> <span class="nx">value</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">bucketLeafFlag</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Ignore if there&#39;s not a materialized root node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">rootNode</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Spill nodes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 调用node.spill
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">rootNode</span><span class="p">.</span><span class="nf">spill</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">b</span><span class="p">.</span><span class="nx">rootNode</span> <span class="p">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">rootNode</span><span class="p">.</span><span class="nf">root</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Update the root node for this bucket.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">rootNode</span><span class="p">.</span><span class="nx">pgid</span> <span class="o">&gt;=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">pgid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;pgid (%d) above high water mark (%d)&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">rootNode</span><span class="p">.</span><span class="nx">pgid</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">tx</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">pgid</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">b</span><span class="p">.</span><span class="nx">root</span> <span class="p">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">rootNode</span><span class="p">.</span><span class="nx">pgid</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="mvcc">MVCC</h3>
<p>多版本并发控制(MVCC)是指数据库中同时保存数据的多个版本，以便支持多个事务的隔离和同时运行。写事务并不会直接修改数据，而是创建数据的一个新版本。</p>
<p>在boltdb中，支持多个读事务同时运行，任一时间只有一个写事务能够运行。从上面的事务处理分析可见，写事务并不会修改已有的page，而是分配新的page然后写入，因此同时运行的读事务可以继续访问老版本的数据而不受影响。写事务在提交时会修改meta页，此后创建的读写事务会用最新meta页来初始化事务，也就可以读到最新版本的数据。</p>
<h2 id="crash-recovery">crash recovery</h2>
<p>boltdb没有做专门的crash recovery，是通过控制修改的顺序来保证数据完整性的，先写入树结构，再写入meta页。在写事务提交过程中机器宕机时，如果meta页还未修改，会用之前的状态重新打开DB，如果meta页写入不完整，会用另一个meta页来重新打开DB。需要注意的是，对于mmap而言，仅控制写入的并不能保证同步到磁盘的顺序，因此boltdb实现时都有显式的调用<code>fdatasync</code> ，保证前面的修改同步到磁盘后才进行后面的操作。</p>
<h2 id="总结">总结</h2>
<p>boltdb代码还是很值得阅读和学习的，通过4000行左右的代码，实现了高效的KV数据库。</p>
<ul>
<li>boltdb借助mmap来简化buffer管理器的实现，通过控制写盘顺序而不需要专门的crash recovery处理。</li>
<li>boltdb实现了append only B+树。</li>
<li>boltdb的页分配算法比较巧妙的是只会分配连续的页，简化了后续的处理逻辑。</li>
</ul>
<p>参考资料</p>
<ul>
<li><a href="https://github.com/jaydenwen123/boltdb_book/blob/master/boltdb%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">boltdb_book/boltdb源码分析.md at master · jaydenwen123/boltdb_book · GitHub</a></li>
<li><a href="https://www.codedump.info/post/20200625-boltdb-1/">boltdb 1.3.0实现分析（一） - codedump的网络日志</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>braft源码分析</title>
      <link>https://egolearner.github.io/post/braft-source-read/</link>
      <pubDate>Sun, 23 Oct 2022 15:44:11 +0800</pubDate>
      
      <guid>https://egolearner.github.io/post/braft-source-read/</guid>
      <description>&lt;p&gt;brat是百度开源的RAFT实现。&lt;/p&gt;
&lt;h2 id=&#34;初始化&#34;&gt;初始化&lt;/h2&gt;
&lt;p&gt;braft::add_service添加的服务&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
      <content:encoded><![CDATA[<p>brat是百度开源的RAFT实现。</p>
<h2 id="初始化">初始化</h2>
<p>braft::add_service添加的服务</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">    <span class="c1">// 发送文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">server</span><span class="o">-&gt;</span><span class="n">AddService</span><span class="p">(</span><span class="n">file_service</span><span class="p">(),</span> <span class="n">brpc</span><span class="o">::</span><span class="n">SERVER_DOESNT_OWN_SERVICE</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// raft实现，pre_vote/request_vote/append_entries/install_snapshot/timeout_now
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">server</span><span class="o">-&gt;</span><span class="n">AddService</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="k">new</span> <span class="n">RaftServiceImpl</span><span class="p">(</span><span class="n">listen_address</span><span class="p">),</span> 
</span></span><span class="line"><span class="cl">                <span class="n">brpc</span><span class="o">::</span><span class="n">SERVER_OWNS_SERVICE</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 统计信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">server</span><span class="o">-&gt;</span><span class="n">AddService</span><span class="p">(</span><span class="k">new</span> <span class="n">RaftStatImpl</span><span class="p">,</span> <span class="n">brpc</span><span class="o">::</span><span class="n">SERVER_OWNS_SERVICE</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 命令行操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">server</span><span class="o">-&gt;</span><span class="n">AddService</span><span class="p">(</span><span class="k">new</span> <span class="n">CliServiceImpl</span><span class="p">,</span> <span class="n">brpc</span><span class="o">::</span><span class="n">SERVER_OWNS_SERVICE</span><span class="p">))</span> <span class="p">{</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>NodeImpl::init</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">    <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">_vote_timer</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">options</span><span class="p">.</span><span class="n">election_timeout_ms</span> <span class="o">+</span> <span class="n">options</span><span class="p">.</span><span class="n">max_clock_drift_ms</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">_election_timer</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">options</span><span class="p">.</span><span class="n">election_timeout_ms</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">_stepdown_timer</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">options</span><span class="p">.</span><span class="n">election_timeout_ms</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">_snapshot_timer</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">options</span><span class="p">.</span><span class="n">snapshot_interval_s</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 启动执行队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">bthread</span><span class="o">::</span><span class="n">execution_queue_start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_apply_queue_id</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                       <span class="n">execute_applying_tasks</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// log storage and log manager init
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">init_log_storage</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化fsm caller时创建了另外一个执行队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">init_fsm_caller</span><span class="p">(</span><span class="n">LogId</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// commitment manager init
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_ballot_box</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BallotBox</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_ballot_box</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">(</span><span class="n">ballot_box_options</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// snapshot storage init and load
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">init_snapshot_storage</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// if have log using conf in log, else using conf in options
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">last_log_index</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">check_and_set_configuration</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_conf</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_conf</span><span class="p">.</span><span class="n">conf</span> <span class="o">=</span> <span class="n">_options</span><span class="p">.</span><span class="n">initial_conf</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// init meta and check term
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">init_meta_storage</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Now the raft node is started , have to acquire the lock to avoid race
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// conditions
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">raft_mutex_t</span><span class="o">&gt;</span> <span class="n">lck</span><span class="p">(</span><span class="n">_mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 只有一个节点时马上选举自己
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">_conf</span><span class="p">.</span><span class="n">stable</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">_conf</span><span class="p">.</span><span class="n">conf</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1u</span>
</span></span><span class="line"><span class="cl">            <span class="o">&amp;&amp;</span> <span class="n">_conf</span><span class="p">.</span><span class="n">conf</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">_server_id</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// The group contains only this server which must be the LEADER, trigger
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// the timer immediately.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">elect_self</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lck</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="选举阶段"><strong><strong>选举阶段</strong></strong></h2>
<p>选举超时处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">handle_election_timeout</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">raft_mutex_t</span><span class="o">&gt;</span> <span class="n">lck</span><span class="p">(</span><span class="n">_mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// check state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">_state</span> <span class="o">!=</span> <span class="n">STATE_FOLLOWER</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Trigger vote manually, or wait until follower lease expire.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_vote_triggered</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">_follower_lease</span><span class="p">.</span><span class="n">expired</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">triggered</span> <span class="o">=</span> <span class="n">_vote_triggered</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_vote_triggered</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Reset leader as the leader is uncerntain on election timeout.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">PeerId</span> <span class="n">empty_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">butil</span><span class="o">::</span><span class="n">Status</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">status</span><span class="p">.</span><span class="n">set_error</span><span class="p">(</span><span class="n">ERAFTTIMEDOUT</span><span class="p">,</span> <span class="s">&#34;Lost connection from leader %s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">_leader_id</span><span class="p">.</span><span class="n">to_string</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 里面会根据情况情况回调on_start_following/on_stop_following
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">reset_leader_id</span><span class="p">(</span><span class="n">empty_id</span><span class="p">,</span> <span class="n">status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 发起预选举
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="nf">pre_vote</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lck</span><span class="p">,</span> <span class="n">triggered</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Don&#39;t touch any thing of *this ever after
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="pre_vote">pre_vote</h3>
<p>Pre_vote 算法是 raft 作者在其博士论文中提出的，在节点发起一次选举时，会先发起一次 prevote 请求，判断是否能够赢得选举，赢得选举的条件与正常选举相同。如果可以，则增加 term 值，并发起正常的选举。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">pre_vote</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">raft_mutex_t</span><span class="o">&gt;*</span> <span class="n">lck</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">triggered</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取last log的term和id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int64_t</span> <span class="n">old_term</span> <span class="o">=</span> <span class="n">_current_term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// get last_log_id outof node mutex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">lck</span><span class="o">-&gt;</span><span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="n">LogId</span> <span class="n">last_log_id</span> <span class="o">=</span> <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">last_log_id</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">lck</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// pre_vote need defense ABA after unlock&amp;lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">old_term</span> <span class="o">!=</span> <span class="n">_current_term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">LOG</span><span class="p">(</span><span class="n">WARNING</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;node &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_group_id</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;:&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_server_id</span>
</span></span><span class="line"><span class="cl">                     <span class="o">&lt;&lt;</span> <span class="s">&#34; raise term &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_current_term</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; when get last_log_id&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">_pre_vote_ctx</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">triggered</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">PeerId</span><span class="o">&gt;</span> <span class="n">peers</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_conf</span><span class="p">.</span><span class="n">list_peers</span><span class="p">(</span><span class="o">&amp;</span><span class="n">peers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 向所有peer发送pre_vote请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">PeerId</span><span class="o">&gt;::</span><span class="n">const_iterator</span>
</span></span><span class="line"><span class="cl">            <span class="n">iter</span> <span class="o">=</span> <span class="n">peers</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">iter</span> <span class="o">!=</span> <span class="n">peers</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">iter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">iter</span> <span class="o">==</span> <span class="n">_server_id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">OnPreVoteRPCDone</span><span class="o">*</span> <span class="n">done</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OnPreVoteRPCDone</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="o">*</span><span class="n">iter</span><span class="p">,</span> <span class="n">_current_term</span><span class="p">,</span> <span class="n">_pre_vote_ctx</span><span class="p">.</span><span class="n">version</span><span class="p">(),</span> <span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">done</span><span class="o">-&gt;</span><span class="n">cntl</span><span class="p">.</span><span class="n">set_timeout_ms</span><span class="p">(</span><span class="n">_options</span><span class="p">.</span><span class="n">election_timeout_ms</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">done</span><span class="o">-&gt;</span><span class="n">request</span><span class="p">.</span><span class="n">set_term</span><span class="p">(</span><span class="n">_current_term</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// next term
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">done</span><span class="o">-&gt;</span><span class="n">request</span><span class="p">.</span><span class="n">set_last_log_index</span><span class="p">(</span><span class="n">last_log_id</span><span class="p">.</span><span class="n">index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">done</span><span class="o">-&gt;</span><span class="n">request</span><span class="p">.</span><span class="n">set_last_log_term</span><span class="p">(</span><span class="n">last_log_id</span><span class="p">.</span><span class="n">term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">RaftService_Stub</span> <span class="nf">stub</span><span class="p">(</span><span class="o">&amp;</span><span class="n">channel</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">stub</span><span class="p">.</span><span class="n">pre_vote</span><span class="p">(</span><span class="o">&amp;</span><span class="n">done</span><span class="o">-&gt;</span><span class="n">cntl</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">done</span><span class="o">-&gt;</span><span class="n">request</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">done</span><span class="o">-&gt;</span><span class="n">response</span><span class="p">,</span> <span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 给自己投票
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">grant_self</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_pre_vote_ctx</span><span class="p">,</span> <span class="n">lck</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>pre_vote请求处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">RaftServiceImpl</span><span class="o">::</span><span class="n">pre_vote</span><span class="p">(</span><span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">RpcController</span><span class="o">*</span> <span class="n">cntl_base</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="k">const</span> <span class="n">RequestVoteRequest</span><span class="o">*</span> <span class="n">request</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">RequestVoteResponse</span><span class="o">*</span> <span class="n">response</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">Closure</span><span class="o">*</span> <span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取node对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">scoped_refptr</span><span class="o">&lt;</span><span class="n">NodeImpl</span><span class="o">&gt;</span> <span class="n">node_ptr</span> <span class="o">=</span> 
</span></span><span class="line"><span class="cl">                        <span class="n">global_node_manager</span><span class="o">-&gt;</span><span class="n">get</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">group_id</span><span class="p">(),</span> <span class="n">peer_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">NodeImpl</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">node_ptr</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">handle_pre_vote_request</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">cntl</span><span class="o">-&gt;</span><span class="n">SetFailed</span><span class="p">(</span><span class="n">rc</span><span class="p">,</span> <span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="n">berror</span><span class="p">(</span><span class="n">rc</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">handle_pre_vote_request</span><span class="p">(</span><span class="k">const</span> <span class="n">RequestVoteRequest</span><span class="o">*</span> <span class="n">request</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                      <span class="n">RequestVoteResponse</span><span class="o">*</span> <span class="n">response</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">raft_mutex_t</span><span class="o">&gt;</span> <span class="n">lck</span><span class="p">(</span><span class="n">_mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">granted</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">rejected_by_lease</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">_current_term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// ignore older term
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// get last_log_id outof node mutex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">lck</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">LogId</span> <span class="n">last_log_id</span> <span class="o">=</span> <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">last_log_id</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">lck</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// pre_vote not need ABA check after unlock&amp;lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="kt">int64_t</span> <span class="n">votable_time</span> <span class="o">=</span> <span class="n">_follower_lease</span><span class="p">.</span><span class="n">votable_time_from_now</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">bool</span> <span class="n">grantable</span> <span class="o">=</span> <span class="p">(</span><span class="n">LogId</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">last_log_index</span><span class="p">(),</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">last_log_term</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">                        <span class="o">&gt;=</span> <span class="n">last_log_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">grantable</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">granted</span> <span class="o">=</span> <span class="p">(</span><span class="n">votable_time</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">rejected_by_lease</span> <span class="o">=</span> <span class="p">(</span><span class="n">votable_time</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_term</span><span class="p">(</span><span class="n">_current_term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_granted</span><span class="p">(</span><span class="n">granted</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_rejected_by_lease</span><span class="p">(</span><span class="n">rejected_by_lease</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_disrupted</span><span class="p">(</span><span class="n">_state</span> <span class="o">==</span> <span class="n">STATE_LEADER</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_previous_term</span><span class="p">(</span><span class="n">_current_term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>pre_vote响应处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">handle_pre_vote_response</span><span class="p">(</span><span class="k">const</span> <span class="n">PeerId</span><span class="o">&amp;</span> <span class="n">peer_id</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">term</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                        <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">ctx_version</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                        <span class="k">const</span> <span class="n">RequestVoteResponse</span><span class="o">&amp;</span> <span class="n">response</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// check response term，收到的term更大则放弃选举
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">term</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">_current_term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">status</span><span class="p">.</span><span class="n">set_error</span><span class="p">(</span><span class="n">EHIGHERTERMRESPONSE</span><span class="p">,</span> <span class="s">&#34;Raft node receives higher term &#34;</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;pre_vote_response.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">step_down</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">term</span><span class="p">(),</span> <span class="nb">false</span><span class="p">,</span> <span class="n">status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 省略比较复杂的检查grant逻辑，涉及lease/disrupted_leader等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 预选举通过，开始正式的选举
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">_pre_vote_ctx</span><span class="p">.</span><span class="n">granted</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">elect_self</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lck</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="elect">elect</h3>
<p>预选举通过，开始正式的选举</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// in lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">elect_self</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">raft_mutex_t</span><span class="o">&gt;*</span> <span class="n">lck</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                          <span class="kt">bool</span> <span class="n">old_leader_stepped_down</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// cancel follower election timer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">_state</span> <span class="o">==</span> <span class="n">STATE_FOLLOWER</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_election_timer</span><span class="p">.</span><span class="n">stop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// reset leader_id before vote
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">const</span> <span class="n">PeerId</span> <span class="n">old_leader</span> <span class="o">=</span> <span class="n">_leader_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">leader_term</span> <span class="o">=</span> <span class="n">_current_term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PeerId</span> <span class="n">empty_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">butil</span><span class="o">::</span><span class="n">Status</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">status</span><span class="p">.</span><span class="n">set_error</span><span class="p">(</span><span class="n">ERAFTTIMEDOUT</span><span class="p">,</span> <span class="s">&#34;A follower&#39;s leader_id is reset to NULL &#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="s">&#34;as it begins to request_vote.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">reset_leader_id</span><span class="p">(</span><span class="n">empty_id</span><span class="p">,</span> <span class="n">status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 修改状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_state</span> <span class="o">=</span> <span class="n">STATE_CANDIDATE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// term加1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_current_term</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_voted_id</span> <span class="o">=</span> <span class="n">_server_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">BRAFT_VLOG</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;node &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_group_id</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;:&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_server_id</span>
</span></span><span class="line"><span class="cl">               <span class="o">&lt;&lt;</span> <span class="s">&#34; term &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_current_term</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; start vote_timer&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 启动vote定时器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_vote_timer</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">_pre_vote_ctx</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">_vote_ctx</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">old_leader_stepped_down</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_vote_ctx</span><span class="p">.</span><span class="n">set_disrupted_leader</span><span class="p">(</span><span class="n">DisruptedLeader</span><span class="p">(</span><span class="n">old_leader</span><span class="p">,</span> <span class="n">leader_term</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">_follower_lease</span><span class="p">.</span><span class="n">expire</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int64_t</span> <span class="n">old_term</span> <span class="o">=</span> <span class="n">_current_term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// get last_log_id outof node mutex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">lck</span><span class="o">-&gt;</span><span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="n">LogId</span> <span class="n">last_log_id</span> <span class="o">=</span> <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">last_log_id</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">lck</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// vote need defense ABA after unlock&amp;lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">old_term</span> <span class="o">!=</span> <span class="n">_current_term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// term changed cause by step_down
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">LOG</span><span class="p">(</span><span class="n">WARNING</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;node &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_group_id</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;:&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_server_id</span>
</span></span><span class="line"><span class="cl">                     <span class="o">&lt;&lt;</span> <span class="s">&#34; raise term &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_current_term</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; when get last_log_id&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">_vote_ctx</span><span class="p">.</span><span class="n">set_last_log_id</span><span class="p">(</span><span class="n">last_log_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">PeerId</span><span class="o">&gt;</span> <span class="n">peers</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_conf</span><span class="p">.</span><span class="n">list_peers</span><span class="p">(</span><span class="o">&amp;</span><span class="n">peers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 向peer发送vote请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">request_peers_to_vote</span><span class="p">(</span><span class="n">peers</span><span class="p">,</span> <span class="n">_vote_ctx</span><span class="p">.</span><span class="n">disrupted_leader</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//TODO: outof lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">status</span> <span class="o">=</span> <span class="n">_meta_storage</span><span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">set_term_and_votedfor</span><span class="p">(</span><span class="n">_current_term</span><span class="p">,</span> <span class="n">_server_id</span><span class="p">,</span> <span class="n">_v_group_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">status</span><span class="p">.</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">LOG</span><span class="p">(</span><span class="n">ERROR</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;node &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_group_id</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;:&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_server_id</span>
</span></span><span class="line"><span class="cl">                   <span class="o">&lt;&lt;</span> <span class="s">&#34; fail to set_term_and_votedfor itself when elect_self,&#34;</span>
</span></span><span class="line"><span class="cl">                      <span class="s">&#34; error: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// reset _voted_id to avoid inconsistent cases
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// return immediately without granting _vote_ctx
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">_voted_id</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 给自己投票
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">grant_self</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_vote_ctx</span><span class="p">,</span> <span class="n">lck</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>request vote请求处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">handle_request_vote_request</span><span class="p">(</span><span class="k">const</span> <span class="n">RequestVoteRequest</span><span class="o">*</span> <span class="n">request</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="n">RequestVoteResponse</span><span class="o">*</span> <span class="n">response</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">raft_mutex_t</span><span class="o">&gt;</span> <span class="n">lck</span><span class="p">(</span><span class="n">_mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 忽略一些disrupt逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">bool</span> <span class="n">disrupted</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int64_t</span> <span class="n">previous_term</span> <span class="o">=</span> <span class="n">_current_term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">rejected_by_lease</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ignore older term
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">_current_term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// ignore older term
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// get last_log_id outof node mutex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">lck</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">LogId</span> <span class="n">last_log_id</span> <span class="o">=</span> <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">last_log_id</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">lck</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// vote need ABA check after unlock&amp;lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">previous_term</span> <span class="o">!=</span> <span class="n">_current_term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">LOG</span><span class="p">(</span><span class="n">WARNING</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;node &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_group_id</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;:&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_server_id</span>
</span></span><span class="line"><span class="cl">                         <span class="o">&lt;&lt;</span> <span class="s">&#34; raise term &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_current_term</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; when get last_log_id&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">bool</span> <span class="n">log_is_ok</span> <span class="o">=</span> <span class="p">(</span><span class="n">LogId</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">last_log_index</span><span class="p">(),</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">last_log_term</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">                          <span class="o">&gt;=</span> <span class="n">last_log_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int64_t</span> <span class="n">votable_time</span> <span class="o">=</span> <span class="n">_follower_lease</span><span class="p">.</span><span class="n">votable_time_from_now</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// if the vote is rejected by lease, tell the candidate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">votable_time</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">rejected_by_lease</span> <span class="o">=</span> <span class="n">log_is_ok</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// increase current term, change state to follower
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">_current_term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">butil</span><span class="o">::</span><span class="n">Status</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">status</span><span class="p">.</span><span class="n">set_error</span><span class="p">(</span><span class="n">EHIGHERTERMREQUEST</span><span class="p">,</span> <span class="s">&#34;Raft node receives higher term &#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;request_vote_request.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">disrupted</span> <span class="o">=</span> <span class="p">(</span><span class="n">_state</span> <span class="o">&lt;=</span> <span class="n">STATE_TRANSFERRING</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">step_down</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">(),</span> <span class="nb">false</span><span class="p">,</span> <span class="n">status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// save
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">log_is_ok</span> <span class="o">&amp;&amp;</span> <span class="n">_voted_id</span><span class="p">.</span><span class="n">is_empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">butil</span><span class="o">::</span><span class="n">Status</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">status</span><span class="p">.</span><span class="n">set_error</span><span class="p">(</span><span class="n">EVOTEFORCANDIDATE</span><span class="p">,</span> <span class="s">&#34;Raft node votes for some candidate, &#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;step down to restart election_timer.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">step_down</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">(),</span> <span class="nb">false</span><span class="p">,</span> <span class="n">status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">_voted_id</span> <span class="o">=</span> <span class="n">candidate_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">//TODO: outof lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 投票需要持久化存储
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">status</span> <span class="o">=</span> <span class="n">_meta_storage</span><span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">set_term_and_votedfor</span><span class="p">(</span><span class="n">_current_term</span><span class="p">,</span> <span class="n">candidate_id</span><span class="p">,</span> <span class="n">_v_group_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">status</span><span class="p">.</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// reset _voted_id to response set_granted(false)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">_voted_id</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span> 
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_disrupted</span><span class="p">(</span><span class="n">disrupted</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_previous_term</span><span class="p">(</span><span class="n">previous_term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_term</span><span class="p">(</span><span class="n">_current_term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_granted</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">()</span> <span class="o">==</span> <span class="n">_current_term</span> <span class="o">&amp;&amp;</span> <span class="n">_voted_id</span> <span class="o">==</span> <span class="n">candidate_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_rejected_by_lease</span><span class="p">(</span><span class="n">rejected_by_lease</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>request vote响应处理逻辑</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">handle_request_vote_response</span><span class="p">(</span><span class="k">const</span> <span class="n">PeerId</span><span class="o">&amp;</span> <span class="n">peer_id</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">term</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                            <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">ctx_version</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                            <span class="k">const</span> <span class="n">RequestVoteResponse</span><span class="o">&amp;</span> <span class="n">response</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">BAIDU_SCOPED_LOCK</span><span class="p">(</span><span class="n">_mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// check state，状态不对直接忽略，比如已成为leader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">_state</span> <span class="o">!=</span> <span class="n">STATE_CANDIDATE</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// check response term，response term更大则停止选举
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">term</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">_current_term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">butil</span><span class="o">::</span><span class="n">Status</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">status</span><span class="p">.</span><span class="n">set_error</span><span class="p">(</span><span class="n">EHIGHERTERMRESPONSE</span><span class="p">,</span> <span class="s">&#34;Raft node receives higher term &#34;</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;request_vote_response.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">step_down</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">term</span><span class="p">(),</span> <span class="nb">false</span><span class="p">,</span> <span class="n">status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">response</span><span class="p">.</span><span class="n">granted</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">response</span><span class="p">.</span><span class="n">rejected_by_lease</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">disrupted</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_vote_ctx</span><span class="p">.</span><span class="n">set_disrupted_leader</span><span class="p">(</span><span class="n">DisruptedLeader</span><span class="p">(</span><span class="n">peer_id</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">previous_term</span><span class="p">()));</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">granted</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_vote_ctx</span><span class="p">.</span><span class="n">grant</span><span class="p">(</span><span class="n">peer_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">peer_id</span> <span class="o">==</span> <span class="n">_follower_lease</span><span class="p">.</span><span class="n">last_leader</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">_vote_ctx</span><span class="p">.</span><span class="n">grant</span><span class="p">(</span><span class="n">_server_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">_vote_ctx</span><span class="p">.</span><span class="n">stop_grant_self_timer</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果获得多数支持，成为leader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">_vote_ctx</span><span class="p">.</span><span class="n">granted</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nf">become_leader</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// If the follower rejected the vote because of lease, reserve it, and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// the candidate will try again after it disrupt the old leader.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">_vote_ctx</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">peer_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 再次要求预留的peer投票
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">retry_vote_on_reserved_peers</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">retry_vote_on_reserved_peers</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">PeerId</span><span class="o">&gt;</span> <span class="n">peers</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_vote_ctx</span><span class="p">.</span><span class="n">pop_grantable_peers</span><span class="p">(</span><span class="o">&amp;</span><span class="n">peers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">peers</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">request_peers_to_vote</span><span class="p">(</span><span class="n">peers</span><span class="p">,</span> <span class="n">_vote_ctx</span><span class="p">.</span><span class="n">disrupted_leader</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="leader逻辑">leader逻辑</h2>
<h3 id="成为leader">成为leader</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">become_leader</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 检查状态必须为候选者
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">CHECK</span><span class="p">(</span><span class="n">_state</span> <span class="o">==</span> <span class="n">STATE_CANDIDATE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// cancel candidate vote timer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_vote_timer</span><span class="p">.</span><span class="n">stop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">_vote_ctx</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 修改状态和leader_id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_state</span> <span class="o">=</span> <span class="n">STATE_LEADER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_leader_id</span> <span class="o">=</span> <span class="n">_server_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">_replicator_group</span><span class="p">.</span><span class="n">reset_term</span><span class="p">(</span><span class="n">_current_term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">_follower_lease</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">_leader_lease</span><span class="p">.</span><span class="n">on_leader_start</span><span class="p">(</span><span class="n">_current_term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">PeerId</span><span class="o">&gt;</span> <span class="n">peers</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_conf</span><span class="p">.</span><span class="n">list_peers</span><span class="p">(</span><span class="o">&amp;</span><span class="n">peers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 每个follower启动一个replicator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">PeerId</span><span class="o">&gt;::</span><span class="n">const_iterator</span>
</span></span><span class="line"><span class="cl">            <span class="n">iter</span> <span class="o">=</span> <span class="n">peers</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">iter</span> <span class="o">!=</span> <span class="n">peers</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">iter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">iter</span> <span class="o">==</span> <span class="n">_server_id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">_replicator_group</span><span class="p">.</span><span class="n">add_replicator</span><span class="p">(</span><span class="o">*</span><span class="n">iter</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// init commit manager
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_ballot_box</span><span class="o">-&gt;</span><span class="n">reset_pending_index</span><span class="p">(</span><span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">last_log_index</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Register _conf_ctx to reject configuration changing before the first log
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// is committed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">CHECK</span><span class="p">(</span><span class="o">!</span><span class="n">_conf_ctx</span><span class="p">.</span><span class="n">is_busy</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">_conf_ctx</span><span class="p">.</span><span class="n">flush</span><span class="p">(</span><span class="n">_conf</span><span class="p">.</span><span class="n">conf</span><span class="p">,</span> <span class="n">_conf</span><span class="p">.</span><span class="n">old_conf</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">_stepdown_timer</span><span class="p">.</span><span class="n">start</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>根据Raft论文，新leader登基之后需要提交一个no-op日志才能安全的提交之前任期的日志。在braft的实现中， <code>_conf_ctx.flush(_conf.conf, _conf.old_conf)</code> 会发起一次节点更新，在节点更新的日志成功提交后回调用户状态机的 <code>on_leader_start</code> 。braft使用节点更新日志替代了论文中的no-op日志。</p>
<p>Replicator启动逻辑</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">Replicator</span><span class="o">::</span><span class="n">start</span><span class="p">(</span><span class="k">const</span> <span class="n">ReplicatorOptions</span><span class="o">&amp;</span> <span class="n">options</span><span class="p">,</span> <span class="n">ReplicatorId</span> <span class="o">*</span><span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Replicator</span><span class="o">*</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Replicator</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">brpc</span><span class="o">::</span><span class="n">ChannelOptions</span> <span class="n">channel_opt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//channel_opt.connect_timeout_ms = *options.heartbeat_timeout_ms;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">channel_opt</span><span class="p">.</span><span class="n">timeout_ms</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="c1">// We don&#39;t need RPC timeout
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 创建发送channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">_sending_channel</span><span class="p">.</span><span class="n">Init</span><span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">peer_id</span><span class="p">.</span><span class="n">addr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">channel_opt</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span> <span class="o">=</span> <span class="n">options</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_next_index</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">log_manager</span><span class="o">-&gt;</span><span class="n">last_log_index</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 记录到bthread local存储
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">bthread_id_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">_id</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">_on_error</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">bthread_id_lock</span><span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">_id</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_catchup_closure</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_update_last_rpc_send_timestamp</span><span class="p">(</span><span class="n">butil</span><span class="o">::</span><span class="n">monotonic_time_ms</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_start_heartbeat_timer</span><span class="p">(</span><span class="n">butil</span><span class="o">::</span><span class="n">gettimeofday_us</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Note: r-&gt;_id is unlock in _send_empty_entries, don&#39;t touch r ever after
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 发送no_op来宣示leader身份
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_send_empty_entries</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="维护leader身份心跳">维护leader身份——心跳</h3>
<p>在Replicator::start里面开始了heartbeat_timer，它是个bthread_timer，在超时的时候会调用Replicator::_on_timedout，该函数会把对应的id设置为ETIMEDOUT。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Replicator</span><span class="o">::</span><span class="n">_on_timedout</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">bthread_id_t</span> <span class="n">id</span> <span class="o">=</span> <span class="p">{</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span><span class="n">arg</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">bthread_id_error</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">ETIMEDOUT</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>bthread_id_error会去调用_on_error，然后开始_send_heartbeat。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">Replicator</span><span class="o">::</span><span class="n">_on_error</span><span class="p">(</span><span class="n">bthread_id_t</span> <span class="n">id</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">arg</span><span class="p">,</span> <span class="kt">int</span> <span class="n">error_code</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">error_code</span> <span class="o">==</span> <span class="n">ETIMEDOUT</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// This error is issued in the TimerThread, start a new bthread to avoid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// blocking the caller.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// Unlock id to remove the context-switch out of the critical section
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">bthread_id_unlock</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail to unlock&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">bthread_t</span> <span class="n">tid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 启动一个bthread来执行_send_heartbeat
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">bthread_start_urgent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_send_heartbeat</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                 <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">id</span><span class="p">.</span><span class="n">value</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">PLOG</span><span class="p">(</span><span class="n">ERROR</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail to start bthread&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">_send_heartbeat</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">id</span><span class="p">.</span><span class="n">value</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>发送心跳</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span><span class="o">*</span> <span class="n">Replicator</span><span class="o">::</span><span class="n">_send_heartbeat</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Replicator</span><span class="o">*</span> <span class="n">r</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">bthread_id_t</span> <span class="n">id</span> <span class="o">=</span> <span class="p">{</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span><span class="n">arg</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从bthread local存储获取replicator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">bthread_id_lock</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">r</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// This replicator is stopped
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// id is unlock in _send_empty_entries;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_send_empty_entries</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Replicator</span><span class="o">::</span><span class="n">_send_empty_entries</span><span class="p">(</span><span class="kt">bool</span> <span class="n">is_heartbeat</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="o">&gt;</span> <span class="n">cntl</span><span class="p">(</span><span class="k">new</span> <span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">AppendEntriesRequest</span><span class="o">&gt;</span> <span class="n">request</span><span class="p">(</span><span class="k">new</span> <span class="n">AppendEntriesRequest</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">AppendEntriesResponse</span><span class="o">&gt;</span> <span class="n">response</span><span class="p">(</span><span class="k">new</span> <span class="n">AppendEntriesResponse</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_fill_common_fields</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">request</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="n">_next_index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">is_heartbeat</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CHECK</span><span class="p">(</span><span class="o">!</span><span class="n">is_heartbeat</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// _id is unlock in _install_snapshot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="nf">_install_snapshot</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">is_heartbeat</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_heartbeat_in_fly</span> <span class="o">=</span> <span class="n">cntl</span><span class="o">-&gt;</span><span class="n">call_id</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">_heartbeat_counter</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// set RPC timeout for heartbeat, how long should timeout be is waiting to be optimized.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">cntl</span><span class="o">-&gt;</span><span class="n">set_timeout_ms</span><span class="p">(</span><span class="o">*</span><span class="n">_options</span><span class="p">.</span><span class="n">election_timeout_ms</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_st</span><span class="p">.</span><span class="n">st</span> <span class="o">=</span> <span class="n">APPENDING_ENTRIES</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">_st</span><span class="p">.</span><span class="n">first_log_index</span> <span class="o">=</span> <span class="n">_next_index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">_st</span><span class="p">.</span><span class="n">last_log_index</span> <span class="o">=</span> <span class="n">_next_index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">CHECK</span><span class="p">(</span><span class="n">_append_entries_in_fly</span><span class="p">.</span><span class="n">empty</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">CHECK_EQ</span><span class="p">(</span><span class="n">_flying_append_entries_size</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">_append_entries_in_fly</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">FlyingAppendEntriesRpc</span><span class="p">(</span><span class="n">_next_index</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cntl</span><span class="o">-&gt;</span><span class="n">call_id</span><span class="p">()));</span>
</span></span><span class="line"><span class="cl">        <span class="n">_append_entries_counter</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">Closure</span><span class="o">*</span> <span class="n">done</span> <span class="o">=</span> <span class="n">brpc</span><span class="o">::</span><span class="n">NewCallback</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">is_heartbeat</span> <span class="o">?</span> <span class="nl">_on_heartbeat_returned</span> <span class="p">:</span> <span class="n">_on_rpc_returned</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                <span class="n">_id</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">cntl</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="n">request</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="n">response</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">                <span class="n">butil</span><span class="o">::</span><span class="n">monotonic_time_ms</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">RaftService_Stub</span> <span class="nf">stub</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_sending_channel</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">stub</span><span class="p">.</span><span class="n">append_entries</span><span class="p">(</span><span class="n">cntl</span><span class="p">.</span><span class="n">release</span><span class="p">(),</span> <span class="n">request</span><span class="p">.</span><span class="n">release</span><span class="p">(),</span> 
</span></span><span class="line"><span class="cl">                        <span class="n">response</span><span class="p">.</span><span class="n">release</span><span class="p">(),</span> <span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">bthread_id_unlock</span><span class="p">(</span><span class="n">_id</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail to unlock &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>append_entries请求处理逻辑，既包括心跳处理，也包括正常的请求处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span><span class="lnt">95
</span><span class="lnt">96
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">handle_append_entries_request</span><span class="p">(</span><span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="o">*</span> <span class="n">cntl</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                             <span class="k">const</span> <span class="n">AppendEntriesRequest</span><span class="o">*</span> <span class="n">request</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                             <span class="n">AppendEntriesResponse</span><span class="o">*</span> <span class="n">response</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                             <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">Closure</span><span class="o">*</span> <span class="n">done</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                             <span class="kt">bool</span> <span class="n">from_append_entries_cache</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">*&gt;</span> <span class="n">entries</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">entries</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">entries_size</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">brpc</span><span class="o">::</span><span class="n">ClosureGuard</span> <span class="n">done_guard</span><span class="p">(</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">raft_mutex_t</span><span class="o">&gt;</span> <span class="n">lck</span><span class="p">(</span><span class="n">_mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// pre set term, to avoid get term in lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_term</span><span class="p">(</span><span class="n">_current_term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// check stale term
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 让已被篡位的leader下台
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">_current_term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">saved_current_term</span> <span class="o">=</span> <span class="n">_current_term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">lck</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_success</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_term</span><span class="p">(</span><span class="n">saved_current_term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// check term and state to step down
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">check_step_down</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">(),</span> <span class="n">server_id</span><span class="p">);</span>   
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果有两个相同term的leader，自己的term加一让两个leader都下台
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server_id</span> <span class="o">!=</span> <span class="n">_leader_id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Increase the term by 1 and make both leaders step down to minimize the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// loss of split brain
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">butil</span><span class="o">::</span><span class="n">Status</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">status</span><span class="p">.</span><span class="n">set_error</span><span class="p">(</span><span class="n">ELEADERCONFLICT</span><span class="p">,</span> <span class="s">&#34;More than one leader in the same term.&#34;</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">        <span class="n">step_down</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">false</span><span class="p">,</span> <span class="n">status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_success</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_term</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">prev_log_index</span> <span class="o">=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">prev_log_index</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">prev_log_term</span> <span class="o">=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">prev_log_term</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">local_prev_log_term</span> <span class="o">=</span> <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">get_term</span><span class="p">(</span><span class="n">prev_log_index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果term不匹配，视是否允许乱序而报错或正常处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">local_prev_log_term</span> <span class="o">!=</span> <span class="n">prev_log_term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 心跳请求处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">entries_size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_success</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_term</span><span class="p">(</span><span class="n">_current_term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_last_log_index</span><span class="p">(</span><span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">last_log_index</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_readonly</span><span class="p">(</span><span class="n">_node_readonly</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">lck</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// see the comments at FollowerStableClosure::run()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">_ballot_box</span><span class="o">-&gt;</span><span class="n">set_last_committed_index</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">committed_index</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">                         <span class="n">prev_log_index</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Parse request
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">butil</span><span class="o">::</span><span class="n">IOBuf</span> <span class="n">data_buf</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_buf</span><span class="p">.</span><span class="n">swap</span><span class="p">(</span><span class="n">cntl</span><span class="o">-&gt;</span><span class="n">request_attachment</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int64_t</span> <span class="n">index</span> <span class="o">=</span> <span class="n">prev_log_index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">entries_size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">index</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">const</span> <span class="n">EntryMeta</span><span class="o">&amp;</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="n">type</span><span class="p">()</span> <span class="o">!=</span> <span class="n">ENTRY_TYPE_UNKNOWN</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">LogEntry</span><span class="o">*</span> <span class="n">log_entry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogEntry</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">log_entry</span><span class="o">-&gt;</span><span class="n">AddRef</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">log_entry</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">term</span> <span class="o">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">term</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">log_entry</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">log_entry</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">=</span> <span class="p">(</span><span class="n">EntryType</span><span class="p">)</span><span class="n">entry</span><span class="p">.</span><span class="n">type</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 如果请求中peer不为空，也设置log_entry的peer/old_peer字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">CHECK_NE</span><span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="n">type</span><span class="p">(),</span> <span class="n">ENTRY_TYPE_CONFIGURATION</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="n">has_data_len</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">data_len</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="n">data_buf</span><span class="p">.</span><span class="n">cutn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">log_entry</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">entries</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">log_entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// check out-of-order cache
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">check_append_entries_cache</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">FollowerStableClosure</span><span class="o">*</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FollowerStableClosure</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">cntl</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">done_guard</span><span class="p">.</span><span class="n">release</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="p">,</span> <span class="n">_current_term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 写入log，在回调中进行回包
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">append_entries</span><span class="p">(</span><span class="o">&amp;</span><span class="n">entries</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// update configuration after _log_manager updated its memory status
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">check_and_set_configuration</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_conf</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>心跳回包处理逻辑</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Replicator</span><span class="o">::</span><span class="n">_on_heartbeat_returned</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">ReplicatorId</span> <span class="n">id</span><span class="p">,</span> <span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="o">*</span> <span class="n">cntl</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">AppendEntriesRequest</span><span class="o">*</span> <span class="n">request</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">AppendEntriesResponse</span><span class="o">*</span> <span class="n">response</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int64_t</span> <span class="n">rpc_send_time</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="o">&gt;</span> <span class="n">cntl_guard</span><span class="p">(</span><span class="n">cntl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">AppendEntriesRequest</span><span class="o">&gt;</span>  <span class="n">req_guard</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">AppendEntriesResponse</span><span class="o">&gt;</span> <span class="n">res_guard</span><span class="p">(</span><span class="n">response</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Replicator</span> <span class="o">*</span><span class="n">r</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">bthread_id_t</span> <span class="n">dummy_id</span> <span class="o">=</span> <span class="p">{</span> <span class="n">id</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">long</span> <span class="n">start_time_us</span> <span class="o">=</span> <span class="n">butil</span><span class="o">::</span><span class="n">gettimeofday_us</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// XXX bthread_id大概相当于pthread key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">bthread_id_lock</span><span class="p">(</span><span class="n">dummy_id</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">r</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">cntl</span><span class="o">-&gt;</span><span class="n">Failed</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果失败则再次启动定时器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">r</span><span class="o">-&gt;</span><span class="n">_start_heartbeat_timer</span><span class="p">(</span><span class="n">start_time_us</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">bthread_id_unlock</span><span class="p">(</span><span class="n">dummy_id</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail to unlock &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">dummy_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_consecutive_error_times</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果心跳收到更高的term，则退位
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">NodeImpl</span> <span class="o">*</span><span class="n">node_impl</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Acquire a reference of Node here in case that Node is detroyed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// after _notify_on_caught_up.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">node_impl</span><span class="o">-&gt;</span><span class="n">AddRef</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">r</span><span class="o">-&gt;</span><span class="n">_notify_on_caught_up</span><span class="p">(</span><span class="n">EPERM</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">LOG</span><span class="p">(</span><span class="n">INFO</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Replicator=&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">dummy_id</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; is going to quit&#34;</span>
</span></span><span class="line"><span class="cl">                  <span class="o">&lt;&lt;</span> <span class="s">&#34;, group &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">group_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">butil</span><span class="o">::</span><span class="n">Status</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">status</span><span class="p">.</span><span class="n">set_error</span><span class="p">(</span><span class="n">EHIGHERTERMRESPONSE</span><span class="p">,</span> <span class="s">&#34;Leader receives higher term &#34;</span>
</span></span><span class="line"><span class="cl">                <span class="s">&#34;heartbeat_response from peer:%s&#34;</span><span class="p">,</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">peer_id</span><span class="p">.</span><span class="n">to_string</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">r</span><span class="o">-&gt;</span><span class="n">_destroy</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">node_impl</span><span class="o">-&gt;</span><span class="n">increase_term_to</span><span class="p">(</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">(),</span> <span class="n">status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">node_impl</span><span class="o">-&gt;</span><span class="n">Release</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">readonly</span> <span class="o">=</span> <span class="n">response</span><span class="o">-&gt;</span><span class="n">has_readonly</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">response</span><span class="o">-&gt;</span><span class="n">readonly</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">BRAFT_VLOG</span> <span class="o">&lt;&lt;</span> <span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; readonly &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">readonly</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_update_last_rpc_send_timestamp</span><span class="p">(</span><span class="n">rpc_send_time</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_start_heartbeat_timer</span><span class="p">(</span><span class="n">start_time_us</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">NodeImpl</span><span class="o">*</span> <span class="n">node_impl</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Check if readonly config changed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">((</span><span class="n">readonly</span> <span class="o">&amp;&amp;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_readonly_index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="o">!</span><span class="n">readonly</span> <span class="o">&amp;&amp;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_readonly_index</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">node_impl</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">node_impl</span><span class="o">-&gt;</span><span class="n">AddRef</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">node_impl</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">bthread_id_unlock</span><span class="p">(</span><span class="n">dummy_id</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail to unlock &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">dummy_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="n">PeerId</span> <span class="n">peer_id</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">peer_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int64_t</span> <span class="n">term</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">bthread_id_unlock</span><span class="p">(</span><span class="n">dummy_id</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail to unlock &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">dummy_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_impl</span><span class="o">-&gt;</span><span class="n">change_readonly_config</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="n">peer_id</span><span class="p">,</span> <span class="n">readonly</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">node_impl</span><span class="o">-&gt;</span><span class="n">Release</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="状态机任务执行">状态机任务执行</h2>
<p>用户代码会调用<code>NodeImpl::apply(const Task&amp; task)</code>，apply的实现中将任务加入<code>_apply_queue</code>队列。队列执行时最终会调用下面的函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">apply</span><span class="p">(</span><span class="n">LogEntryAndClosure</span> <span class="n">tasks</span><span class="p">[],</span> <span class="n">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">g_apply_tasks_batch_counter</span> <span class="o">&lt;&lt;</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">*&gt;</span> <span class="n">entries</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">entries</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">raft_mutex_t</span><span class="o">&gt;</span> <span class="n">lck</span><span class="p">(</span><span class="n">_mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">reject_new_user_logs</span> <span class="o">=</span> <span class="p">(</span><span class="n">_node_readonly</span> <span class="o">||</span> <span class="n">_majority_nodes_readonly</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_state</span> <span class="o">!=</span> <span class="n">STATE_LEADER</span> <span class="o">||</span> <span class="n">reject_new_user_logs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 非leader或只读时设置错误，并回调用户的done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">st</span><span class="p">.</span><span class="n">set_error</span><span class="p">(</span><span class="n">EPERM</span><span class="p">,</span> <span class="s">&#34;is not leader&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">entry</span><span class="o">-&gt;</span><span class="n">Release</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">done</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">()</span> <span class="o">=</span> <span class="n">st</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">run_closure_in_bthread</span><span class="p">(</span><span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 检查ABA问题，有问题会设置错误和调用done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">expected_term</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">expected_term</span> <span class="o">!=</span> <span class="n">_current_term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">entries</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">entries</span><span class="p">.</span><span class="n">back</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">term</span> <span class="o">=</span> <span class="n">_current_term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">entries</span><span class="p">.</span><span class="n">back</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">=</span> <span class="n">ENTRY_TYPE_DATA</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 加入投票箱
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">_ballot_box</span><span class="o">-&gt;</span><span class="n">append_pending_task</span><span class="p">(</span><span class="n">_conf</span><span class="p">.</span><span class="n">conf</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                         <span class="n">_conf</span><span class="p">.</span><span class="n">stable</span><span class="p">()</span> <span class="o">?</span> <span class="nb">NULL</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">_conf</span><span class="p">.</span><span class="n">old_conf</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                         <span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// LeaderStableClosure在回调时会投票
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">append_entries</span><span class="p">(</span><span class="o">&amp;</span><span class="n">entries</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                               <span class="k">new</span> <span class="n">LeaderStableClosure</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                                        <span class="n">NodeId</span><span class="p">(</span><span class="n">_group_id</span><span class="p">,</span> <span class="n">_server_id</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                                        <span class="n">entries</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">                                        <span class="n">_ballot_box</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// update _conf.first
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">check_and_set_configuration</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_conf</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="log持久化">log持久化</h3>
<p>无论是leader还是follower都是调用LogManager来持久化日志，对于leader来说，持久化完成后进行投票；对于follower来说，持久化完成后回包。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">LogManager</span><span class="o">::</span><span class="n">append_entries</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">*&gt;</span> <span class="o">*</span><span class="n">entries</span><span class="p">,</span> <span class="n">StableClosure</span><span class="o">*</span> <span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">raft_mutex_t</span><span class="o">&gt;</span> <span class="n">lck</span><span class="p">(</span><span class="n">_mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 检查是否存在冲突
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">entries</span><span class="o">-&gt;</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">check_and_resolve_conflict</span><span class="p">(</span><span class="n">entries</span><span class="p">,</span> <span class="n">done</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">lck</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// release entries
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">entries</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="o">*</span><span class="n">entries</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">Release</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">entries</span><span class="o">-&gt;</span><span class="n">clear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">entries</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Add ref for disk_thread
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">(</span><span class="o">*</span><span class="n">entries</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">AddRef</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">entries</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">ENTRY_TYPE_CONFIGURATION</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ConfigurationEntry</span> <span class="nf">conf_entry</span><span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="o">*</span><span class="n">entries</span><span class="p">)[</span><span class="n">i</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 对于修改peer的类型的日志，加入config manager，影响后续的投票。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">_config_manager</span><span class="o">-&gt;</span><span class="n">add</span><span class="p">(</span><span class="n">conf_entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">entries</span><span class="o">-&gt;</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">done</span><span class="o">-&gt;</span><span class="n">_first_log_index</span> <span class="o">=</span> <span class="n">entries</span><span class="o">-&gt;</span><span class="n">front</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 插入内存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">_logs_in_memory</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">_logs_in_memory</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">entries</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">(),</span> <span class="n">entries</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">done</span><span class="o">-&gt;</span><span class="n">_entries</span><span class="p">.</span><span class="n">swap</span><span class="p">(</span><span class="o">*</span><span class="n">entries</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 刷盘
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">bthread</span><span class="o">::</span><span class="n">execution_queue_execute</span><span class="p">(</span><span class="n">_disk_queue</span><span class="p">,</span> <span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ret</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;execq execute failed, ret: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">ret</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; err: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">berror</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">wakeup_all_waiter</span><span class="p">(</span><span class="n">lck</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">LogManager</span><span class="o">::</span><span class="n">check_and_resolve_conflict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">*&gt;</span> <span class="o">*</span><span class="n">entries</span><span class="p">,</span> <span class="n">StableClosure</span><span class="o">*</span> <span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">AsyncClosureGuard</span> <span class="nf">done_guard</span><span class="p">(</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">entries</span><span class="o">-&gt;</span><span class="n">front</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 某些情况下leader会设置index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// Node is currently the leader and |entries| are from the user who
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// don&#39;t know the correct indexes the logs should assign to. So we have
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// to assign indexes to the appending entries
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">entries</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="o">*</span><span class="n">entries</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="o">++</span><span class="n">_last_log_index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">done_guard</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// follower逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Node is currently a follower and |entries| are from the leader. We 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// should check and resolve the confliction between the local logs and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// |entries|
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 日志不连续性，报错
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">entries</span><span class="o">-&gt;</span><span class="n">front</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">index</span> <span class="o">&gt;</span> <span class="n">_last_log_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">done</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">().</span><span class="n">set_error</span><span class="p">(</span><span class="n">EINVAL</span><span class="p">,</span> <span class="s">&#34;There&#39;s gap between first_index=%&#34;</span> <span class="n">PRId64</span>
</span></span><span class="line"><span class="cl">                                     <span class="s">&#34; and last_log_index=%&#34;</span> <span class="n">PRId64</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                     <span class="n">entries</span><span class="o">-&gt;</span><span class="n">front</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">_last_log_index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">applied_index</span> <span class="o">=</span> <span class="n">_applied_id</span><span class="p">.</span><span class="n">index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果最后一条日志已经apply过，直接返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">entries</span><span class="o">-&gt;</span><span class="n">back</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">index</span> <span class="o">&lt;=</span> <span class="n">applied_index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">entries</span><span class="o">-&gt;</span><span class="n">front</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">index</span> <span class="o">==</span> <span class="n">_last_log_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 第一条日志正好对上，只需要更新_last_log_index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// Fast path
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">_last_log_index</span> <span class="o">=</span> <span class="n">entries</span><span class="o">-&gt;</span><span class="n">back</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Appending entries overlap the local ones. We should find if there
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// is a conflicting index from which we should truncate the local
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// ones.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 找到第一个冲突的日志index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">size_t</span> <span class="n">conflicting_index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="p">(;</span> <span class="n">conflicting_index</span> <span class="o">&lt;</span> <span class="n">entries</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">conflicting_index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">unsafe_get_term</span><span class="p">((</span><span class="o">*</span><span class="n">entries</span><span class="p">)[</span><span class="n">conflicting_index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">!=</span> <span class="p">(</span><span class="o">*</span><span class="n">entries</span><span class="p">)[</span><span class="n">conflicting_index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 如果存在冲突
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">conflicting_index</span> <span class="o">!=</span> <span class="n">entries</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">entries</span><span class="p">)[</span><span class="n">conflicting_index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">index</span> <span class="o">&lt;=</span> <span class="n">_last_log_index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// Truncate all the conflicting entries to make local logs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="c1">// consensus with the leader.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="c1">// truncate日志
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">unsafe_truncate_suffix</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                            <span class="p">(</span><span class="o">*</span><span class="n">entries</span><span class="p">)[</span><span class="n">conflicting_index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="n">_last_log_index</span> <span class="o">=</span> <span class="n">entries</span><span class="o">-&gt;</span><span class="n">back</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>  <span class="c1">// else this is a duplicated AppendEntriesRequest, we have 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>               <span class="c1">// nothing to do besides releasing all the entries
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            
</span></span><span class="line"><span class="cl">            <span class="c1">// Release all the entries before the conflicting_index and the rest
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// would be append to _logs_in_memory and _log_storage after this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// function returns
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">conflicting_index</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="p">(</span><span class="o">*</span><span class="n">entries</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">Release</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 不冲突的日志直接移除，已经持久化过了。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">entries</span><span class="o">-&gt;</span><span class="n">erase</span><span class="p">(</span><span class="n">entries</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">(),</span> 
</span></span><span class="line"><span class="cl">                           <span class="n">entries</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">conflicting_index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">done_guard</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Can&#39;t reach here&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">done</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">().</span><span class="n">set_error</span><span class="p">(</span><span class="n">EIO</span><span class="p">,</span> <span class="s">&#34;Impossible&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>日志刷盘</p>
<p>在LogManager的构造函数中创建了一个执行队列。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">LogManager</span><span class="o">::</span><span class="n">start_disk_thread</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">bthread</span><span class="o">::</span><span class="n">ExecutionQueueOptions</span> <span class="n">queue_options</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">queue_options</span><span class="p">.</span><span class="n">bthread_attr</span> <span class="o">=</span> <span class="n">BTHREAD_ATTR_NORMAL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">bthread</span><span class="o">::</span><span class="n">execution_queue_start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_disk_queue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                   <span class="o">&amp;</span><span class="n">queue_options</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                   <span class="n">disk_thread</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                   <span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>disk_thread是负责刷盘的函数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">LogManager</span><span class="o">::</span><span class="n">disk_thread</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">meta</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="n">bthread</span><span class="o">::</span><span class="n">TaskIterator</span><span class="o">&lt;</span><span class="n">StableClosure</span><span class="o">*&gt;&amp;</span> <span class="n">iter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">is_queue_stopped</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">LogManager</span><span class="o">*</span> <span class="n">log_manager</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">LogManager</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">meta</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// FIXME(chenzhangyi01): it&#39;s buggy
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">LogId</span> <span class="n">last_id</span> <span class="o">=</span> <span class="n">log_manager</span><span class="o">-&gt;</span><span class="n">_disk_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">StableClosure</span><span class="o">*</span> <span class="n">storage</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">AppendBatcher</span> <span class="nf">ab</span><span class="p">(</span><span class="n">storage</span><span class="p">,</span> <span class="n">ARRAY_SIZE</span><span class="p">(</span><span class="n">storage</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">last_id</span><span class="p">,</span> <span class="n">log_manager</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(;</span> <span class="n">iter</span><span class="p">;</span> <span class="o">++</span><span class="n">iter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// ^^^ Must iterate to the end to release to corresponding
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">//     even if some error has occurred
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">StableClosure</span><span class="o">*</span> <span class="n">done</span> <span class="o">=</span> <span class="o">*</span><span class="n">iter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="o">-&gt;</span><span class="n">_entries</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 组batch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">ab</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 刷盘
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">ab</span><span class="p">.</span><span class="n">flush</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 日志项为空的任务，是一些管理类的任务。如LastLogIdClosure, TruncatePrefixClosure, TruncateSuffixClosure, ResetClosure
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">TruncatePrefixClosure</span><span class="o">*</span> <span class="n">tpc</span> <span class="o">=</span> 
</span></span><span class="line"><span class="cl">                        <span class="k">dynamic_cast</span><span class="o">&lt;</span><span class="n">TruncatePrefixClosure</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">tpc</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">ret</span> <span class="o">=</span> <span class="n">log_manager</span><span class="o">-&gt;</span><span class="n">_log_storage</span><span class="o">-&gt;</span><span class="n">truncate_prefix</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">tpc</span><span class="o">-&gt;</span><span class="n">first_index_kept</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// 命中一种即退出循环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">log_manager</span><span class="o">-&gt;</span><span class="n">report_error</span><span class="p">(</span><span class="n">ret</span><span class="p">,</span> <span class="s">&#34;Failed operation on LogStorage&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">done</span><span class="o">-&gt;</span><span class="n">Run</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK</span><span class="p">(</span><span class="o">!</span><span class="n">iter</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Must iterate to the end&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ab</span><span class="p">.</span><span class="n">flush</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">log_manager</span><span class="o">-&gt;</span><span class="n">set_disk_id</span><span class="p">(</span><span class="n">last_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面AppendBatcher::append会将日志加入队列，AppendBatcher::flush会调用LogManager::append_to_storage来写盘。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">LogManager</span><span class="o">::</span><span class="n">append_to_storage</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">*&gt;*</span> <span class="n">to_append</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                   <span class="n">LogId</span><span class="o">*</span> <span class="n">last_id</span><span class="p">,</span> <span class="n">IOMetric</span><span class="o">*</span> <span class="n">metric</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_has_error</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">butil</span><span class="o">::</span><span class="n">memory_order_relaxed</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 调用底层存储实现，默认为SegmentLogStorage
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">nappent</span> <span class="o">=</span> <span class="n">_log_storage</span><span class="o">-&gt;</span><span class="n">append_entries</span><span class="p">(</span><span class="o">*</span><span class="n">to_append</span><span class="p">,</span> <span class="n">metric</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">nappent</span> <span class="o">!=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">to_append</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">report_error</span><span class="p">(</span><span class="n">EIO</span><span class="p">,</span> <span class="s">&#34;Fail to append entries&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">to_append</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="o">*</span><span class="n">to_append</span><span class="p">)[</span><span class="n">j</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">Release</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">to_append</span><span class="o">-&gt;</span><span class="n">clear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="同步follower">同步follower</h3>
<p>_send_entries 负责同步task到follower。在apply_task时会将任务写到log_manager里面，而在_send_entries实现中，会调用_prepare_entry来从log_manager获取entry。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Replicator</span><span class="o">::</span><span class="n">_send_entries</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="o">&gt;</span> <span class="n">cntl</span><span class="p">(</span><span class="k">new</span> <span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">AppendEntriesRequest</span><span class="o">&gt;</span> <span class="n">request</span><span class="p">(</span><span class="k">new</span> <span class="n">AppendEntriesRequest</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">AppendEntriesResponse</span><span class="o">&gt;</span> <span class="n">response</span><span class="p">(</span><span class="k">new</span> <span class="n">AppendEntriesResponse</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_fill_common_fields</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="n">_next_index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">false</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_reset_next_index</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nf">_install_snapshot</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">EntryMeta</span> <span class="n">em</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int</span> <span class="n">max_entries_size</span> <span class="o">=</span> <span class="n">FLAGS_raft_max_entries_size</span> <span class="o">-</span> <span class="n">_flying_append_entries_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">prepare_entry_rc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK_GT</span><span class="p">(</span><span class="n">max_entries_size</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">max_entries_size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 从log_manager来准备entry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">prepare_entry_rc</span> <span class="o">=</span> <span class="n">_prepare_entry</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">em</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">cntl</span><span class="o">-&gt;</span><span class="n">request_attachment</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">prepare_entry_rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">request</span><span class="o">-&gt;</span><span class="n">add_entries</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">em</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">entries_size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// _id is unlock in _wait_more
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">_next_index</span> <span class="o">&lt;</span> <span class="n">_options</span><span class="p">.</span><span class="n">log_manager</span><span class="o">-&gt;</span><span class="n">first_log_index</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">_reset_next_index</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nf">_install_snapshot</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nf">_wait_more_entries</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">_append_entries_in_fly</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">FlyingAppendEntriesRpc</span><span class="p">(</span><span class="n">_next_index</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                     <span class="n">request</span><span class="o">-&gt;</span><span class="n">entries_size</span><span class="p">(),</span> <span class="n">cntl</span><span class="o">-&gt;</span><span class="n">call_id</span><span class="p">()));</span>
</span></span><span class="line"><span class="cl">    <span class="n">_append_entries_counter</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_next_index</span> <span class="o">+=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">entries_size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">_flying_append_entries_size</span> <span class="o">+=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">entries_size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">g_send_entries_batch_counter</span> <span class="o">&lt;&lt;</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">entries_size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">_st</span><span class="p">.</span><span class="n">st</span> <span class="o">=</span> <span class="n">APPENDING_ENTRIES</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_st</span><span class="p">.</span><span class="n">first_log_index</span> <span class="o">=</span> <span class="n">_min_flying_index</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">_st</span><span class="p">.</span><span class="n">last_log_index</span> <span class="o">=</span> <span class="n">_next_index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">Closure</span><span class="o">*</span> <span class="n">done</span> <span class="o">=</span> <span class="n">brpc</span><span class="o">::</span><span class="n">NewCallback</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">_on_rpc_returned</span><span class="p">,</span> <span class="n">_id</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">cntl</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> 
</span></span><span class="line"><span class="cl">                <span class="n">request</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="n">response</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="n">butil</span><span class="o">::</span><span class="n">monotonic_time_ms</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">RaftService_Stub</span> <span class="nf">stub</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_sending_channel</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">stub</span><span class="p">.</span><span class="n">append_entries</span><span class="p">(</span><span class="n">cntl</span><span class="p">.</span><span class="n">release</span><span class="p">(),</span> <span class="n">request</span><span class="p">.</span><span class="n">release</span><span class="p">(),</span> 
</span></span><span class="line"><span class="cl">                        <span class="n">response</span><span class="p">.</span><span class="n">release</span><span class="p">(),</span> <span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">_wait_more_entries</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>send_entries结果处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Replicator</span><span class="o">::</span><span class="n">_on_rpc_returned</span><span class="p">(</span><span class="n">ReplicatorId</span> <span class="n">id</span><span class="p">,</span> <span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="o">*</span> <span class="n">cntl</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="n">AppendEntriesRequest</span><span class="o">*</span> <span class="n">request</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                     <span class="n">AppendEntriesResponse</span><span class="o">*</span> <span class="n">response</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="kt">int64_t</span> <span class="n">rpc_send_time</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="o">&gt;</span> <span class="n">cntl_guard</span><span class="p">(</span><span class="n">cntl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">AppendEntriesRequest</span><span class="o">&gt;</span>  <span class="n">req_guard</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">AppendEntriesResponse</span><span class="o">&gt;</span> <span class="n">res_guard</span><span class="p">(</span><span class="n">response</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Replicator</span> <span class="o">*</span><span class="n">r</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">bthread_id_t</span> <span class="n">dummy_id</span> <span class="o">=</span> <span class="p">{</span> <span class="n">id</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">long</span> <span class="n">start_time_us</span> <span class="o">=</span> <span class="n">butil</span><span class="o">::</span><span class="n">gettimeofday_us</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">valid_rpc</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int64_t</span> <span class="n">rpc_first_index</span> <span class="o">=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">prev_log_index</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int64_t</span> <span class="n">min_flying_index</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_min_flying_index</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK_GT</span><span class="p">(</span><span class="n">min_flying_index</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 省略校验call_id是否匹配的逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">cntl</span><span class="o">-&gt;</span><span class="n">Failed</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; fail, sleep.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">BRAFT_VLOG</span> <span class="o">&lt;&lt;</span> <span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// If the follower crashes, any RPC to the follower fails immediately,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// so we need to block the follower for a while instead of looping until
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// it comes back or be removed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// dummy_id is unlock in block
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">r</span><span class="o">-&gt;</span><span class="n">_reset_next_index</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 失败了block一段时间，有可能follower crash
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_block</span><span class="p">(</span><span class="n">start_time_us</span><span class="p">,</span> <span class="n">cntl</span><span class="o">-&gt;</span><span class="n">ErrorCode</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_consecutive_error_times</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">success</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果响应中的term更大则退位
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">NodeImpl</span> <span class="o">*</span><span class="n">node_impl</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">butil</span><span class="o">::</span><span class="n">Status</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">status</span><span class="p">.</span><span class="n">set_error</span><span class="p">(</span><span class="n">EHIGHERTERMRESPONSE</span><span class="p">,</span> <span class="s">&#34;Leader receives higher term &#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;%s from peer:%s&#34;</span><span class="p">,</span> <span class="n">response</span><span class="o">-&gt;</span><span class="n">GetTypeName</span><span class="p">().</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">peer_id</span><span class="p">.</span><span class="n">to_string</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">            <span class="n">node_impl</span><span class="o">-&gt;</span><span class="n">increase_term_to</span><span class="p">(</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">(),</span> <span class="n">status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">node_impl</span><span class="o">-&gt;</span><span class="n">Release</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// prev_log_index and prev_log_term doesn&#39;t match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">r</span><span class="o">-&gt;</span><span class="n">_reset_next_index</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// log index 不匹配则直接设置next_index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">last_log_index</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_next_index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// The peer contains less logs than leader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">r</span><span class="o">-&gt;</span><span class="n">_next_index</span> <span class="o">=</span> <span class="n">response</span><span class="o">-&gt;</span><span class="n">last_log_index</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">            <span class="c1">// 否则依次减1直到匹配(XXX 看下面的实现不是term不匹配导致的，那什么情况会走到这个逻辑？）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// The peer contains logs from old term which should be truncated,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// decrease _last_log_at_peer by one to test the right index to keep
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">BAIDU_LIKELY</span><span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">_next_index</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="o">--</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">_next_index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">LOG</span><span class="p">(</span><span class="n">ERROR</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Group &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">group_id</span> 
</span></span><span class="line"><span class="cl">                           <span class="o">&lt;&lt;</span> <span class="s">&#34; peer=&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">peer_id</span>
</span></span><span class="line"><span class="cl">                           <span class="o">&lt;&lt;</span> <span class="s">&#34; declares that log at index=0 doesn&#39;t match,&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="s">&#34; which is not supposed to happen&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// dummy_id is unlock in _send_heartbeat
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 用于更新log index信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">r</span><span class="o">-&gt;</span><span class="n">_send_empty_entries</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; success&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">BRAFT_VLOG</span> <span class="o">&lt;&lt;</span> <span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">()</span> <span class="o">!=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">r</span><span class="o">-&gt;</span><span class="n">_reset_next_index</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">bthread_id_unlock</span><span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">_id</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail to unlock &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_update_last_rpc_send_timestamp</span><span class="p">(</span><span class="n">rpc_send_time</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int</span> <span class="n">entries_size</span> <span class="o">=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">entries_size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">rpc_last_log_index</span> <span class="o">=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">prev_log_index</span><span class="p">()</span> <span class="o">+</span> <span class="n">entries_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">BRAFT_VLOG_IF</span><span class="p">(</span><span class="n">entries_size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Group &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">group_id</span>
</span></span><span class="line"><span class="cl">                                    <span class="o">&lt;&lt;</span> <span class="s">&#34; replicated logs in [&#34;</span> 
</span></span><span class="line"><span class="cl">                                    <span class="o">&lt;&lt;</span> <span class="n">min_flying_index</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;, &#34;</span> 
</span></span><span class="line"><span class="cl">                                    <span class="o">&lt;&lt;</span> <span class="n">rpc_last_log_index</span>
</span></span><span class="line"><span class="cl">                                    <span class="o">&lt;&lt;</span> <span class="s">&#34;] to peer &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">peer_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">entries_size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 检查是否通过投票
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">ballot_box</span><span class="o">-&gt;</span><span class="n">commit_at</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">min_flying_index</span><span class="p">,</span> <span class="n">rpc_last_log_index</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">peer_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// A rpc is marked as success, means all request before it are success,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// erase them sequentially.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">_append_entries_in_fly</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">           <span class="n">r</span><span class="o">-&gt;</span><span class="n">_append_entries_in_fly</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">log_index</span> <span class="o">&lt;=</span> <span class="n">rpc_first_index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">r</span><span class="o">-&gt;</span><span class="n">_flying_append_entries_size</span> <span class="o">-=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_append_entries_in_fly</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">entries_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">r</span><span class="o">-&gt;</span><span class="n">_append_entries_in_fly</span><span class="p">.</span><span class="n">pop_front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_has_succeeded</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_notify_on_caught_up</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// dummy_id is unlock in _send_entries
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">_timeout_now_index</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_timeout_now_index</span> <span class="o">&lt;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_min_flying_index</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">r</span><span class="o">-&gt;</span><span class="n">_send_timeout_now</span><span class="p">(</span><span class="nb">false</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 再次调用send
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_send_entries</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="apply_log">apply_log</h3>
<p>在log被持久化到多数节点上时，BallotBox::commit_at会调用下列函数向队列添加COMMITED任务。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">FSMCaller</span><span class="o">::</span><span class="n">on_committed</span><span class="p">(</span><span class="kt">int64_t</span> <span class="n">committed_index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ApplyTask</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">t</span><span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">COMMITTED</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">t</span><span class="p">.</span><span class="n">committed_index</span> <span class="o">=</span> <span class="n">committed_index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">bthread</span><span class="o">::</span><span class="n">execution_queue_execute</span><span class="p">(</span><span class="n">_queue_id</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>队列执行函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">FSMCaller</span><span class="o">::</span><span class="n">run</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">meta</span><span class="p">,</span> <span class="n">bthread</span><span class="o">::</span><span class="n">TaskIterator</span><span class="o">&lt;</span><span class="n">ApplyTask</span><span class="o">&gt;&amp;</span> <span class="n">iter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">FSMCaller</span><span class="o">*</span> <span class="n">caller</span> <span class="o">=</span> <span class="p">(</span><span class="n">FSMCaller</span><span class="o">*</span><span class="p">)</span><span class="n">meta</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">is_queue_stopped</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">caller</span><span class="o">-&gt;</span><span class="n">do_shutdown</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int64_t</span> <span class="n">max_committed_index</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int64_t</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">size_t</span>  <span class="n">batch_size</span> <span class="o">=</span> <span class="n">FLAGS_raft_fsm_caller_commit_batch</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(;</span> <span class="n">iter</span><span class="p">;</span> <span class="o">++</span><span class="n">iter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">COMMITTED</span> <span class="o">&amp;&amp;</span> <span class="n">counter</span> <span class="o">&lt;</span> <span class="n">batch_size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">committed_index</span> <span class="o">&gt;</span> <span class="n">max_committed_index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">max_committed_index</span> <span class="o">=</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">committed_index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">counter</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">max_committed_index</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">caller</span><span class="o">-&gt;</span><span class="n">_cur_task</span> <span class="o">=</span> <span class="n">COMMITTED</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 出现连续的COMMITED任务超过commit_batch，或者出现了别的类型的任务时调用do_committed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">caller</span><span class="o">-&gt;</span><span class="n">do_committed</span><span class="p">(</span><span class="n">max_committed_index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">max_committed_index</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">g_commit_tasks_batch_counter</span> <span class="o">&lt;&lt;</span> <span class="n">counter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">batch_size</span> <span class="o">=</span> <span class="n">FLAGS_raft_fsm_caller_commit_batch</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">switch</span> <span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="nl">COMMITTED</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">committed_index</span> <span class="o">&gt;</span> <span class="n">max_committed_index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">max_committed_index</span> <span class="o">=</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">committed_index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">counter</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="nl">SNAPSHOT_SAVE</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>do_commited实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">FSMCaller</span><span class="o">::</span><span class="n">do_committed</span><span class="p">(</span><span class="kt">int64_t</span> <span class="n">committed_index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_error</span><span class="p">.</span><span class="n">status</span><span class="p">().</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int64_t</span> <span class="n">last_applied_index</span> <span class="o">=</span> <span class="n">_last_applied_index</span><span class="p">.</span><span class="n">load</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                                        <span class="n">butil</span><span class="o">::</span><span class="n">memory_order_relaxed</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// We can tolerate the disorder of committed_index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">last_applied_index</span> <span class="o">&gt;=</span> <span class="n">committed_index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Closure</span><span class="o">*&gt;</span> <span class="n">closure</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int64_t</span> <span class="n">first_closure_index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">_closure_queue</span><span class="o">-&gt;</span><span class="n">pop_closure_until</span><span class="p">(</span><span class="n">committed_index</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">closure</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                  <span class="o">&amp;</span><span class="n">first_closure_index</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">IteratorImpl</span> <span class="nf">iter_impl</span><span class="p">(</span><span class="n">_fsm</span><span class="p">,</span> <span class="n">_log_manager</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">closure</span><span class="p">,</span> <span class="n">first_closure_index</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                 <span class="n">last_applied_index</span><span class="p">,</span> <span class="n">committed_index</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">_applying_index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(;</span> <span class="n">iter_impl</span><span class="p">.</span><span class="n">is_good</span><span class="p">();)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">iter_impl</span><span class="p">.</span><span class="n">entry</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">!=</span> <span class="n">ENTRY_TYPE_DATA</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 配置变更
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">iter_impl</span><span class="p">.</span><span class="n">entry</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">ENTRY_TYPE_CONFIGURATION</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">iter_impl</span><span class="p">.</span><span class="n">entry</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">old_peers</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// Joint stage is not supposed to be noticeable by end users.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">_fsm</span><span class="o">-&gt;</span><span class="n">on_configuration_committed</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                            <span class="n">Configuration</span><span class="p">(</span><span class="o">*</span><span class="n">iter_impl</span><span class="p">.</span><span class="n">entry</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">peers</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                            <span class="n">iter_impl</span><span class="p">.</span><span class="n">entry</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 其他任务执行回调
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// For other entries, we have nothing to do besides flush the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// pending tasks and run this closure to notify the caller that the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// entries before this one were successfully committed and applied.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">iter_impl</span><span class="p">.</span><span class="n">done</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">iter_impl</span><span class="p">.</span><span class="n">done</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Run</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">iter_impl</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Iterator</span> <span class="nf">iter</span><span class="p">(</span><span class="o">&amp;</span><span class="n">iter_impl</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行用户逻辑来apply
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">_fsm</span><span class="o">-&gt;</span><span class="n">on_apply</span><span class="p">(</span><span class="n">iter</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Try move to next in case that we pass the same log twice.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">iter</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">iter_impl</span><span class="p">.</span><span class="n">has_error</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">set_error</span><span class="p">(</span><span class="n">iter_impl</span><span class="p">.</span><span class="n">error</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">iter_impl</span><span class="p">.</span><span class="n">run_the_rest_closure_with_error</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">last_index</span> <span class="o">=</span> <span class="n">iter_impl</span><span class="p">.</span><span class="n">index</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int64_t</span> <span class="n">last_term</span> <span class="o">=</span> <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">get_term</span><span class="p">(</span><span class="n">last_index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">LogId</span> <span class="nf">last_applied_id</span><span class="p">(</span><span class="n">last_index</span><span class="p">,</span> <span class="n">last_term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 记录applied index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_last_applied_index</span><span class="p">.</span><span class="n">store</span><span class="p">(</span><span class="n">committed_index</span><span class="p">,</span> <span class="n">butil</span><span class="o">::</span><span class="n">memory_order_release</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">_last_applied_term</span> <span class="o">=</span> <span class="n">last_term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 注意：applied index并没有持久化保存，只在内存中保存。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">set_applied_id</span><span class="p">(</span><span class="n">last_applied_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="节点更新">节点更新</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">unsafe_register_conf_change</span><span class="p">(</span><span class="k">const</span> <span class="n">Configuration</span><span class="o">&amp;</span> <span class="n">old_conf</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                           <span class="k">const</span> <span class="n">Configuration</span><span class="o">&amp;</span> <span class="n">new_conf</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                           <span class="n">Closure</span><span class="o">*</span> <span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 非leader报错
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">_state</span> <span class="o">!=</span> <span class="n">STATE_LEADER</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">_state</span> <span class="o">==</span> <span class="n">STATE_TRANSFERRING</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">done</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">().</span><span class="n">set_error</span><span class="p">(</span><span class="n">EBUSY</span><span class="p">,</span> <span class="s">&#34;Is transferring leadership&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">done</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">().</span><span class="n">set_error</span><span class="p">(</span><span class="n">EPERM</span><span class="p">,</span> <span class="s">&#34;Not leader&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">run_closure_in_bthread</span><span class="p">(</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// check concurrent conf change
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果在更新conf，则报错
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">_conf_ctx</span><span class="p">.</span><span class="n">is_busy</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">done</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">().</span><span class="n">set_error</span><span class="p">(</span><span class="n">EBUSY</span><span class="p">,</span> <span class="s">&#34;Doing another configuration change&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">run_closure_in_bthread</span><span class="p">(</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Return immediately when the new peers equals to current configuration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// conf不变直接返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">_conf</span><span class="p">.</span><span class="n">conf</span><span class="p">.</span><span class="n">equals</span><span class="p">(</span><span class="n">new_conf</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">run_closure_in_bthread</span><span class="p">(</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">_conf_ctx</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="n">old_conf</span><span class="p">,</span> <span class="n">new_conf</span><span class="p">,</span> <span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="追赶阶段"><strong>追赶阶段</strong></h3>
<p>如果新的节点配置相对于当前有新增的一个或者多个节点，leader对应的Replicator, 向把最新的snapshot再这个这些中安装，然后开始同步之后的日志。等到所有的新节点数据都追的差不多，就开始进入一下一阶段。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">ConfigurationCtx</span><span class="o">::</span><span class="n">start</span><span class="p">(</span><span class="k">const</span> <span class="n">Configuration</span><span class="o">&amp;</span> <span class="n">old_conf</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                       <span class="k">const</span> <span class="n">Configuration</span><span class="o">&amp;</span> <span class="n">new_conf</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                       <span class="n">Closure</span><span class="o">*</span> <span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">_done</span> <span class="o">=</span> <span class="n">done</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置状态为追赶阶段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_stage</span> <span class="o">=</span> <span class="n">STAGE_CATCHING_UP</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="c1">// diff得到节点变化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">new_conf</span><span class="p">.</span><span class="n">diffs</span><span class="p">(</span><span class="n">old_conf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">adding</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">removing</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 没有新增节点进入下一阶段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">adding</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nf">next_stage</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">adding</span><span class="p">.</span><span class="n">list_peers</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_adding_peers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">PeerId</span><span class="o">&gt;::</span><span class="n">const_iterator</span> <span class="n">iter</span>
</span></span><span class="line"><span class="cl">            <span class="o">=</span> <span class="n">_adding_peers</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">iter</span> <span class="o">!=</span> <span class="n">_adding_peers</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">iter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 创建replicator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">_node</span><span class="o">-&gt;</span><span class="n">_replicator_group</span><span class="p">.</span><span class="n">add_replicator</span><span class="p">(</span><span class="o">*</span><span class="n">iter</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">OnCaughtUp</span><span class="o">*</span> <span class="n">caught_up</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OnCaughtUp</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">_node</span><span class="p">,</span> <span class="n">_node</span><span class="o">-&gt;</span><span class="n">_current_term</span><span class="p">,</span> <span class="o">*</span><span class="n">iter</span><span class="p">,</span> <span class="n">_version</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">timespec</span> <span class="n">due_time</span> <span class="o">=</span> <span class="n">butil</span><span class="o">::</span><span class="n">milliseconds_from_now</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">_node</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">get_catchup_timeout_ms</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 对新增节点，等待新节点数据追的差不多，默认margin为1000
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">_node</span><span class="o">-&gt;</span><span class="n">_replicator_group</span><span class="p">.</span><span class="n">wait_caughtup</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="o">*</span><span class="n">iter</span><span class="p">,</span> <span class="n">_node</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">catchup_margin</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">due_time</span><span class="p">,</span> <span class="n">caught_up</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">delete</span> <span class="n">caught_up</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nf">on_caughtup</span><span class="p">(</span><span class="n">_version</span><span class="p">,</span> <span class="o">*</span><span class="n">iter</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">ReplicatorGroup</span><span class="o">::</span><span class="n">wait_caughtup</span><span class="p">(</span><span class="k">const</span> <span class="n">PeerId</span><span class="o">&amp;</span> <span class="n">peer</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                   <span class="kt">int64_t</span> <span class="n">max_margin</span><span class="p">,</span> <span class="k">const</span> <span class="n">timespec</span><span class="o">*</span> <span class="n">due_time</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                   <span class="n">CatchupClosure</span><span class="o">*</span> <span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">PeerId</span><span class="p">,</span> <span class="n">ReplicatorIdAndStatus</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">_rmap</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">peer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ReplicatorId</span> <span class="n">rid</span> <span class="o">=</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 找replicator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Replicator</span><span class="o">::</span><span class="n">wait_for_caught_up</span><span class="p">(</span><span class="n">rid</span><span class="p">,</span> <span class="n">max_margin</span><span class="p">,</span> <span class="n">due_time</span><span class="p">,</span> <span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Replicator</span><span class="o">::</span><span class="n">wait_for_caught_up</span><span class="p">(</span><span class="n">ReplicatorId</span> <span class="n">id</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                    <span class="kt">int64_t</span> <span class="n">max_margin</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="k">const</span> <span class="n">timespec</span><span class="o">*</span> <span class="n">due_time</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">CatchupClosure</span><span class="o">*</span> <span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">bthread_id_t</span> <span class="n">dummy_id</span> <span class="o">=</span> <span class="p">{</span> <span class="n">id</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">Replicator</span><span class="o">*</span> <span class="n">r</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">bthread_id_lock</span><span class="p">(</span><span class="n">dummy_id</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">r</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">done</span><span class="o">-&gt;</span><span class="n">_max_margin</span> <span class="o">=</span> <span class="n">max_margin</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 已经追上
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">_has_succeeded</span> <span class="o">&amp;&amp;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_is_catchup</span><span class="p">(</span><span class="n">max_margin</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">run_closure_in_bthread</span><span class="p">(</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">bthread_id_unlock</span><span class="p">(</span><span class="n">dummy_id</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail to unlock&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">dummy_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">due_time</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">done</span><span class="o">-&gt;</span><span class="n">_has_timer</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 创建定时器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">bthread_timer_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">done</span><span class="o">-&gt;</span><span class="n">_timer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="o">*</span><span class="n">due_time</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="n">_on_catch_up_timedout</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">id</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">done</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">().</span><span class="n">set_error</span><span class="p">(</span><span class="n">EINVAL</span><span class="p">,</span> <span class="s">&#34;Duplicated call&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">run_closure_in_bthread</span><span class="p">(</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_catchup_closure</span> <span class="o">=</span> <span class="n">done</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// success
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">bthread_id_unlock</span><span class="p">(</span><span class="n">dummy_id</span><span class="p">))</span> 
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail to unlock &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">dummy_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>caughtup回调</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">on_caughtup</span><span class="p">(</span><span class="k">const</span> <span class="n">PeerId</span><span class="o">&amp;</span> <span class="n">peer</span><span class="p">,</span> <span class="kt">int64_t</span> <span class="n">term</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                           <span class="kt">int64_t</span> <span class="n">version</span><span class="p">,</span> <span class="k">const</span> <span class="n">butil</span><span class="o">::</span><span class="n">Status</span><span class="o">&amp;</span> <span class="n">st</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">BAIDU_SCOPED_LOCK</span><span class="p">(</span><span class="n">_mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// CHECK _state and _current_term to avoid ABA problem
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// leader退位处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">_state</span> <span class="o">!=</span> <span class="n">STATE_LEADER</span> <span class="o">||</span> <span class="n">term</span> <span class="o">!=</span> <span class="n">_current_term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// if leader stepped down, reset() has already been called in step_down(),
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// so nothing needs to be done here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 成功追上
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>  <span class="c1">// Caught up successfully
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">_conf_ctx</span><span class="p">.</span><span class="n">on_caughtup</span><span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="n">peer</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Retry if this peer is still alive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果超时再次重试
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">error_code</span><span class="p">()</span> <span class="o">==</span> <span class="n">ETIMEDOUT</span> 
</span></span><span class="line"><span class="cl">            <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">butil</span><span class="o">::</span><span class="n">monotonic_time_ms</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">-</span> <span class="n">_replicator_group</span><span class="p">.</span><span class="n">last_rpc_send_timestamp</span><span class="p">(</span><span class="n">peer</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                    <span class="o">&lt;=</span> <span class="n">_options</span><span class="p">.</span><span class="n">election_timeout_ms</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">OnCaughtUp</span><span class="o">*</span> <span class="n">caught_up</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OnCaughtUp</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">_current_term</span><span class="p">,</span> <span class="n">peer</span><span class="p">,</span> <span class="n">version</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">_replicator_group</span><span class="p">.</span><span class="n">wait_caughtup</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">peer</span><span class="p">,</span> <span class="n">_options</span><span class="p">.</span><span class="n">catchup_margin</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">due_time</span><span class="p">,</span> <span class="n">caught_up</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">LOG</span><span class="p">(</span><span class="n">WARNING</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;node &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_group_id</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;:&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_server_id</span>
</span></span><span class="line"><span class="cl">                <span class="o">&lt;&lt;</span> <span class="s">&#34; wait_caughtup failed, peer &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">peer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">delete</span> <span class="n">caught_up</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 发起重试失败，则彻底失败
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_conf_ctx</span><span class="p">.</span><span class="n">on_caughtup</span><span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="n">peer</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">ConfigurationCtx</span><span class="o">::</span><span class="n">on_caughtup</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int64_t</span> <span class="n">version</span><span class="p">,</span> <span class="k">const</span> <span class="n">PeerId</span><span class="o">&amp;</span> <span class="n">peer_id</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">succ</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 检查必须为追赶阶段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">CHECK_EQ</span><span class="p">(</span><span class="n">STAGE_CATCHING_UP</span><span class="p">,</span> <span class="n">_stage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">succ</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_adding_peers</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">peer_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// add的节点为空则进入下一阶段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">_adding_peers</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nf">next_stage</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Fail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">butil</span><span class="o">::</span><span class="n">Status</span> <span class="n">err</span><span class="p">(</span><span class="n">ECATCHUP</span><span class="p">,</span> <span class="s">&#34;Peer %s failed to catch up&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">peer_id</span><span class="p">.</span><span class="n">to_string</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 失败重置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">reset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">err</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="联合选举阶段"><strong>联合选举阶段</strong></h3>
<p>leader会将旧节点配置和新节点配置写入Log, 在这个阶段之后直到下一个阶段之前，所有的选举和日志同步都需要在<strong>新老节点之间达到多数。</strong></p>
<p>变更节点大于1时，进入联合选举阶段；如果这次只变更了一个节点, 则直接进入下一阶段。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">ConfigurationCtx</span><span class="o">::</span><span class="n">next_stage</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK</span><span class="p">(</span><span class="n">is_busy</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="p">(</span><span class="n">_stage</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="nl">STAGE_CATCHING_UP</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">_nchanges</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">_stage</span> <span class="o">=</span> <span class="n">STAGE_JOINT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">Configuration</span> <span class="nf">old_conf</span><span class="p">(</span><span class="n">_old_peers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">_node</span><span class="o">-&gt;</span><span class="n">unsafe_apply_configuration</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Configuration</span><span class="p">(</span><span class="n">_new_peers</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">old_conf</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Skip joint consensus since only one peer has been changed here. Make
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// it a one-stage change to be compitible with the legacy
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// implementation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">case</span> <span class="nl">STAGE_JOINT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">_stage</span> <span class="o">=</span> <span class="n">STAGE_STABLE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">_node</span><span class="o">-&gt;</span><span class="n">unsafe_apply_configuration</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Configuration</span><span class="p">(</span><span class="n">_new_peers</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>它会生成一个类型为ENTRY_TYPE_CONFIGURATION的logEntry，将entry的peers设置为新配置，old_peers设置为旧配置。然后把这个任务添加到投票箱里面，并调用LogManager::append_entries把entry append到内存并持久化。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">unsafe_apply_configuration</span><span class="p">(</span><span class="k">const</span> <span class="n">Configuration</span><span class="o">&amp;</span> <span class="n">new_conf</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="k">const</span> <span class="n">Configuration</span><span class="o">*</span> <span class="n">old_conf</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="kt">bool</span> <span class="n">leader_start</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK</span><span class="p">(</span><span class="n">_conf_ctx</span><span class="p">.</span><span class="n">is_busy</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">LogEntry</span><span class="o">*</span> <span class="n">entry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogEntry</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry</span><span class="o">-&gt;</span><span class="n">AddRef</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">.</span><span class="n">term</span> <span class="o">=</span> <span class="n">_current_term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 产生一个配置变更的日志项
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">entry</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">=</span> <span class="n">ENTRY_TYPE_CONFIGURATION</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry</span><span class="o">-&gt;</span><span class="n">peers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PeerId</span><span class="o">&gt;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">new_conf</span><span class="p">.</span><span class="n">list_peers</span><span class="p">(</span><span class="n">entry</span><span class="o">-&gt;</span><span class="n">peers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">old_conf</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">entry</span><span class="o">-&gt;</span><span class="n">old_peers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">PeerId</span><span class="o">&gt;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">old_conf</span><span class="o">-&gt;</span><span class="n">list_peers</span><span class="p">(</span><span class="n">entry</span><span class="o">-&gt;</span><span class="n">old_peers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">ConfigurationChangeDone</span><span class="o">*</span> <span class="n">configuration_change_done</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">            <span class="k">new</span> <span class="n">ConfigurationChangeDone</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">_current_term</span><span class="p">,</span> <span class="n">leader_start</span><span class="p">,</span> <span class="n">_leader_lease</span><span class="p">.</span><span class="n">lease_epoch</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Use the new_conf to deal the quorum of this very log
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_ballot_box</span><span class="o">-&gt;</span><span class="n">append_pending_task</span><span class="p">(</span><span class="n">new_conf</span><span class="p">,</span> <span class="n">old_conf</span><span class="p">,</span> <span class="n">configuration_change_done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">*&gt;</span> <span class="n">entries</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">entries</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// append 日志项
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">append_entries</span><span class="p">(</span><span class="o">&amp;</span><span class="n">entries</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                 <span class="k">new</span> <span class="n">LeaderStableClosure</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                                        <span class="n">NodeId</span><span class="p">(</span><span class="n">_group_id</span><span class="p">,</span> <span class="n">_server_id</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                                        <span class="mi">1u</span><span class="p">,</span> <span class="n">_ballot_box</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">check_and_set_configuration</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_conf</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果entry type是ENTRY_TYPE_CONFIGURATION的话就把这个配置append到_config_manager里面。之后会调用LogManager::check_and_set_configuration把_conf设置为刚刚放进去的新配置（其中old_conf为之前的配置）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">LogManager</span><span class="o">::</span><span class="n">append_entries</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">*&gt;</span> <span class="o">*</span><span class="n">entries</span><span class="p">,</span> <span class="n">StableClosure</span><span class="o">*</span> <span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">entries</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Add ref for disk_thread
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">(</span><span class="o">*</span><span class="n">entries</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">AddRef</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">entries</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">ENTRY_TYPE_CONFIGURATION</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ConfigurationEntry</span> <span class="nf">conf_entry</span><span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="o">*</span><span class="n">entries</span><span class="p">)[</span><span class="n">i</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 对于修改peer的类型的日志，加入config manager，影响后续的投票。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">_config_manager</span><span class="o">-&gt;</span><span class="n">add</span><span class="p">(</span><span class="n">conf_entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在这个时间点之后，产生的任务，在放到投票箱的时候_conf.stable会返回false，然后将第二个参数设置为_conf.old_conf。因此这个时间点之后产生的任务需要新旧两个配置共同决定是否提交，也就是JOINT状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">_ballot_box</span><span class="o">-&gt;</span><span class="n">append_pending_task</span><span class="p">(</span><span class="n">_conf</span><span class="p">.</span><span class="n">conf</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                         <span class="n">_conf</span><span class="p">.</span><span class="n">stable</span><span class="p">()</span> <span class="o">?</span> <span class="nb">NULL</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">_conf</span><span class="p">.</span><span class="n">old_conf</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                         <span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">done</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在投票阶段，新旧配置同时达到多数才通过。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">Ballot</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="k">const</span> <span class="n">Configuration</span><span class="o">&amp;</span> <span class="n">conf</span><span class="p">,</span> <span class="k">const</span> <span class="n">Configuration</span><span class="o">*</span> <span class="n">old_conf</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">_peers</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">conf</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">Configuration</span><span class="o">::</span><span class="n">const_iterator</span>
</span></span><span class="line"><span class="cl">            <span class="n">iter</span> <span class="o">=</span> <span class="n">conf</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">iter</span> <span class="o">!=</span> <span class="n">conf</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">iter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_peers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="n">iter</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_quorum</span> <span class="o">=</span> <span class="n">_peers</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">old_conf</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">_old_peers</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">old_conf</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">Configuration</span><span class="o">::</span><span class="n">const_iterator</span>
</span></span><span class="line"><span class="cl">            <span class="n">iter</span> <span class="o">=</span> <span class="n">old_conf</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">();</span> <span class="n">iter</span> <span class="o">!=</span> <span class="n">old_conf</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">iter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_old_peers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="n">iter</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_old_quorum</span> <span class="o">=</span> <span class="n">_old_peers</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Ballot</span><span class="o">::</span><span class="n">PosHint</span> <span class="n">Ballot</span><span class="o">::</span><span class="n">grant</span><span class="p">(</span><span class="k">const</span> <span class="n">PeerId</span><span class="o">&amp;</span> <span class="n">peer</span><span class="p">,</span> <span class="n">PosHint</span> <span class="n">hint</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">UnfoundPeerId</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">iter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">iter</span> <span class="o">=</span> <span class="n">find_peer</span><span class="p">(</span><span class="n">peer</span><span class="p">,</span> <span class="n">_peers</span><span class="p">,</span> <span class="n">hint</span><span class="p">.</span><span class="n">pos0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">iter</span> <span class="o">!=</span> <span class="n">_peers</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">iter</span><span class="o">-&gt;</span><span class="n">found</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 新配置计数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">--</span><span class="n">_quorum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">hint</span><span class="p">.</span><span class="n">pos0</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_old_peers</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">hint</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">iter</span> <span class="o">=</span> <span class="n">find_peer</span><span class="p">(</span><span class="n">peer</span><span class="p">,</span> <span class="n">_old_peers</span><span class="p">,</span> <span class="n">hint</span><span class="p">.</span><span class="n">pos1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">iter</span> <span class="o">!=</span> <span class="n">_old_peers</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">iter</span><span class="o">-&gt;</span><span class="n">found</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 旧配置计数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">--</span><span class="n">_old_quorum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">hint</span><span class="p">.</span><span class="n">pos1</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">hint</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">bool</span> <span class="nf">granted</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_quorum</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">_old_quorum</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>ConfigurationChangeDone回调时，进入下一阶段。</p>
<h3 id="新配置同步阶段"><strong>新配置同步阶段</strong></h3>
<p>当联合选举日志正式被新旧集群接受之后，leader将新节点配置写入log，之后所有的log和选举只需要在新集群中达成一致。 等待日志提交到<strong>新集群</strong>中的多数节点中之后， 正式完成节点变更。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">    <span class="k">case</span> <span class="nl">STAGE_JOINT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">_stage</span> <span class="o">=</span> <span class="n">STAGE_STABLE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">_node</span><span class="o">-&gt;</span><span class="n">unsafe_apply_configuration</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Configuration</span><span class="p">(</span><span class="n">_new_peers</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>和联合选举阶段调用相同的实现，只是old_conf为NULL。</p>
<h3 id="清理阶段"><strong>清理阶段</strong></h3>
<p>leader会将多余的Replicator(如果有)关闭，特别如果当leader本身已经从节点配置中被移除，这时候leader会执行stepdown并且唤醒一个合适的节点触发选举。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">case</span> <span class="nl">STAGE_STABLE</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">bool</span> <span class="n">should_step_down</span> <span class="o">=</span> 
</span></span><span class="line"><span class="cl">                <span class="n">_new_peers</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">_node</span><span class="o">-&gt;</span><span class="n">_server_id</span><span class="p">)</span> <span class="o">==</span> <span class="n">_new_peers</span><span class="p">.</span><span class="n">end</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">butil</span><span class="o">::</span><span class="n">Status</span> <span class="n">st</span> <span class="o">=</span> <span class="n">butil</span><span class="o">::</span><span class="n">Status</span><span class="o">::</span><span class="n">OK</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">reset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">st</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">should_step_down</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 退位
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">_node</span><span class="o">-&gt;</span><span class="n">step_down</span><span class="p">(</span><span class="n">_node</span><span class="o">-&gt;</span><span class="n">_current_term</span><span class="p">,</span> <span class="nb">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">butil</span><span class="o">::</span><span class="n">Status</span><span class="p">(</span><span class="n">ELEADERREMOVED</span><span class="p">,</span> <span class="s">&#34;This node was removed&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="快照">快照</h2>
<h3 id="打快照">打快照</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">do_snapshot</span><span class="p">(</span><span class="n">Closure</span><span class="o">*</span> <span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_snapshot_executor</span><span class="o">-&gt;</span><span class="n">do_snapshot</span><span class="p">(</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">SnapshotExecutor</span><span class="o">::</span><span class="n">do_snapshot</span><span class="p">(</span><span class="n">Closure</span><span class="o">*</span> <span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建writer，默认为LocalSnapshotWriter，使用临时文件路径来初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">SnapshotWriter</span><span class="o">*</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">_snapshot_storage</span><span class="o">-&gt;</span><span class="n">create</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">_saving_snapshot</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">SaveSnapshotDone</span><span class="o">*</span> <span class="n">snapshot_save_done</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SaveSnapshotDone</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">writer</span><span class="p">,</span> <span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_fsm_caller</span><span class="o">-&gt;</span><span class="n">on_snapshot_save</span><span class="p">(</span><span class="n">snapshot_save_done</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">FSMCaller</span><span class="o">::</span><span class="n">on_snapshot_save</span><span class="p">(</span><span class="n">SaveSnapshotClosure</span><span class="o">*</span> <span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ApplyTask</span> <span class="n">task</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">SNAPSHOT_SAVE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="p">.</span><span class="n">done</span> <span class="o">=</span> <span class="n">done</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 加入队列等待执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">bthread</span><span class="o">::</span><span class="n">execution_queue_execute</span><span class="p">(</span><span class="n">_queue_id</span><span class="p">,</span> <span class="n">task</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>FSMCaller处理到打快照的任务时，执行下面的函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">FSMCaller</span><span class="o">::</span><span class="n">do_snapshot_save</span><span class="p">(</span><span class="n">SaveSnapshotClosure</span><span class="o">*</span> <span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK</span><span class="p">(</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int64_t</span> <span class="n">last_applied_index</span> <span class="o">=</span> <span class="n">_last_applied_index</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">butil</span><span class="o">::</span><span class="n">memory_order_relaxed</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置meta信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">SnapshotMeta</span> <span class="n">meta</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">meta</span><span class="p">.</span><span class="n">set_last_included_index</span><span class="p">(</span><span class="n">last_applied_index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">meta</span><span class="p">.</span><span class="n">set_last_included_term</span><span class="p">(</span><span class="n">_last_applied_term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ConfigurationEntry</span> <span class="n">conf_entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">get_configuration</span><span class="p">(</span><span class="n">last_applied_index</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">conf_entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">Configuration</span><span class="o">::</span><span class="n">const_iterator</span>
</span></span><span class="line"><span class="cl">            <span class="n">iter</span> <span class="o">=</span> <span class="n">conf_entry</span><span class="p">.</span><span class="n">conf</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">iter</span> <span class="o">!=</span> <span class="n">conf_entry</span><span class="p">.</span><span class="n">conf</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">iter</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="o">*</span><span class="n">meta</span><span class="p">.</span><span class="n">add_peers</span><span class="p">()</span> <span class="o">=</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">to_string</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">Configuration</span><span class="o">::</span><span class="n">const_iterator</span>
</span></span><span class="line"><span class="cl">            <span class="n">iter</span> <span class="o">=</span> <span class="n">conf_entry</span><span class="p">.</span><span class="n">old_conf</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">iter</span> <span class="o">!=</span> <span class="n">conf_entry</span><span class="p">.</span><span class="n">old_conf</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">iter</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="o">*</span><span class="n">meta</span><span class="p">.</span><span class="n">add_old_peers</span><span class="p">()</span> <span class="o">=</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">to_string</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 将meta保存到writer对象中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">SnapshotWriter</span><span class="o">*</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">done</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">(</span><span class="n">meta</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">writer</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">done</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">().</span><span class="n">set_error</span><span class="p">(</span><span class="n">EINVAL</span><span class="p">,</span> <span class="s">&#34;snapshot_storage create SnapshotWriter failed&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">done</span><span class="o">-&gt;</span><span class="n">Run</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 调用用户的snapshot save实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_fsm</span><span class="o">-&gt;</span><span class="n">on_snapshot_save</span><span class="p">(</span><span class="n">writer</span><span class="p">,</span> <span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在用户的snapshot save实现中，会回调SaveSnapshotClosure::Run，来完成snapshot meta信息的保存。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">SaveSnapshotDone</span><span class="o">::</span><span class="n">Run</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 启动bthread来避免阻塞状态机
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Avoid blocking FSMCaller
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// This continuation of snapshot saving is likely running inplace where the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// on_snapshot_save is called (in the FSMCaller thread) and blocks all the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// following on_apply. As blocking is not necessary and the continuation is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// not important, so we start a bthread to do this.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">bthread_t</span> <span class="n">tid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">bthread_start_urgent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">continue_run</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">PLOG</span><span class="p">(</span><span class="n">ERROR</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail to start bthread&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">continue_run</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span><span class="o">*</span> <span class="n">SaveSnapshotDone</span><span class="o">::</span><span class="n">continue_run</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">SaveSnapshotDone</span><span class="o">*</span> <span class="n">self</span> <span class="o">=</span> <span class="p">(</span><span class="n">SaveSnapshotDone</span><span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">SaveSnapshotDone</span><span class="o">&gt;</span> <span class="n">self_guard</span><span class="p">(</span><span class="n">self</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Must call on_snapshot_save_done to clear _saving_snapshot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">self</span><span class="o">-&gt;</span><span class="n">_se</span><span class="o">-&gt;</span><span class="n">on_snapshot_save_done</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">self</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">(),</span> <span class="n">self</span><span class="o">-&gt;</span><span class="n">_meta</span><span class="p">,</span> <span class="n">self</span><span class="o">-&gt;</span><span class="n">_writer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">self</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">().</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">self</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">().</span><span class="n">set_error</span><span class="p">(</span><span class="n">ret</span><span class="p">,</span> <span class="s">&#34;node call on_snapshot_save_done failed&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//user done, need set error
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="o">-&gt;</span><span class="n">_done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">self</span><span class="o">-&gt;</span><span class="n">_done</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">()</span> <span class="o">=</span> <span class="n">self</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="o">-&gt;</span><span class="n">_done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">run_closure_in_bthread</span><span class="p">(</span><span class="n">self</span><span class="o">-&gt;</span><span class="n">_done</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的continue_run调用下面的实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">SnapshotExecutor</span><span class="o">::</span><span class="n">on_snapshot_save_done</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="n">butil</span><span class="o">::</span><span class="n">Status</span><span class="o">&amp;</span> <span class="n">st</span><span class="p">,</span> <span class="k">const</span> <span class="n">SnapshotMeta</span><span class="o">&amp;</span> <span class="n">meta</span><span class="p">,</span> <span class="n">SnapshotWriter</span><span class="o">*</span> <span class="n">writer</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">raft_mutex_t</span><span class="o">&gt;</span> <span class="n">lck</span><span class="p">(</span><span class="n">_mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">error_code</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// InstallSnapshot can break SaveSnapshot, check InstallSnapshot when SaveSnapshot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// because upstream Snapshot maybe newer than local Snapshot.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果leader发送的snapshot更新，忽略本地的snapshot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">meta</span><span class="p">.</span><span class="n">last_included_index</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="n">_last_snapshot_index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ret</span> <span class="o">=</span> <span class="n">ESTALE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">writer</span><span class="o">-&gt;</span><span class="n">set_error</span><span class="p">(</span><span class="n">ESTALE</span><span class="p">,</span> <span class="s">&#34;Installing snapshot is older than local snapshot&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">lck</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">writer</span><span class="o">-&gt;</span><span class="n">save_meta</span><span class="p">(</span><span class="n">meta</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">writer</span><span class="o">-&gt;</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">writer</span><span class="o">-&gt;</span><span class="n">set_error</span><span class="p">(</span><span class="n">ret</span><span class="p">,</span> <span class="s">&#34;Fail to do snapshot&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 默认调用LocalSnapshotStorage，保存snapshot meta信息到文件，将snapshot目录从临时路径重命名为最终路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">_snapshot_storage</span><span class="o">-&gt;</span><span class="n">close</span><span class="p">(</span><span class="n">writer</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ret</span> <span class="o">=</span> <span class="n">EIO</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">LOG</span><span class="p">(</span><span class="n">WARNING</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;node &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_node</span><span class="o">-&gt;</span><span class="n">node_id</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; fail to close writer&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_last_snapshot_index</span> <span class="o">=</span> <span class="n">meta</span><span class="p">.</span><span class="n">last_included_index</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">_last_snapshot_term</span> <span class="o">=</span> <span class="n">meta</span><span class="p">.</span><span class="n">last_included_term</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">lck</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">_log_manager</span><span class="o">-&gt;</span><span class="n">set_snapshot</span><span class="p">(</span><span class="o">&amp;</span><span class="n">meta</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">lck</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="n">EIO</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">report_error</span><span class="p">(</span><span class="n">EIO</span><span class="p">,</span> <span class="s">&#34;Fail to save snapshot&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">_saving_snapshot</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">lck</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">_running_jobs</span><span class="p">.</span><span class="n">signal</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>set_snapshot更新LogManager的状态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">LogManager</span><span class="o">::</span><span class="n">set_snapshot</span><span class="p">(</span><span class="k">const</span> <span class="n">SnapshotMeta</span><span class="o">*</span> <span class="n">meta</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_lock</span><span class="o">&lt;</span><span class="n">raft_mutex_t</span><span class="o">&gt;</span> <span class="n">lck</span><span class="p">(</span><span class="n">_mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">last_included_index</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="n">_last_snapshot_id</span><span class="p">.</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Configuration</span> <span class="n">conf</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">meta</span><span class="o">-&gt;</span><span class="n">peers_size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">conf</span><span class="p">.</span><span class="n">add_peer</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">peers</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Configuration</span> <span class="n">old_conf</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">meta</span><span class="o">-&gt;</span><span class="n">old_peers_size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">old_conf</span><span class="p">.</span><span class="n">add_peer</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">old_peers</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">ConfigurationEntry</span> <span class="n">entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">LogId</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">last_included_index</span><span class="p">(),</span> <span class="n">meta</span><span class="o">-&gt;</span><span class="n">last_included_term</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry</span><span class="p">.</span><span class="n">conf</span> <span class="o">=</span> <span class="n">conf</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry</span><span class="p">.</span><span class="n">old_conf</span> <span class="o">=</span> <span class="n">old_conf</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_config_manager</span><span class="o">-&gt;</span><span class="n">set_snapshot</span><span class="p">(</span><span class="n">entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int64_t</span> <span class="n">term</span> <span class="o">=</span> <span class="n">unsafe_get_term</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">last_included_index</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="n">LogId</span> <span class="n">last_but_one_snapshot_id</span> <span class="o">=</span> <span class="n">_last_snapshot_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_last_snapshot_id</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">meta</span><span class="o">-&gt;</span><span class="n">last_included_index</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">_last_snapshot_id</span><span class="p">.</span><span class="n">term</span> <span class="o">=</span> <span class="n">meta</span><span class="o">-&gt;</span><span class="n">last_included_term</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_last_snapshot_id</span> <span class="o">&gt;</span> <span class="n">_applied_id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_applied_id</span> <span class="o">=</span> <span class="n">_last_snapshot_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// NOTICE: not to update disk_id here as we are not sure if this node really
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// has these logs on disk storage. Just leave disk_id as it was, which can keep
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// these logs in memory all the time until they are flushed to disk. By this 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// way we can avoid some corner cases which failed to get logs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">term</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果term等于0，说明last_included_index大于last_index（一般发生在follower处），
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 则把缓存和文件里面的log entry从前面截断到last_included_index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// last_included_index is larger than last_index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// FIXME: what if last_included_index is less than first_index?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">_virtual_first_log_id</span> <span class="o">=</span> <span class="n">_last_snapshot_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">truncate_prefix</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">last_included_index</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">lck</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">term</span> <span class="o">==</span> <span class="n">meta</span><span class="o">-&gt;</span><span class="n">last_included_term</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果term等于 meta-&gt;last_included_term，说明log entry里面还存在着这条记录，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 先不着急截断，把它截断到上一个快照处(如果有的话)。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// Truncating log to the index of the last snapshot.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// We don&#39;t truncate log before the latest snapshot immediately since
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// some log around last_snapshot_index is probably needed by some
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// followers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">last_but_one_snapshot_id</span><span class="p">.</span><span class="n">index</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// We have last snapshot index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">_virtual_first_log_id</span> <span class="o">=</span> <span class="n">last_but_one_snapshot_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">truncate_prefix</span><span class="p">(</span><span class="n">last_but_one_snapshot_id</span><span class="p">.</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">lck</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 其他情况对应index上的term不等于meta-&gt;last_included_term，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 则可能是follower处正在安装快照，这种情况，直接reset，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 让_first_log_index指向last_included_index，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// _last_log_index指向last_included_index-1，把entries清空。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// TODO: check the result of reset.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">_virtual_first_log_id</span> <span class="o">=</span> <span class="n">_last_snapshot_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">reset</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">last_included_index</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">lck</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Cannot reach here&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="installsnapshot">InstallSnapshot</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Replicator</span><span class="o">::</span><span class="n">_send_entries</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="k">if</span> <span class="p">(</span><span class="n">_fill_common_fields</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="n">_next_index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">false</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_reset_next_index</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nf">_install_snapshot</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在_send_entries实现中，如果要发送的entry在log_manager中不存在（已经合入snapshot并在本地清理了日志），_fill_common_fields返回非0值，此时会调用_install_snapshot来安装快照。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Replicator</span><span class="o">::</span><span class="n">_install_snapshot</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// pre-set replicator state to INSTALLING_SNAPSHOT, so replicator could be
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// blocked if something is wrong, such as throttled for a period of time 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_st</span><span class="p">.</span><span class="n">st</span> <span class="o">=</span> <span class="n">INSTALLING_SNAPSHOT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 返回最新的快照reader，默认实现为LocalSnapshotReader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_reader</span> <span class="o">=</span> <span class="n">_options</span><span class="p">.</span><span class="n">snapshot_storage</span><span class="o">-&gt;</span><span class="n">open</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_reader</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">e</span><span class="p">.</span><span class="n">status</span><span class="p">().</span><span class="n">set_error</span><span class="p">(</span><span class="n">EIO</span><span class="p">,</span> <span class="s">&#34;Fail to open snapshot&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> 
</span></span><span class="line"><span class="cl">    <span class="c1">// 生成copy的uri，格式为 remote://host:port/reader_id_number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 通过reader id可以区分不同的读者
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">_reader</span><span class="o">-&gt;</span><span class="n">generate_uri_for_copy</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">SnapshotMeta</span> <span class="n">meta</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// report error on failure
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">_reader</span><span class="o">-&gt;</span><span class="n">load_meta</span><span class="p">(</span><span class="o">&amp;</span><span class="n">meta</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">e</span><span class="p">.</span><span class="n">status</span><span class="p">().</span><span class="n">set_error</span><span class="p">(</span><span class="n">EIO</span><span class="p">,</span> <span class="s">&#34;Fail to load meta from &#34;</span> <span class="o">+</span> <span class="n">snapshot_path</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> 
</span></span><span class="line"><span class="cl">    <span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="o">*</span> <span class="n">cntl</span> <span class="o">=</span> <span class="k">new</span> <span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cntl</span><span class="o">-&gt;</span><span class="n">set_max_retry</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">cntl</span><span class="o">-&gt;</span><span class="n">set_timeout_ms</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">InstallSnapshotRequest</span><span class="o">*</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InstallSnapshotRequest</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">InstallSnapshotResponse</span><span class="o">*</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InstallSnapshotResponse</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">request</span><span class="o">-&gt;</span><span class="n">set_term</span><span class="p">(</span><span class="n">_options</span><span class="p">.</span><span class="n">term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">request</span><span class="o">-&gt;</span><span class="n">set_group_id</span><span class="p">(</span><span class="n">_options</span><span class="p">.</span><span class="n">group_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">request</span><span class="o">-&gt;</span><span class="n">set_server_id</span><span class="p">(</span><span class="n">_options</span><span class="p">.</span><span class="n">server_id</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">request</span><span class="o">-&gt;</span><span class="n">set_peer_id</span><span class="p">(</span><span class="n">_options</span><span class="p">.</span><span class="n">peer_id</span><span class="p">.</span><span class="n">to_string</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 设置meta和uri
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">request</span><span class="o">-&gt;</span><span class="n">mutable_meta</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">CopyFrom</span><span class="p">(</span><span class="n">meta</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">request</span><span class="o">-&gt;</span><span class="n">set_uri</span><span class="p">(</span><span class="n">uri</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">_install_snapshot_in_fly</span> <span class="o">=</span> <span class="n">cntl</span><span class="o">-&gt;</span><span class="n">call_id</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">_install_snapshot_counter</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_st</span><span class="p">.</span><span class="n">last_log_included</span> <span class="o">=</span> <span class="n">meta</span><span class="p">.</span><span class="n">last_included_index</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">_st</span><span class="p">.</span><span class="n">last_term_included</span> <span class="o">=</span> <span class="n">meta</span><span class="p">.</span><span class="n">last_included_term</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">Closure</span><span class="o">*</span> <span class="n">done</span> <span class="o">=</span> <span class="n">brpc</span><span class="o">::</span><span class="n">NewCallback</span><span class="o">&lt;</span>
</span></span><span class="line"><span class="cl">                <span class="n">ReplicatorId</span><span class="p">,</span> <span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="o">*</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">InstallSnapshotRequest</span><span class="o">*</span><span class="p">,</span> <span class="n">InstallSnapshotResponse</span><span class="o">*&gt;</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">_on_install_snapshot_returned</span><span class="p">,</span> <span class="n">_id</span><span class="p">.</span><span class="n">value</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">cntl</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">RaftService_Stub</span> <span class="nf">stub</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_sending_channel</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">stub</span><span class="p">.</span><span class="n">install_snapshot</span><span class="p">(</span><span class="n">cntl</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK_EQ</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">bthread_id_unlock</span><span class="p">(</span><span class="n">_id</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail to unlock &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>follower的处理逻辑</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">NodeImpl</span><span class="o">::</span><span class="n">handle_install_snapshot_request</span><span class="p">(</span><span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="o">*</span> <span class="n">cntl</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="k">const</span> <span class="n">InstallSnapshotRequest</span><span class="o">*</span> <span class="n">request</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">InstallSnapshotResponse</span><span class="o">*</span> <span class="n">response</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">Closure</span><span class="o">*</span> <span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// check stale term
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 让过期的leader退位
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">_current_term</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_term</span><span class="p">(</span><span class="n">_current_term</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_success</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">check_step_down</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">(),</span> <span class="n">server_id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果接收到了另一个peer的install snapshot请求，term加1，让两个leader都退位
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">server_id</span> <span class="o">!=</span> <span class="n">_leader_id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Increase the term by 1 and make both leaders step down to minimize the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// loss of split brain
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">butil</span><span class="o">::</span><span class="n">Status</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">status</span><span class="p">.</span><span class="n">set_error</span><span class="p">(</span><span class="n">ELEADERCONFLICT</span><span class="p">,</span> <span class="s">&#34;More than one leader in the same term.&#34;</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">        <span class="n">step_down</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">false</span><span class="p">,</span> <span class="n">status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_success</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="o">-&gt;</span><span class="n">set_term</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">term</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">clear_append_entries_cache</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">lck</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">_snapshot_executor</span><span class="o">-&gt;</span><span class="n">install_snapshot</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">cntl</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">done_guard</span><span class="p">.</span><span class="n">release</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>install_snapshot实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">SnapshotExecutor</span><span class="o">::</span><span class="n">install_snapshot</span><span class="p">(</span><span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="o">*</span> <span class="n">cntl</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                        <span class="k">const</span> <span class="n">InstallSnapshotRequest</span><span class="o">*</span> <span class="n">request</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                        <span class="n">InstallSnapshotResponse</span><span class="o">*</span> <span class="n">response</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                        <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">Closure</span><span class="o">*</span> <span class="n">done</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">brpc</span><span class="o">::</span><span class="n">ClosureGuard</span> <span class="n">done_guard</span><span class="p">(</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">SnapshotMeta</span> <span class="n">meta</span> <span class="o">=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">meta</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">DownloadingSnapshot</span><span class="o">&gt;</span> <span class="n">ds</span><span class="p">(</span><span class="k">new</span> <span class="n">DownloadingSnapshot</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ds</span><span class="o">-&gt;</span><span class="n">cntl</span> <span class="o">=</span> <span class="n">cntl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ds</span><span class="o">-&gt;</span><span class="n">done</span> <span class="o">=</span> <span class="n">done</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ds</span><span class="o">-&gt;</span><span class="n">response</span> <span class="o">=</span> <span class="n">response</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ds</span><span class="o">-&gt;</span><span class="n">request</span> <span class="o">=</span> <span class="n">request</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 启动bthread来开始copy。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果已经存在任务，视index新旧取消原任务或忽略新任务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ret</span> <span class="o">=</span> <span class="n">register_downloading_snapshot</span><span class="p">(</span><span class="n">ds</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//    ^^^ DON&#39;T access request, response, done and cntl after this point
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//        as the retry snapshot will replace this one.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Release done first as this RPC might be replaced by the retry one
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">done_guard</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK</span><span class="p">(</span><span class="n">_cur_copier</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 等待copy的bthread执行完成
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_cur_copier</span><span class="o">-&gt;</span><span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 加载下载的snapshot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="nf">load_downloading_snapshot</span><span class="p">(</span><span class="n">ds</span><span class="p">.</span><span class="n">release</span><span class="p">(),</span> <span class="n">meta</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>LocalSnapshotCopier创建及初始化</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">SnapshotCopier</span><span class="o">*</span> <span class="n">LocalSnapshotStorage</span><span class="o">::</span><span class="n">start_to_copy_from</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">uri</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">LocalSnapshotCopier</span><span class="o">*</span> <span class="n">copier</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LocalSnapshotCopier</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">copier</span><span class="o">-&gt;</span><span class="n">_storage</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">copier</span><span class="o">-&gt;</span><span class="n">_filter_before_copy_remote</span> <span class="o">=</span> <span class="n">_filter_before_copy_remote</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">copier</span><span class="o">-&gt;</span><span class="n">_fs</span> <span class="o">=</span> <span class="n">_fs</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">copier</span><span class="o">-&gt;</span><span class="n">_throttle</span> <span class="o">=</span> <span class="n">_snapshot_throttle</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 解析leader的ip:port以及reader_id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">copier</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">LOG</span><span class="p">(</span><span class="n">ERROR</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail to init copier from &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">uri</span>
</span></span><span class="line"><span class="cl">                   <span class="o">&lt;&lt;</span> <span class="s">&#34; path: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">_path</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">delete</span> <span class="n">copier</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">copier</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">copier</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>拷贝实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">LocalSnapshotCopier</span><span class="o">::</span><span class="n">copy</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 加载remote meta信息，具体实现为将远程的meta文件读取到内存的IOBuf，然后进行解析
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">load_meta_table</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 根据开关，允许对和本地snapshot中文件名和校验和相同的文件跳过下载
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">filter</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">files</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">_remote_snapshot</span><span class="p">.</span><span class="n">list_files</span><span class="p">(</span><span class="o">&amp;</span><span class="n">files</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 逐个拷贝文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">files</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">ok</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 通过文件操作RPC，将文件分段拷贝过来。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">copy_file</span><span class="p">(</span><span class="n">files</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ok</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">_writer</span> <span class="o">&amp;&amp;</span> <span class="n">_writer</span><span class="o">-&gt;</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_writer</span><span class="o">-&gt;</span><span class="n">set_error</span><span class="p">(</span><span class="n">error_code</span><span class="p">(),</span> <span class="n">error_cstr</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_writer</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// set_error for copier only when failed to close writer and copier was 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// ok before this moment 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">_storage</span><span class="o">-&gt;</span><span class="n">close</span><span class="p">(</span><span class="n">_writer</span><span class="p">,</span> <span class="n">_filter_before_copy_remote</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">set_error</span><span class="p">(</span><span class="n">EIO</span><span class="p">,</span> <span class="s">&#34;Fail to close writer&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">_writer</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_reader</span> <span class="o">=</span> <span class="n">_storage</span><span class="o">-&gt;</span><span class="n">open</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在snapshot下载完成后，调用SnapshotExecutor::load_downloading_snapshot来加载</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">SnapshotExecutor</span><span class="o">::</span><span class="n">load_downloading_snapshot</span><span class="p">(</span><span class="n">DownloadingSnapshot</span><span class="o">*</span> <span class="n">ds</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                 <span class="k">const</span> <span class="n">SnapshotMeta</span><span class="o">&amp;</span> <span class="n">meta</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">brpc</span><span class="o">::</span><span class="n">ClosureGuard</span> <span class="n">done_guard</span><span class="p">(</span><span class="n">ds</span><span class="o">-&gt;</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">CHECK</span><span class="p">(</span><span class="n">_cur_copier</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">SnapshotReader</span><span class="o">*</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">_cur_copier</span><span class="o">-&gt;</span><span class="n">get_reader</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_cur_copier</span><span class="o">-&gt;</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span><span class="o">-&gt;</span><span class="n">cntl</span><span class="o">-&gt;</span><span class="n">SetFailed</span><span class="p">(</span><span class="n">_cur_copier</span><span class="o">-&gt;</span><span class="n">error_code</span><span class="p">(),</span> <span class="s">&#34;%s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="n">_cur_copier</span><span class="o">-&gt;</span><span class="n">error_cstr</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">_snapshot_storage</span><span class="o">-&gt;</span><span class="n">close</span><span class="p">(</span><span class="n">_cur_copier</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">_cur_copier</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">reader</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="o">!</span><span class="n">reader</span><span class="o">-&gt;</span><span class="n">ok</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span><span class="o">-&gt;</span><span class="n">cntl</span><span class="o">-&gt;</span><span class="n">SetFailed</span><span class="p">(</span><span class="n">brpc</span><span class="o">::</span><span class="n">EINTERNAL</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                           <span class="s">&#34;Fail to copy snapshot from %s&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="n">ds</span><span class="o">-&gt;</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">uri</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// The owner of ds is on_snapshot_load_done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ds_guard</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">done_guard</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">_loading_snapshot</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//                ^ After this point, this installing cannot be interrupted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">_loading_snapshot_meta</span> <span class="o">=</span> <span class="n">meta</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">lck</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">InstallSnapshotDone</span><span class="o">*</span> <span class="n">install_snapshot_done</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">            <span class="k">new</span> <span class="n">InstallSnapshotDone</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">reader</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 调用用户的snapshot load实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">_fsm_caller</span><span class="o">-&gt;</span><span class="n">on_snapshot_load</span><span class="p">(</span><span class="n">install_snapshot_done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">install_snapshot_done</span><span class="o">-&gt;</span><span class="n">status</span><span class="p">().</span><span class="n">set_error</span><span class="p">(</span><span class="n">EHOSTDOWN</span><span class="p">,</span> <span class="s">&#34;This raft node is down&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">install_snapshot_done</span><span class="o">-&gt;</span><span class="n">Run</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Leader对InstallSnapshot响应的处理逻辑</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Replicator</span><span class="o">::</span><span class="n">_on_install_snapshot_returned</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">ReplicatorId</span> <span class="n">id</span><span class="p">,</span> <span class="n">brpc</span><span class="o">::</span><span class="n">Controller</span><span class="o">*</span> <span class="n">cntl</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">InstallSnapshotRequest</span><span class="o">*</span> <span class="n">request</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">            <span class="n">InstallSnapshotResponse</span><span class="o">*</span> <span class="n">response</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Replicator</span> <span class="o">*</span><span class="n">r</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">bthread_id_t</span> <span class="n">dummy_id</span> <span class="o">=</span> <span class="p">{</span> <span class="n">id</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">succ</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">bthread_id_lock</span><span class="p">(</span><span class="n">dummy_id</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">r</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">_reader</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 关闭reader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">snapshot_storage</span><span class="o">-&gt;</span><span class="n">close</span><span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">_reader</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">r</span><span class="o">-&gt;</span><span class="n">_reader</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">snapshot_throttle</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">r</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">.</span><span class="n">snapshot_throttle</span><span class="o">-&gt;</span><span class="n">finish_one_task</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果失败会在后续的_send_entries中再次调用InstallSnapshot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// We don&#39;t retry installing the snapshot explicitly. 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// dummy_id is unlock in _send_entries
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">succ</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_block</span><span class="p">(</span><span class="n">butil</span><span class="o">::</span><span class="n">gettimeofday_us</span><span class="p">(),</span> <span class="n">cntl</span><span class="o">-&gt;</span><span class="n">ErrorCode</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_has_succeeded</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">-&gt;</span><span class="n">_notify_on_caught_up</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">_timeout_now_index</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_timeout_now_index</span> <span class="o">&lt;</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_min_flying_index</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">r</span><span class="o">-&gt;</span><span class="n">_send_timeout_now</span><span class="p">(</span><span class="nb">false</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// dummy_id is unlock in _send_entries
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">_send_entries</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考">参考</h2>
<ul>
<li><a href="https://github.com/baidu/braft/blob/master/docs/cn/server.md">braft/server.md at master · baidu/braft (github.com)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/169840204">braft源码分析（一）选举和心跳保持部分 - 知乎 (zhihu.com)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/169904153">braft源码分析（二）日志复制、配置变更和快照 - 知乎 (zhihu.com)</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
